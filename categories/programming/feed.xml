<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Programming on kinow</title><link>https://kinoshita.eti.br/categories/programming.html</link><description>Recent content in Programming on kinow</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><copyright>Bruno P. Kinoshita All rights reserved</copyright><lastBuildDate>Thu, 10 Oct 2024 13:59:25 +0200</lastBuildDate><atom:link href="https://kinoshita.eti.br/categories/programming/feed.xml" rel="self" type="application/rss+xml"/><item><title>Using Docker to run Cypress with Maven</title><link>https://kinoshita.eti.br/2024/08/11/using-docker-to-run-cypress-with-maven.html</link><pubDate>Sun, 11 Aug 2024 00:02:52 +0300</pubDate><guid>https://kinoshita.eti.br/2024/08/11/using-docker-to-run-cypress-with-maven.html</guid><description>Apache Jena runs Cypress tests from Maven, which makes running everything containerized a bit more difficult. To make it more complicated, we also used wait-on and concurrently to orchestrate how the tests and API test process are launched.
The solution found was to combine the official Maven docker image, with the cypress/included image, in a multi-stage build.
# A multi-stage image with Cypress and Java+Maven for Jena... ALv2... # To build it: # `docker build -t jena/build:latest .</description></item><item><title>Logo: Dev Multitask 100 videos</title><link>https://kinoshita.eti.br/2024/05/11/logo-dev-multitask-100-videos.html</link><pubDate>Sat, 11 May 2024 01:33:52 +0300</pubDate><guid>https://kinoshita.eti.br/2024/05/11/logo-dev-multitask-100-videos.html</guid><description>I modified the DevMultitask channel logo for their 100th video: https://twitter.com/DevMultitask
Dev Multitask 100 videos The party effects are from another logo I designed for the Apache Software Foundation 20th anniversary.</description></item><item><title>Logo: Java Ring</title><link>https://kinoshita.eti.br/2024/04/28/logo-java-ring.html</link><pubDate>Sun, 28 Apr 2024 22:36:52 +0300</pubDate><guid>https://kinoshita.eti.br/2024/04/28/logo-java-ring.html</guid><description>I created this logo sometime ago for the Java community of a friend: https://twitter.com/java_ring
Java Ring logo Acquired a license for the logo, got a copy of Duke in SVG, and some quick Inkscape-ing to slice paths and re-order them.</description></item><item><title>Coverage report for a GitHub private repository with GitHub Actions</title><link>https://kinoshita.eti.br/2023/05/29/coverage-report-for-a-github-private-repository-with-github-actions.html</link><pubDate>Mon, 29 May 2023 20:36:52 +0300</pubDate><guid>https://kinoshita.eti.br/2023/05/29/coverage-report-for-a-github-private-repository-with-github-actions.html</guid><description>Normally when you add test coverage to a GitHub repository, the reporting part boils down to a simple call to some API that will post to a third-party external service like Coveralls or Codecov. Many are already on the GitHub Actions Market Place and a few lines of YAML are enough.
A Codecov coverage report We had to report the test coverage of a private GitHub repository of a project I am working on at the moment, that could not have integration with other services besides GitHub.</description></item></channel></rss>