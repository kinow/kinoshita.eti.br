<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Blog on kinow</title><link>https://kinoshita.eti.br/categories/blog.html</link><description>Recent content in Blog on kinow</description><generator>Hugo</generator><language>en-us</language><copyright>Bruno P. Kinoshita All rights reserved</copyright><lastBuildDate>Thu, 02 Oct 2025 15:56:49 +0200</lastBuildDate><atom:link href="https://kinoshita.eti.br/categories/blog/feed.xml" rel="self" type="application/rss+xml"/><item><title>Loading JavaScript in Jenkins Active Choices parameters</title><link>https://kinoshita.eti.br/2025/08/02/loading-javascript-in-jenkins-active-choices-parameters.html</link><pubDate>Sat, 02 Aug 2025 21:59:52 +0300</pubDate><guid>https://kinoshita.eti.br/2025/08/02/loading-javascript-in-jenkins-active-choices-parameters.html</guid><description>&lt;p>&lt;strong>Be aware that what&amp;rsquo;s described here may introduce a security risk to your
environment, and you must only do it if you really know what you are doing.
You will be breaking a few security fixes of Jenkins, such as&lt;/strong>:&lt;/p>
&lt;ul>
&lt;li>SECURITY-440 &lt;a href="https://github.com/jenkinsci/active-choices-plugin/commit/720af532b0a2c69465824af5735be2859d7c3492">https://github.com/jenkinsci/active-choices-plugin/commit/720af532b0a2c69465824af5735be2859d7c3492&lt;/a>&lt;/li>
&lt;li>Jenkins XSS prevention &lt;a href="https://wiki.jenkins-ci.org/JENKINS/Jelly-and-XSS-prevention.html">https://wiki.jenkins-ci.org/JENKINS/Jelly-and-XSS-prevention.html&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>Some years ago, the Jenkins Active Choices plug-in had a security bug
reported as a Groovy script could have malicious code that would trigger
an XSS attack in Jenkins (i.e. run some arbitrary JS code in Jenkins).
The plug-in got removed from the update site until we fixed it, and the
solution was to sanitize the output of the Groovy script used to render
the Jenkins parameters.&lt;/p></description></item><item><title>Migrating the Jena editor from CodeMirror 5 to 6</title><link>https://kinoshita.eti.br/2025/06/25/migrating-the-jena-editor-from-codemirror-5-to-6.html</link><pubDate>Wed, 25 Jun 2025 09:38:52 +0300</pubDate><guid>https://kinoshita.eti.br/2025/06/25/migrating-the-jena-editor-from-codemirror-5-to-6.html</guid><description>&lt;p>On October last year, Dependabot&amp;rsquo;s bot sent Apache Jena &lt;a href="https://github.com/apache/jena/pull/2789">a pull request&lt;/a>
to update CodeMirror (a code editor component for web) to from our current 5.x version
to 6.0.1. The build failed, as there were breaking changes in the CodeMirror
API going from 5.x to 6.x.&lt;/p>
&lt;p>CodeMirror developers wrote a nice documentation for users to
&lt;a href="https://codemirror.net/docs/migration/">migrate and update their code&lt;/a>.&lt;/p>
&lt;p>After following their documentation, unfortunately there were still build
errors. Several months later, I found myself on a Saturday afternoon in
a room struggling with the first heat wave in Barcelona this year, and
decided to cool down by writing some code under the ceiling fan.&lt;/p></description></item><item><title>Running Cylc workflows on BSC MareNostrum5</title><link>https://kinoshita.eti.br/2025/05/25/running-cylc-workflows-on-bsc-marenostrum5.html</link><pubDate>Sun, 25 May 2025 09:38:52 +0300</pubDate><guid>https://kinoshita.eti.br/2025/05/25/running-cylc-workflows-on-bsc-marenostrum5.html</guid><description>&lt;blockquote>
&lt;p>TL;DR: Using the &lt;code>communication method = poll&lt;/code> of Cylc 8 you can easily run
Cylc 8 workflows on BSC MareNostrum5 HPC.&lt;/p>&lt;/blockquote>
&lt;p>A couple of years ago I gave a talk about &lt;a href="https://eflows4hpc.eu/event/hpc-workflows-for-climate-models/">“HPC workflows for climate models”&lt;/a>
at an ESiWACE3 event. There, I tried to explain in an unbiased way the differences among the workflow
managers commonly used for climate and weather, including &lt;a href="https://autosubmit.readthedocs.io/">Autosubmit&lt;/a>,
&lt;a href="https://ecflow.readthedocs.io/">ecFlow&lt;/a>, and &lt;a href="https://cylc.github.io/">Cylc&lt;/a>. I worked with
the three workflow managers, and developed Cylc while at NIWA in New Zealand, and currently I
develop Autosubmit at the Barcelona Supercomputing Center, BSC, in Barcelona Spain.&lt;/p></description></item><item><title>Removing invisible unread GitHub notifications</title><link>https://kinoshita.eti.br/2021/10/22/removing-invisible-unread-github-notifications.html</link><pubDate>Fri, 22 Oct 2021 00:00:00 +0000</pubDate><guid>https://kinoshita.eti.br/2021/10/22/removing-invisible-unread-github-notifications.html</guid><description>&lt;p>Some months ago I noticed that even after I marked all my GitHub notifications
as read, the unread icon displayed at the right top corner was still showing as
if I had unread notifications.&lt;/p>



&lt;figure class="feature">

 &lt;img
 src='https://kinoshita.eti.br/assets/posts/2021-10-22-removing-invisible-unread-github-notifications/notifications.png'
 alt='GitHub Notifications icon always-on mode'
 title='GitHub Notifications icon always-on mode'
 style=''
 width=''
 height=''
 />
 &lt;figcaption>GitHub Notifications icon always-on mode&lt;/figcaption>

&lt;/figure>


&lt;p>I tried changing the filters, waiting for a new notification to appear so that
I could mark it as read, all hoping that icon would then change. But no matter
what I tried in the GitHub UI, the icon was still there.&lt;/p></description></item><item><title>Blender rendering on NVIDIA Jetson Nano</title><link>https://kinoshita.eti.br/2021/10/17/blender-rendering-on-nvidia-jetson-nano.html</link><pubDate>Sun, 17 Oct 2021 00:00:00 +0000</pubDate><guid>https://kinoshita.eti.br/2021/10/17/blender-rendering-on-nvidia-jetson-nano.html</guid><description>&lt;figure class="feature">

 &lt;img
 src='https://kinoshita.eti.br/assets/posts/2021-10-17-blender-rendering-on-nvidia-jetson-nano/jetson.jpg'
 alt='NVIDIA Jetson Nano computer'
 title='NVIDIA Jetson Nano computer'
 style=''
 width=''
 height=''
 />
 &lt;figcaption>NVIDIA Jetson Nano computer&lt;/figcaption>

&lt;/figure>


&lt;p>I had used Blender during my graduation at the Mackenzie University and started learning
Blender 2.8+ again a few weeks ago. Unfortunately rendering the basic tutorials like Andrew
Price&amp;rsquo;s donut takes several minutes on my old (but excellent for programming) Thinkpad
T550 i7 16 GB with a simple Samsung SSD. The reason is that my GPU, a
&lt;a href="https://www.techpowerup.com/gpu-specs/nvs-5400m.c1742">NVIDIA NVS 5400M&lt;/a>
with 2 GB memory and 96 cores cannot be used with Blender as it only supports CUDA 2.1.
Blender 2.8+ GPU rendering requires CUDA 3.0 and higher, which means Blender Cycles
render is using my CPU, which is slower than using a decent GPU.&lt;/p></description></item><item><title>Cyclic Workflows with Cylc and StackStorm</title><link>https://kinoshita.eti.br/2021/10/01/cyclic-workflows-with-cylc-and-stackstorm.html</link><pubDate>Fri, 01 Oct 2021 00:00:00 +0000</pubDate><guid>https://kinoshita.eti.br/2021/10/01/cyclic-workflows-with-cylc-and-stackstorm.html</guid><description>&lt;p>I am aware of only two workflow managers that support cyclic workflows.
&lt;a href="https://cylc.github.io/">Cylc&lt;/a> and &lt;a href="https://stackstorm.com/">StackStorm&lt;/a>. I won&amp;rsquo;t
enter into details about these two tools, but I must note that I worked on Cylc
during my employment with NIWA, in New Zealand.&lt;/p>
&lt;p>In this post I will only show a very simple workflow called &lt;code>five&lt;/code> first using
Cylc, and then the same workflow with StackStorm.&lt;/p>
&lt;h2 id="cylc">Cylc&lt;/h2>
&lt;p>First let&amp;rsquo;s take a look at the source code of this workflow with Cylc 8 and plot it.&lt;/p></description></item><item><title>NZRSE 2020 Cylc UI Scalability</title><link>https://kinoshita.eti.br/2020/09/03/nzrse-2020-cylc-ui-scalability.html</link><pubDate>Thu, 03 Sep 2020 00:00:00 +0000</pubDate><guid>https://kinoshita.eti.br/2020/09/03/nzrse-2020-cylc-ui-scalability.html</guid><description>&lt;p>Lightning talk for the &lt;a href="http://web.archive.org/web/*/https://www.rseconference.nz/programme/">NZRSE 2020 conference&lt;/a>.&lt;/p>
&lt;iframe
 class="scribd_iframe_embed"
 src="https://kinow.github.io/nzrse-2020-cylc-ui-scalability/#/"
 data-auto-height="true"
 data-aspect-ratio="1.5"
 scrolling="no"
 id="doc_27575"
 width="640px"
 height="400px"
 frameborder="0">&lt;/iframe></description></item><item><title>Notes on Apache Jena StreamRDFWriter</title><link>https://kinoshita.eti.br/2020/04/11/notes-on-apache-jena-streamrdfwriter.html</link><pubDate>Sat, 11 Apr 2020 00:00:00 +0000</pubDate><guid>https://kinoshita.eti.br/2020/04/11/notes-on-apache-jena-streamrdfwriter.html</guid><description>&lt;p>&lt;a href="https://jena.apache.org/">Apache Jena&lt;/a> project is like a box full of interesting things—at least if you love programming. One of its many features, is &lt;strong>stream processing&lt;/strong>.&lt;/p>
&lt;p>The graphs in Jena may contain very large datasets, with giga- or terabytes. Some queries may be very large, and then sending the whole result would be simply impracticable.&lt;/p>
&lt;p>Instead, the data will go through ARQ. ARQ is a query engine for Jena that supports SPARQL. There is one piece of code there that I found interesting while reviewing a small pull request: &lt;a href="https://github.com/apache/jena/blob/cbdba5edb47041a4181a00bd7660e5d4c212530a/jena-arq/src/main/java/org/apache/jena/riot/system/StreamRDFWriter.java">&lt;code>org.apache.jena.riot.system.StreamRDFWriter&lt;/code>&lt;/a>.&lt;/p>
&lt;p>It is responsible for writing graph data in a streaming fashion. (See &lt;a href="https://en.wikipedia.org/wiki/Stream_processing">stream processing&lt;/a> for programming models and more.)&lt;/p>
&lt;h2 id="stream-factories">Stream factories&lt;/h2>
&lt;p>&lt;code>StreamRDFWriter&lt;/code> holds several implementations (as &lt;code>static&lt;/code> members) of &lt;code>StreamRDFWriterFactory&lt;/code>. The factory has one responsibility only, to create streams (&lt;code>StreamRDF&lt;/code>), for a certain format and context.&lt;/p>



&lt;figure class="feature">

 &lt;img
 src='https://kinoshita.eti.br/assets/posts/2020-04-11-notes-on-apache-jena-streamrdfwriter/01.png'
 alt=''
 title=''
 style=''
 width=''
 height=''
 />
 &lt;figcaption>&lt;/figcaption>

&lt;/figure></description></item><item><title>Using Lumino with Vue</title><link>https://kinoshita.eti.br/2020/03/28/using-lumino-with-vue.html</link><pubDate>Sat, 28 Mar 2020 00:00:00 +0000</pubDate><guid>https://kinoshita.eti.br/2020/03/28/using-lumino-with-vue.html</guid><description>&lt;p>&lt;a href="https://github.com/jupyterlab/lumino">Lumino&lt;/a> is the engine that powers the GUI of
&lt;a href="https://github.com/jupyterlab/jupyterlab/">JupyterLab&lt;/a>. It used to be called Phosphor JS,
but some time ago there was a misunderstanding and the author gave up maintaining it.
Then JupyterLab decided to fork it under this new name.&lt;/p>



&lt;figure class="feature">

 &lt;img
 src='https://kinoshita.eti.br/assets/posts/2020-03-28-using-lumino-with-vue/demo.gif'
 alt=''
 title=''
 style=''
 width=''
 height=''
 />
 &lt;figcaption>&lt;/figcaption>

&lt;/figure>


&lt;p>The documentation is still lacking, but it works as expected, and there is already a
community supporting it. We decided to use it in &lt;a href="https://github.com/cylc/cylc-ui">Cylc UI&lt;/a>
to have tabbed panels like JupyterLab.&lt;/p>
&lt;p>&lt;a href="https://github.com/kinow/vue-lumino">This project&lt;/a> contains the part of the code of
Cylc UI that integrated Lumino and Vue. It was a suggestion from one of the maintainers
of JupyterLab, that got involved in an issue of Cylc UI. You can find this project linked
too in the Lumino project &lt;code>README&lt;/code> file.&lt;/p></description></item><item><title>Jenkins Active Choices with Jupyter Notebooks</title><link>https://kinoshita.eti.br/2020/03/26/jenkins-active-choices-with-jupyter-notebooks.html</link><pubDate>Thu, 26 Mar 2020 00:00:00 +0000</pubDate><guid>https://kinoshita.eti.br/2020/03/26/jenkins-active-choices-with-jupyter-notebooks.html</guid><description>&lt;p>&lt;a href="https://plugins.jenkins.io/uno-choice/">Jenkins Active Choices&lt;/a> provides interactive and reactive parameters for the Jenkins UI.
It is used by DevOps but also by researchers in industry and academia. Some days ago I ran an experiment where I tried
to reproduce similar behaviour of the plug-in with Jupyter Notebooks and &lt;a href="https://ipywidgets.readthedocs.io/en/stable/">ipywidgets&lt;/a>.&lt;/p>
&lt;p>The experiment was a success, and I am convinced one could achieve the same in Jupyter Notebooks. Jenkins could be used as
workflow manager, or the parameters could be submitted to a different workflow manager or another system.&lt;/p></description></item><item><title>Experimenting with Vuejs and Cytoscape</title><link>https://kinoshita.eti.br/2019/11/19/experimenting-with-vuejs-and-cytoscape.html</link><pubDate>Tue, 19 Nov 2019 00:00:00 +0000</pubDate><guid>https://kinoshita.eti.br/2019/11/19/experimenting-with-vuejs-and-cytoscape.html</guid><description>&lt;p>The project I work on at work had a GUI interface with Python and PyGTK, which is now being
ported to the web. We have adopted Vuejs as the JS framework, and have been building the
components required for our UI over the past months. The project is hosted
&lt;a href="https://github.com/cylc/cylc-ui">on GitHub&lt;/a> licensed under GPLv3.&lt;/p>
&lt;p>In Cylc 7, an important visualization was the workflow graph. The screenshot below is from
the design sketches done by another contributor from the UK, showing how it should look in
Cylc 8.&lt;/p>



&lt;figure class="feature">

 &lt;img
 src='https://kinoshita.eti.br/assets/posts/2019-11-19-experimenting-with-vuejs-and-cytoscape/cylc8-sketch.png'
 alt=''
 title=''
 style=''
 width=''
 height=''
 />
 &lt;figcaption>&lt;/figcaption>

&lt;/figure>


&lt;p>The first library we decided to try is Cytoscape, a well-known graph library, with use cases
in research, corporate, and other fields. One limitation of Cytoscape is that the way it renders
the graph nodes is limited.&lt;/p>
&lt;p>Limited, meaning that you won&amp;rsquo;t be able to easily add HTML, images, SVG, animation, etc. Though
not impossible.&lt;/p></description></item><item><title>Dynamic breadcrumbs with Vue Router nested routes and Vuetify Breadcrumb component</title><link>https://kinoshita.eti.br/2019/11/09/dynamic-breadcrumbs-with-vue-router-nested-routes-and-vuetify-breadcrumb-component.html</link><pubDate>Sat, 09 Nov 2019 00:00:00 +0000</pubDate><guid>https://kinoshita.eti.br/2019/11/09/dynamic-breadcrumbs-with-vue-router-nested-routes-and-vuetify-breadcrumb-component.html</guid><description>&lt;p>Vue Router supports nested routes, which allow developers to create a hierarchical navigation structure.
This is handy if you want to create breadcrumbs based on this hierarchy dynamically.&lt;/p>
&lt;p>Here&amp;rsquo;s how you should create your nested routes:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-js" data-lang="js">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a90d91">const&lt;/span> &lt;span style="color:#000">routes&lt;/span> &lt;span style="color:#000">=&lt;/span> [
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> { &lt;span style="color:#000">path&lt;/span>&lt;span style="color:#000">:&lt;/span> &lt;span style="color:#c41a16">&amp;#39;/&amp;#39;&lt;/span>, &lt;span style="color:#000">component&lt;/span>&lt;span style="color:#000">:&lt;/span> { &lt;span style="color:#000">template&lt;/span>&lt;span style="color:#000">:&lt;/span> &lt;span style="color:#c41a16">`&amp;lt;h1&amp;gt;Home View&amp;lt;/h1&amp;gt;`&lt;/span> } },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">path&lt;/span>&lt;span style="color:#000">:&lt;/span> &lt;span style="color:#c41a16">&amp;#39;/users&amp;#39;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">component&lt;/span>&lt;span style="color:#000">:&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">render&lt;/span> (&lt;span style="color:#000">c&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a90d91">return&lt;/span> &lt;span style="color:#000">c&lt;/span>(&lt;span style="color:#c41a16">&amp;#39;router-view&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">meta&lt;/span>&lt;span style="color:#000">:&lt;/span> { &lt;span style="color:#000">breadCrumb&lt;/span>&lt;span style="color:#000">:&lt;/span> &lt;span style="color:#c41a16">&amp;#39;Users&amp;#39;&lt;/span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">children&lt;/span>&lt;span style="color:#000">:&lt;/span> [
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">path&lt;/span>&lt;span style="color:#000">:&lt;/span> &lt;span style="color:#c41a16">&amp;#39;&amp;#39;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">component&lt;/span>&lt;span style="color:#000">:&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">template&lt;/span>&lt;span style="color:#000">:&lt;/span> &lt;span style="color:#c41a16">`
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c41a16"> &amp;lt;div&amp;gt;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c41a16"> &amp;lt;h1&amp;gt;Users View&amp;lt;/h1&amp;gt;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c41a16"> &amp;lt;router-link to=&amp;#34;/users/1&amp;#34;&amp;gt;View User 1&amp;lt;/router-link&amp;gt;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c41a16"> &amp;lt;/div&amp;gt;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c41a16"> `&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">path&lt;/span>&lt;span style="color:#000">:&lt;/span> &lt;span style="color:#c41a16">&amp;#39;:id&amp;#39;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">component&lt;/span>&lt;span style="color:#000">:&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">render&lt;/span> (&lt;span style="color:#000">c&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a90d91">return&lt;/span> &lt;span style="color:#000">c&lt;/span>(&lt;span style="color:#c41a16">&amp;#39;router-view&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">meta&lt;/span>&lt;span style="color:#000">:&lt;/span> { &lt;span style="color:#000">breadCrumb&lt;/span>&lt;span style="color:#000">:&lt;/span> &lt;span style="color:#c41a16">&amp;#39;View User&amp;#39;&lt;/span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">children&lt;/span>&lt;span style="color:#000">:&lt;/span> [
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">path&lt;/span>&lt;span style="color:#000">:&lt;/span> &lt;span style="color:#c41a16">&amp;#39;&amp;#39;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">component&lt;/span>&lt;span style="color:#000">:&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">template&lt;/span>&lt;span style="color:#000">:&lt;/span> &lt;span style="color:#c41a16">`
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c41a16"> &amp;lt;div&amp;gt;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c41a16"> &amp;lt;h1&amp;gt;User View&amp;lt;/h1&amp;gt;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c41a16"> &amp;lt;router-link to=&amp;#34;/users/1/edit&amp;#34;&amp;gt;Edit User&amp;lt;/router-link&amp;gt;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c41a16"> &amp;lt;/div&amp;gt;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c41a16"> `&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">path&lt;/span>&lt;span style="color:#000">:&lt;/span> &lt;span style="color:#c41a16">&amp;#39;edit&amp;#39;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">component&lt;/span>&lt;span style="color:#000">:&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">template&lt;/span>&lt;span style="color:#000">:&lt;/span> &lt;span style="color:#c41a16">`&amp;lt;h1&amp;gt;Edit User&amp;lt;/h1&amp;gt;`&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">meta&lt;/span>&lt;span style="color:#000">:&lt;/span> { &lt;span style="color:#000">breadCrumb&lt;/span>&lt;span style="color:#000">:&lt;/span> &lt;span style="color:#c41a16">&amp;#39;Edit User&amp;#39;&lt;/span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>]
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>Reddit r/functionalprogramming community</title><link>https://kinoshita.eti.br/2019/10/01/reddit-r/functionalprogramming-community.html</link><pubDate>Tue, 01 Oct 2019 00:00:00 +0000</pubDate><guid>https://kinoshita.eti.br/2019/10/01/reddit-r/functionalprogramming-community.html</guid><description>&lt;img class="ui image" src="https://kinoshita.eti.br/assets/pages/art/images/alonzo_and_lambda_by_kinow-d5tqvau.png" style="width: 30%; float: left" alt="Alonzo Church caricature">
&lt;p>&lt;a href="https://reddit.com/r/functionalprogramming/">r/functionalprogramming&lt;/a> was created nearly seven years ago.
It started when I was interested in contributing to
&lt;a href="http://commons.apache.org/proper/commons-functor/">Apache Commons Functor&lt;/a>.&lt;/p>
&lt;p>I created it to have a place to collect links about functional programming. To my surprise there was
no subreddit for functional programming. So I created one. Fast forward a few years, the community is
still active, with a healthy group of nearly 10.000 readers and contributors.&lt;/p></description></item><item><title>Cylc videos</title><link>https://kinoshita.eti.br/2019/09/22/cylc-videos.html</link><pubDate>Sun, 22 Sep 2019 00:00:00 +0000</pubDate><guid>https://kinoshita.eti.br/2019/09/22/cylc-videos.html</guid><description>&lt;p>Last week I put together a playlist with all Cylc videos I could found on Youtube.&lt;/p>
&lt;iframe
 width="560"
 height="315"
 src="https://www.youtube.com/embed/videoseries?list=PLxlfTM52ynRZZ7rtLkoKANWiIFn92d6je"
 frameborder="0"
 allow="autoplay;encrypted-media"
 allowfullscreen>&lt;/iframe>
&lt;p>Clicking on the video above should open the YouTube playlist, with the next videos
on the right. They are sorted from the newest to the oldest (upload date).&lt;/p></description></item><item><title>Generating diagrams from a SQlite database with Python</title><link>https://kinoshita.eti.br/2019/07/28/generating-diagrams-from-a-sqlite-database-with-python.html</link><pubDate>Sun, 28 Jul 2019 00:00:00 +0000</pubDate><guid>https://kinoshita.eti.br/2019/07/28/generating-diagrams-from-a-sqlite-database-with-python.html</guid><description>&lt;figure class="feature">

 &lt;img
 src='https://kinoshita.eti.br/assets/posts/2019-07-28-generating-diagrams-from-a-sqlite-database-with-python/Amiga.png'
 alt='A 1984 Apple Macintosh drawing'
 title='A 1984 Apple Macintosh drawing'
 style='float: left; width: 30%;'
 width=''
 height=''
 />
 &lt;figcaption>A 1984 Apple Macintosh drawing&lt;/figcaption>

&lt;/figure>


&lt;p>There are tools out there that can be used to reverse engineer databases and generate diagrams. These tools
normally are GUI based. But &lt;a href="https://github.com/cylc/cylc-doc/pull/29">I needed&lt;/a> one that could be used in a
project build to generate a simple diagram for documentation.&lt;/p>
&lt;p>A tool in Python would be ideal, as that is the language the project I was working on was written in. After
searching in DuckDuckGo and PYPI, I found &lt;a href="https://pypi.org/project/ERAlchemy/">ERAlchemy&lt;/a> that
seemed to have the features I needed - kinda.&lt;/p></description></item><item><title>A look at the first implementation of GraphQL in Cylc</title><link>https://kinoshita.eti.br/2019/05/17/a-look-at-the-first-implementation-of-graphql-in-cylc.html</link><pubDate>Fri, 17 May 2019 00:00:00 +0000</pubDate><guid>https://kinoshita.eti.br/2019/05/17/a-look-at-the-first-implementation-of-graphql-in-cylc.html</guid><description>&lt;figure class="feature">

 &lt;img
 src='https://kinoshita.eti.br/assets/posts/2019-05-17-a-look-at-the-first-implementation-of-graphql-in-cylc/fancy-hands2.png'
 alt=''
 title=''
 style='float: right; width: 40%;'
 width=''
 height=''
 />
 &lt;figcaption>&lt;/figcaption>

&lt;/figure>


&lt;p>For Cylc 8 we are adding an initial implementation of GraphQL, to replace the previous REST API.
Besides the technologies in the API&amp;rsquo;s, another difference is that for the REST API, its main
consumer was a PyGTK GUI.&lt;/p>
&lt;p>The new GraphQL API, on the other hand, will be used mainly by a Vue.js Web application. So a
few things need to be done in a different way due to the jump from Desktop GUI to Web GUI.&lt;/p></description></item><item><title>Running fuzzers to find bugs</title><link>https://kinoshita.eti.br/2019/04/07/running-fuzzers-to-find-bugs.html</link><pubDate>Sun, 07 Apr 2019 00:00:00 +0000</pubDate><guid>https://kinoshita.eti.br/2019/04/07/running-fuzzers-to-find-bugs.html</guid><description>&lt;p>Fuzzifying is a technique used in automated tests to find bugs in programs with unexpected data. fuzzer is the name given to the program used for running these tests. Some fuzzers also generate random data used for the tests.&lt;/p>



&lt;figure class="feature">

 &lt;img
 src='https://kinoshita.eti.br/assets/posts/2019-04-07-running-fuzzers-to-find-bugs/stink-bug-smaller.png'
 alt=''
 title=''
 style=''
 width=''
 height=''
 />
 &lt;figcaption>&lt;/figcaption>

&lt;/figure></description></item><item><title>PyZMQ Basics - Part 1</title><link>https://kinoshita.eti.br/2019/03/30/pyzmq-basics-part-1.html</link><pubDate>Sat, 30 Mar 2019 00:00:00 +0000</pubDate><guid>https://kinoshita.eti.br/2019/03/30/pyzmq-basics-part-1.html</guid><description>&lt;a href="https://www.deviantart.com/kinow/art/Old-man-1-657521623" style="float: left;">



&lt;figure class="feature">

 &lt;img
 src='https://kinoshita.eti.br/assets/posts/2019-03-30-pyzmq-basics-part-1/old-man-1.png'
 alt=''
 title=''
 style=''
 width=''
 height=''
 />
 &lt;figcaption>&lt;/figcaption>

&lt;/figure>


&lt;p>I am working &lt;a href="https://cylc.github.io">on a project&lt;/a> that is adopting &lt;a href="http://zeromq.org/">ZeroMQ&lt;/a>.
This post series is for self understanding of PyZMQ, a ZeroMQ
&lt;a href="https://github.com/zeromq/libzmq">&lt;code>libzmq&lt;/code>&lt;/a> binding for Python.&lt;/p>
&lt;h2 id="what-is-zeromq">What is ZeroMQ?&lt;/h2>
&lt;p>ZeroMQ (or 0MQ, or ØMQ) is an Open Source library that provides building blocks for
communication in distributed applications. The communication can be between the threads
of a process, between process (inter-process), or via network protocols such as
TCP and UDP.&lt;/p>
&lt;p>It is optimized for performance, and has been used in many applications, giving users
a solid foundation to be used in their projects.&lt;/p></description></item><item><title>How the Skosmos Widget Wiki plugin works</title><link>https://kinoshita.eti.br/2018/12/24/how-the-skosmos-widget-wiki-plugin-works.html</link><pubDate>Mon, 24 Dec 2018 00:00:00 +0000</pubDate><guid>https://kinoshita.eti.br/2018/12/24/how-the-skosmos-widget-wiki-plugin-works.html</guid><description>&lt;p>Skosmos can be extended through plugins, or widgets (a widget is a plugin for Skosmos).
You can read more about how &lt;a href="https://github.com/NatLibFi/Skosmos/wiki/Plugins">plugins work in Skosmos here&lt;/a>.&lt;/p>
&lt;p>This post is a note-to-self, explaining how the &lt;strong>Skosmos Widget Wiki plugin&lt;/strong> works. This
is a plugin - or widget - that displays Wikipedia information when the concept supports it.&lt;/p>
&lt;p>Here&amp;rsquo;s an image of the plugin in action. Or you can go to
&lt;a href="http://finto.fi/yso-paikat/en/page/p107650">a live instance of Skosmos&lt;/a>
that has the plugin enabled.&lt;/p>



&lt;figure class="feature">

 &lt;img
 src='https://kinoshita.eti.br/assets/posts/2018-12-24-how-the-skosmos-widget-wiki-plugin-works/skosmos-widget-wiki-screenshot.png'
 alt=''
 title=''
 style=''
 width=''
 height=''
 />
 &lt;figcaption>&lt;/figcaption>

&lt;/figure></description></item><item><title>Running Cylc tasks on PBS Torque with Docker</title><link>https://kinoshita.eti.br/2018/12/22/running-cylc-tasks-on-pbs-torque-with-docker.html</link><pubDate>Sat, 22 Dec 2018 00:00:00 +0000</pubDate><guid>https://kinoshita.eti.br/2018/12/22/running-cylc-tasks-on-pbs-torque-with-docker.html</guid><description>&lt;p>A few days ago I saw &lt;a href="https://groups.google.com/forum/#!topic/cylc/dP2I1Gxqi20">a post&lt;/a> at the
Cylc Google Group, about file permissions for files generated by Cylc. The post was related to
content created by Cylc, but in an environment with PBS.&lt;/p>
&lt;p>For context, Cylc is an Open Source meta-scheduler, written in Python, that allows you to
define cycle points with dependencies. These cycle points can be simple incremental integer
numbers, or ISO8601 periods or points (e.g. run every 5 minutes, from 10 days ago until the
next year). Cylc takes care to create an execution schedule for you, and delegate that to a
system that runs your workflow. I work full time on this amazing Open Source tool!&lt;/p>
&lt;p>Such system could be the local computer in background, batch systems such as &lt;code>at&lt;/code>, or PBS.
PBS was created for NASA, to manage executing jobs taking into consideration cluster resources,
and also using queues, priorities, and other features useful for HPC programming. Later PBS
was acquired by Altair, an Open Source version OpenPBS was created, and later abandoned. And
there is another fork called PBS Torque. I first encountered PBS at the São Paulo
University, in Brazil, where they had a &lt;a href="http://www.usp.br/hpc/puma.php">PBS Torque cluster&lt;/a>.&lt;/p>
&lt;h3 id="running-pbs-torque-with-docker">Running PBS Torque with Docker&lt;/h3>
&lt;p>Even though I have access to an environment with Cylc and with PBS, I decided to give it a try
and see how hard it would be to reproduce it with Docker. One thing that I like about this
approach is the possibility to share the work with others online. I believe it improves
communication, agility, and can be useful for posterity.&lt;/p></description></item></channel></rss>