<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Shell Script on kinow</title><link>https://kinoshita.eti.br/tags/shell-script.html</link><description>Recent content in Shell Script on kinow</description><generator>Hugo</generator><language>en-us</language><copyright>Bruno P. Kinoshita All rights reserved</copyright><lastBuildDate>Thu, 28 Aug 2025 06:54:15 +0200</lastBuildDate><atom:link href="https://kinoshita.eti.br/tags/shell-script/feed.xml" rel="self" type="application/rss+xml"/><item><title>Quickly Verifying jar Signatures For ASF Releases</title><link>https://kinoshita.eti.br/2017/10/14/quickly-verifying-jar-signatures-for-asf-releases.html</link><pubDate>Sat, 14 Oct 2017 00:00:00 +0000</pubDate><guid>https://kinoshita.eti.br/2017/10/14/quickly-verifying-jar-signatures-for-asf-releases.html</guid><description>&lt;p>The release process within the Apache Software Foundation includes a series of steps. Amongst these
steps is the &lt;a href="https://www.apache.org/foundation/voting.html">voting process&lt;/a>. In Apache Commons, the
&lt;a href="https://commons.apache.org/releases/prepare.html">release instructions&lt;/a> includes a note on artefact
signatures.&lt;/p>
&lt;blockquote>
&lt;p>During the course of the VOTE, make sure that one or more of the reviewers have verified the signatures and hash files included with the release artifacts. If no one specifically mentions having done that during the VOTE, ask on the dev list and make sure someone does this before you proceed with the release.&lt;/p></description></item><item><title>Removing Javadoc SVN Id Tags with Shell Script</title><link>https://kinoshita.eti.br/2017/09/13/removing-javadoc-svn-id-tags-with-shell-script.html</link><pubDate>Wed, 13 Sep 2017 00:00:00 +0000</pubDate><guid>https://kinoshita.eti.br/2017/09/13/removing-javadoc-svn-id-tags-with-shell-script.html</guid><description>&lt;p>Subversion supports &lt;a href="http://svnbook.red-bean.com/en/1.4/svn.advanced.props.special.keywords.html">Keyword Substitution&lt;/a>, which performs substitution of some keywords such as &lt;em>Author&lt;/em>, &lt;em>Date&lt;/em>, and &lt;strong>&lt;em>Id&lt;/em>&lt;/strong>. The &lt;strong>&lt;em>Id&lt;/em>&lt;/strong> is the date, time, and user that last modified the file.&lt;/p>
&lt;p>It used to be common to all Apache Commons components to have a line as follows in the header of each Java class.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500">/**
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500"> * SomeClass class.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500"> *
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500"> * @version $Id$
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500"> */&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a90d91">public&lt;/span> &lt;span style="color:#a90d91">class&lt;/span> &lt;span style="color:#3f6e75">SomeClass&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Then the generated Javadoc would contain the date of when the class was altered. Although useful, with proper versioning, it becomes obsolete. It is much more important to know what is the version of the software, not the last time it was modified or by whom. In case you have a problem with that specific file, you can always check the history of the file using &lt;code>git log&lt;/code>, or &lt;code>git bisect&lt;/code>, or â€¦&lt;/p></description></item><item><title>Changing Spring Boot environment variables in the command line</title><link>https://kinoshita.eti.br/2016/11/21/changing-spring-boot-environment-variables-in-the-command-line.html</link><pubDate>Mon, 21 Nov 2016 00:00:00 +0000</pubDate><guid>https://kinoshita.eti.br/2016/11/21/changing-spring-boot-environment-variables-in-the-command-line.html</guid><description>&lt;p>This week while helping developers and testers to experiment with a backend application,
some of them found useful to learn a simple trick to change Spring Boot properties
when you can run the application locally (our testers build, compile, change the code, how cool
is that?).&lt;/p>
&lt;p>Here&amp;rsquo;s how it works. Say you have the following settings in your application&amp;rsquo;s
&lt;strong>application.properties&lt;/strong>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>my.application.database.username&lt;span style="color:#000">=&lt;/span>sa
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>my.application.database.password&lt;span style="color:#000">=&lt;/span>notasimplepassword
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>And that you want to change these parameters in order to, for instance, create an application
error, so that you can code and test what happens to the frontend application in that situation.&lt;/p></description></item><item><title>Add a header to a file with Shell script (sed)</title><link>https://kinoshita.eti.br/2016/11/12/add-a-header-to-a-file-with-shell-script-sed.html</link><pubDate>Sat, 12 Nov 2016 00:00:00 +0000</pubDate><guid>https://kinoshita.eti.br/2016/11/12/add-a-header-to-a-file-with-shell-script-sed.html</guid><description>&lt;p>Today I was re-generating the documentation for a REST API written in PHP, with
Laravel. To generate the documentation, one would have to call a Laravel command first.
That command would create a Markdown page. And since in this project I am using Jekyll
for the project site, the final step was adding a header to the file, so that Jekyll
can recognize that content as a blog post.&lt;/p>
&lt;p>Laravel allows you to add custom commands to your project, so I decided to write a command
that would call the other command that generates the documentation, and add an extra step
of adding the header to the Markdown file.&lt;/p></description></item><item><title>Checking the operating system type in shell script</title><link>https://kinoshita.eti.br/2016/11/05/checking-the-operating-system-type-in-shell-script.html</link><pubDate>Sat, 05 Nov 2016 00:00:00 +0000</pubDate><guid>https://kinoshita.eti.br/2016/11/05/checking-the-operating-system-type-in-shell-script.html</guid><description>&lt;p>Last week I learned about a tool called &lt;a href="https://github.com/koalaman/shellcheck">ShellCheck&lt;/a>, a tool
for static analysis of shell scripts. It reports errors like missing double quotes, use of deprecated
syntax, etc.&lt;/p>
&lt;p>I decided to check some projects I contribute to, and the first issue I found was in
&lt;a href="https://jena.apache.org">Apache Jena&lt;/a>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>kinow@localhost:~/Development/java/jena/jena/apache-jena/bin$ shellcheck arq
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>In arq line 8:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a90d91">case&lt;/span> &lt;span style="color:#c41a16">&amp;#34;&lt;/span>&lt;span style="color:#000">$OSTYPE&lt;/span>&lt;span style="color:#c41a16">&amp;#34;&lt;/span> in
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ^-- SC2039: In POSIX sh, OSTYPE is not supported.
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>So, in summary, the &lt;code>OSTYPE&lt;/code> variable should not be available in POSIX shell. The case in question, where
&lt;code>OSTYPE&lt;/code> is being used, checks for the Darwin OS type (i.e. Mac OS). Knowing how things get weird when you
use different operating systems, I decided to check and learn how &lt;code>OSTYPE&lt;/code> works. Here&amp;rsquo;s what I found.&lt;/p></description></item></channel></rss>