<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Test Anything Protocol on kinow</title><link>https://kinoshita.eti.br/tags/test-anything-protocol.html</link><description>Recent content in Test Anything Protocol on kinow</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><copyright>Bruno P. Kinoshita All rights reserved</copyright><lastBuildDate>Wed, 08 Jan 2025 18:13:17 +0100</lastBuildDate><atom:link href="https://kinoshita.eti.br/tags/test-anything-protocol/feed.xml" rel="self" type="application/rss+xml"/><item><title>Adding coverage reports in Jenkins with GoogleTest and gcovr</title><link>https://kinoshita.eti.br/2012/10/16/adding-coverage-reports-in-jenkins-with-googletest-and-gcovr.html</link><pubDate>Tue, 16 Oct 2012 00:00:00 +0000</pubDate><guid>https://kinoshita.eti.br/2012/10/16/adding-coverage-reports-in-jenkins-with-googletest-and-gcovr.html</guid><description>&lt;p>After the [last post]({% post_url 2012-10-11-jenkins-testlink-and-gtest-in-5-minutes-or-so %}) about
&lt;a href="http://code.google.com/p/googletest/">GoogleTest&lt;/a> and &lt;a href="http://www.teamst.org">TestLink&lt;/a> using
&lt;a href="https://wiki.jenkins-ci.org/display/JENKINS/TestLink+Plugin">Jenkins TestLink Plug-in&lt;/a>, I received an e-mail
asking about &lt;a href="http://en.wikipedia.org/wiki/Code_coverage">coverage&lt;/a> with GoogleTest and
&lt;a href="http://www.jenkins-ci.org">Jenkins&lt;/a>. I&amp;rsquo;ve just updated the
&lt;a href="https://github.com/kinow/gtest-tap-listener/blob/master/samples/Makefile">Makefile&lt;/a> in the samples
directory, of the &lt;a href="https://github.com/kinow/gtest-tap-listener">GoogleTest TAP listener project&lt;/a>,
to output coverage data.&lt;/p>
&lt;p>Basically, you have to add the compiler flags &lt;code>-fprofile-arcs -ftest-coverage&lt;/code> and link the executable with
&lt;code>-lgcov&lt;/code>. Take a look at the project&amp;rsquo;s Makefile and you&amp;rsquo;ll notice how simple it is. In order to have Jenkins
interpreting your coverage report, you&amp;rsquo;ll have to convert it to &lt;a href="http://cobertura.sourceforge.net">cobertura&lt;/a>
XML. There is a Python utility that can be used for this: &lt;a href="https://software.sandia.gov/trac/fast/wiki/gcovr">gcovr&lt;/a>.
Download it and copy it to somewhere where Jenkins can execute it (e.g.: &lt;code>/usr/local/bin&lt;/code>).&lt;/p>
&lt;p>Now, if you&amp;rsquo;ve followed the instructions from the previous post, you should have a job that reports your GoogleTest
tests from Jenkins to TestLink using the plug-in, and is downloading the source code from GitHub. Add an extra build
step (Shell) to execute &lt;code>gcovr&lt;/code>.&lt;/p></description></item><item><title>Testing shell code and producing TAP using Jenkins?</title><link>https://kinoshita.eti.br/2011/12/30/testing-shell-code-and-producing-tap-using-jenkins.html</link><pubDate>Fri, 30 Dec 2011 00:00:00 +0000</pubDate><guid>https://kinoshita.eti.br/2011/12/30/testing-shell-code-and-producing-tap-using-jenkins.html</guid><description>&lt;p>Definitely reading &lt;a title="Hacker News" href="http://news.ycombinator.com/">Hacker News&lt;/a> before going to bed is a bad idea :-) Same goes for &lt;a title="Reddit" href="http://www.reddit.com">Reddit&lt;/a>. So, I found a link about &lt;a title="Bats" href="https://github.com/sstephenson/bats">Bats&lt;/a>, a tool to execute tests in Shell and output &lt;a title="Test Anything Protocol" href="http://testanything.org">TAP&lt;/a> - Test Anything Protocol. Then I thought; why not ask the author to include Bats under the list of &lt;a title="TAP Producers" href="http://testanything.org/wiki/index.php/TAP_Producers#SH_.2F_Shell_Script">Producers&lt;/a> in &lt;a title="Test Anything Protocol" href="http://testanything.org">testanything.org&lt;/a>?&lt;/p>
&lt;p>But you know what? Why not execute execute locally first to check if that&amp;rsquo;s working&amp;hellip; moreover, why not use &lt;a title="Jenkins TAP Plug-in" href="https://wiki.jenkins-ci.org/display/JENKINS/TAP+Plugin">Jenkins TAP Plug-in&lt;/a> and see what happens?&lt;/p></description></item><item><title>A comparison of TAP (Test Anything Protocol) and SubUnit</title><link>https://kinoshita.eti.br/2011/06/04/a-comparison-of-tap-test-anything-protocol-and-subunit.html</link><pubDate>Sat, 04 Jun 2011 00:00:00 +0000</pubDate><guid>https://kinoshita.eti.br/2011/06/04/a-comparison-of-tap-test-anything-protocol-and-subunit.html</guid><description>&lt;p>
 I have been playing with &lt;a href="http://www.testanything.org">TAP&lt;/a> for some time and even implemented a &lt;a
 href="http://www.tap4j.org">Java API&lt;/a> to let &lt;a href="http://www.testng.org">TestNG&lt;/a>, &lt;a
 href="http://www.junit.org">JUnit&lt;/a> and other Test Frameworks to produce and consume TAP. TAP is a standard
 format for test output that first appeared with Perl 1 in 1987. It is human and machine readable, easy to be
 serialized, language independent and extensible&lt;sup>&lt;a href="#1">1&lt;/a>&lt;/sup> through the use of &lt;a
 href="http://www.yaml.org">YAML&lt;/a>.
&lt;/p>
&lt;p>
 Some days ago while I was designing a plug-in to show TAP test results in &lt;a href="http://www.jenkins-ci.org">Jenkins&lt;/a>
 I stumbled across a message in &lt;a href="http://jenkins.361315.n4.nabble.com/Jenkins-dev-f387835.html">Jenkins
 dev-list&lt;/a> where Max Magee and Nick Wiesmueller were discussing about a way of showing more details about the test
 executions. I thought that the TAP Plug-in would fit perfectly, until one of the users, &lt;a
 href="https://launchpad.net/~lifeless">Robert Collins&lt;/a>, mentioned &lt;a href="https://launchpad.net/subunit">SubUnit&lt;/a>.
&lt;/p>
&lt;p>
 Shame on me, but I hadn't heard of SubUnit until that message. Max Magee and I exchanged some messages after that,
 talking about a initial design and analysis for the TAP Plug-in&lt;sup>&lt;a href="#2">2&lt;/a>&lt;/sup>. Here is the initial
 idea:
&lt;p>
&lt;ul>
 &lt;li>The plug-in will be able to parse one or more test formats (maybe SubUnit, TAP and the formats available in
 xUnit?).&lt;/li>
 &lt;li>The test results will be displayed the same way JUnit tests are displayed in Jenkins (I think Jenkins
 supports JUnit format by default, but you can use objects and create test results data, independently of the
 test framework that you are using).&lt;/li>
 &lt;li>There will be a table containing the Test Name, Description and Status and an expandable section.&lt;/li>
 &lt;li>Inside this expandable section will be available all the details about the test.&lt;/li>
 &lt;li>In case there are images within the test details, they should be displayed as a lightbox gallery.&lt;sup>&lt;a
 href="#3">3&lt;/a>&lt;/sup>&lt;/li>
&lt;/ul>
&lt;p>
 Although I have worked with TAP and spent some good time writing the tap4j port for Java, I am not convinced it is
 the best solution for this issue yet. Hence I am posting this initial comparison between TAP and SubUnit hoping that
 more people will contribute with the design of this solution. My goal is not only having a super cool plug-in for
 Jenkins, but ease integration of test results in different tools and collaborate with both TAP and SubUnit. Another
 objective that I have in mind is improving the way that test results are displayed in Jenkins and enabling it to be
 an alternative for tools like &lt;a href="http://sourceforge.net/projects/smolder/">Smolder&lt;/a>, &lt;a
 href="https://launchpad.net/testrepository">TestRepository&lt;/a> or &lt;a href="https://launchpad.net/tribunal">Tribunal&lt;/a>.
 Because I believe the tasks done by these tools could be all done in my favorite CI Server, and it would increase
 the productivity of Build &amp;amp; Release professionals :-))
&lt;/p></description></item><item><title>Fa√ßa seus Testes Falarem TAP (Make your Tests Speak TAP) article published in MundoJ, issue 47, March/April 2011</title><link>https://kinoshita.eti.br/2011/05/23/fa%C3%A7a-seus-testes-falarem-tap-make-your-tests-speak-tap-article-published-in-mundoj-issue-47-march/april-2011.html</link><pubDate>Mon, 23 May 2011 00:00:00 +0000</pubDate><guid>https://kinoshita.eti.br/2011/05/23/fa%C3%A7a-seus-testes-falarem-tap-make-your-tests-speak-tap-article-published-in-mundoj-issue-47-march/april-2011.html</guid><description>This is my first article for a Brazilian magazine! :-D It was published in this month&amp;rsquo;s issue of MundoJ magazine (previously called MundoJava).
In this article Cesar Fernandes de Almeida, Anderson dos Santos and I discuss how to make your Java tests output TAP (Test Anything Protocol) Streams. This test protocol has been used by Perl developers since Perl&amp;rsquo;s first version (1983~) but hasn&amp;rsquo;t been used by many Java developers yet, unfortunately.</description></item><item><title>Discussing the flexibility of TAP to cover information generated by TestNG</title><link>https://kinoshita.eti.br/2011/03/20/discussing-the-flexibility-of-tap-to-cover-information-generated-by-testng.html</link><pubDate>Sun, 20 Mar 2011 00:00:00 +0000</pubDate><guid>https://kinoshita.eti.br/2011/03/20/discussing-the-flexibility-of-tap-to-cover-information-generated-by-testng.html</guid><description>&lt;p>In today's post I am expanding the previous one regarding the use of &lt;a title="TAP (Test Anything Protocol)" href="http://www.testanything.org">TAP&lt;/a> with &lt;a title="TestNG" href="http://www.testng.org">TestNG&lt;/a>. Let's discuss about the flexibility of TAP to cover information generated by TestNG, more specifically:&lt;/p>
&lt;ul>
	&lt;li>Expected Exceptions&lt;/li>
	&lt;li>Data Providers&lt;/li>
	&lt;li>Groups&lt;/li>
	&lt;li>Tests that get skipped&lt;/li>
	&lt;li>Dependencies&lt;/li>
&lt;/ul>
&lt;p>We will be addressing these bullet points using &lt;a title="tap4j" href="http://tap4j.sourceforge.net">tap4j&lt;/a>, a TAP implementation for Java. The integration between TAP and TestNG is done through the use of TestNG Listeners developed in tap4j project (a big thanks here to &lt;a title="Cesar Fernandes de Almeida" href="http://www.cesinha.com">Cesar Fernandes de Almeida&lt;/a> for all his help).&lt;/p>
&lt;p>There are two listeners in tap4j, &lt;a title="br.eti.kinoshita.tap4j.ext.testng.TestTAPReporter" href="https://github.com/kinow/tap4j/blob/master/src/main/java/org/tap4j/ext/testng/TestTAPReporter.java">br.eti.kinoshita.tap4j.ext.testng.TestTAPReporter&lt;/a> and &lt;a title="br.eti.kinoshita.tap4j.ext.testng.SuiteTAPReporter" href="https://github.com/kinow/tap4j/blob/master/src/main/java/br/eti/kinoshita/tap4j/ext/testng/SuiteTAPReporter.java">br.eti.kinoshita.tap4j.ext.testng.SuiteTAPReporter&lt;/a>. The first was created based on &lt;a title="org.testng.reporters.TestHTMLReporter" href="https://github.com/cbeust/testng/blob/master/src/main/java/org/testng/reporters/TestHTMLReporter.java">org.testng.reporters.TestHTMLReporter&lt;/a> and the latter was created based on &lt;a title="org.testng.reporters.SuiteHTMLReporter" href="https://github.com/cbeust/testng/blob/master/src/main/java/org/testng/reporters/SuiteHTMLReporter.java">org.testng.reporters.SuiteHTMLReporter&lt;/a>.&lt;/p>



&lt;figure class="feature">

 &lt;img
 src='https://kinoshita.eti.br/assets/posts/2011-03-20-discussing-the-flexibility-of-tap-to-cover-information-generated-by-testng/unnamed0.jpg'
 alt=''
 title=''
 style=''
 width=''
 height=''
 />
 &lt;figcaption>&lt;/figcaption>

&lt;/figure>


&lt;p style="text-align: center;">&lt;em>&lt;span style="color: #999999; font-size: 0.8em;">In this figure you have testing tools as TAP producers (left) and different types of applications as consumers (right)&lt;/span>&lt;/em>&lt;/p></description></item><item><title>Getting the maximum from TestNG with TAP</title><link>https://kinoshita.eti.br/2011/03/10/getting-the-maximum-from-testng-with-tap.html</link><pubDate>Thu, 10 Mar 2011 00:00:00 +0000</pubDate><guid>https://kinoshita.eti.br/2011/03/10/getting-the-maximum-from-testng-with-tap.html</guid><description>&lt;p>Strangely enough, today I decided start to write about &lt;a href="http://www.testanything.org">TAP&lt;/a> (Test Anything Protocol) and received a mail from a &lt;a href="http://www.linkedin.com">Linkedin&lt;/a> Group with a white paper about data integration in information systems. Well, let me first explain what is TAP, or Test Anything Protocol. This protocol was created in the beginning of Perl to log test results and is still being used by Perl and other languages (&lt;a href="https://github.com/sebastianbergmann/phpunit/">PHPUnit&lt;/a> can output TAP too, for instance).&lt;/p>
&lt;p>Now, if you already know about TAP and YAML, or if you are like me and like trying things out before reading a long text, then go to the &lt;a href="#hammertime">hands on part&lt;/a> of this post.&lt;/p>
&lt;p>An output in TAP, or a TAP stream, is written in pure text in a human readable way. Like follows:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>TAP version &lt;span style="color:#1c01ce">13&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>1..2
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>ok &lt;span style="color:#1c01ce">1&lt;/span> Test &lt;span style="color:#1c01ce">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>not ok &lt;span style="color:#1c01ce">2&lt;/span> Missing &lt;span style="color:#a90d91">test&lt;/span> parameter: url
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>tap4j - A new TAP implementation in Java</title><link>https://kinoshita.eti.br/2010/10/12/tap4j-a-new-tap-implementation-in-java.html</link><pubDate>Tue, 12 Oct 2010 00:00:00 +0000</pubDate><guid>https://kinoshita.eti.br/2010/10/12/tap4j-a-new-tap-implementation-in-java.html</guid><description>A month ago I started a project to help me in my new version of the TestLink Hudson plug-in. The plugin now relies heavily on Apache Maven for test execution. After reading a post on TestLink forum about an automation done using TAP, I googled to learn what that acronym stood for.
TAP is the abbreviation of Test Anything Protocol.It is a protocol to produce information about test execution and used mainly by the Perl community.</description></item></channel></rss>