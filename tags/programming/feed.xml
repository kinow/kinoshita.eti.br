<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>programming on kinow</title><link>https://kinoshita.eti.br/tags/programming.html</link><description>Recent content in programming on kinow</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><copyright>Bruno P. Kinoshita All rights reserved</copyright><lastBuildDate>Mon, 29 May 2023 20:36:52 +0300</lastBuildDate><atom:link href="https://kinoshita.eti.br/tags/programming/feed.xml" rel="self" type="application/rss+xml"/><item><title>Coverage report for a GitHub private repository with GitHub Actions</title><link>https://kinoshita.eti.br/2023/05/29/coverage-report-for-a-github-private-repository-with-github-actions.html</link><pubDate>Mon, 29 May 2023 20:36:52 +0300</pubDate><guid>https://kinoshita.eti.br/2023/05/29/coverage-report-for-a-github-private-repository-with-github-actions.html</guid><description>Normally when you add test coverage to a GitHub repository, the reporting part boils down to a simple call to some API that will post to a third-party external service like Coveralls or Codecov. Many are already on the GitHub Actions Market Place and a few lines of YAML are enough.
A Codecov coverage report We had to report the test coverage of a private GitHub repository of a project I am working on at the moment, that could not have integration with other services besides GitHub.</description></item><item><title>Running fuzzers to find bugs</title><link>https://kinoshita.eti.br/2019/04/07/running-fuzzers-to-find-bugs.html</link><pubDate>Sun, 07 Apr 2019 00:00:00 +0000</pubDate><guid>https://kinoshita.eti.br/2019/04/07/running-fuzzers-to-find-bugs.html</guid><description>&lt;p>Fuzzifying is a technique used in automated tests to find bugs in programs with unexpected data. fuzzer is the name given to the program used for running these tests. Some fuzzers also generate random data used for the tests.&lt;/p>
&lt;figure class="feature">
&lt;img
src='https://kinoshita.eti.br/assets/posts/2019-04-07-running-fuzzers-to-find-bugs/stink-bug-smaller.png'
alt=''
title=''
style=''
width=''
height=''
/>
&lt;figcaption>&lt;/figcaption>
&lt;/figure></description></item><item><title>PyZMQ Basics - Part 1</title><link>https://kinoshita.eti.br/2019/03/30/pyzmq-basics-part-1.html</link><pubDate>Sat, 30 Mar 2019 00:00:00 +0000</pubDate><guid>https://kinoshita.eti.br/2019/03/30/pyzmq-basics-part-1.html</guid><description>&lt;a href="https://www.deviantart.com/kinow/art/Old-man-1-657521623" style="float: left;">
&lt;figure class="feature">
&lt;img
src='https://kinoshita.eti.br/assets/posts/2019-03-30-pyzmq-basics-part-1/old-man-1.png'
alt=''
title=''
style=''
width=''
height=''
/>
&lt;figcaption>&lt;/figcaption>
&lt;/figure>
&lt;p>I am working &lt;a href="https://cylc.github.io">on a project&lt;/a> that is adopting &lt;a href="http://zeromq.org/">ZeroMQ&lt;/a>.
This post series is for self understanding of PyZMQ, a ZeroMQ
&lt;a href="https://github.com/zeromq/libzmq">&lt;code>libzmq&lt;/code>&lt;/a> binding for Python.&lt;/p>
&lt;h2 id="what-is-zeromq">What is ZeroMQ?&lt;/h2>
&lt;p>ZeroMQ (or 0MQ, or ØMQ) is an Open Source library that provides building blocks for
communication in distributed applications. The communication can be between the threads
of a process, between process (inter-process), or via network protocols such as
TCP and UDP.&lt;/p>
&lt;p>It is optimized for performance, and has been used in many applications, giving users
a solid foundation to be used in their projects.&lt;/p></description></item><item><title>What happens when you upload a Turtle file in Apache Jena Fuseki</title><link>https://kinoshita.eti.br/2018/05/27/what-happens-when-you-upload-a-turtle-file-in-apache-jena-fuseki.html</link><pubDate>Sun, 27 May 2018 00:00:00 +0000</pubDate><guid>https://kinoshita.eti.br/2018/05/27/what-happens-when-you-upload-a-turtle-file-in-apache-jena-fuseki.html</guid><description>I am working on an issue for Skosmos that involves preparing some Turtle files and uploading them using Apache Jena Fuseki&amp;rsquo;s web interface.
The issue is now pending feedback, which gives me a moment to have fun with something else. So I decided to dig down the rabbit hole and start learning more about certain parts of the Apache Jena code base.
This post will be useful to myself in the future, as a note-taking in a series, so that I remember how things work - you never know right?</description></item><item><title>Exif Odd Offsets</title><link>https://kinoshita.eti.br/2017/12/25/exif-odd-offsets.html</link><pubDate>Mon, 25 Dec 2017 00:00:00 +0000</pubDate><guid>https://kinoshita.eti.br/2017/12/25/exif-odd-offsets.html</guid><description>A file format like JPEG may contain metadata in JFIF, Exif, or a vendor proprietary format. The Exif format is based - or uses parts of - on the TIFF format.
Within an Exif metadata block, you should see directories, with several entries. The entries have fields like description, value, and also an offset. The offset indicates the offset to the next entry.
The Exif specification defines that implementers must make sure to keep the offset an even number, within 4 bytes.</description></item><item><title>Remember to synchronize when iterating streams from a synchronized Collection</title><link>https://kinoshita.eti.br/2017/12/03/remember-to-synchronize-when-iterating-streams-from-a-synchronized-collection.html</link><pubDate>Sun, 03 Dec 2017 00:00:00 +0000</pubDate><guid>https://kinoshita.eti.br/2017/12/03/remember-to-synchronize-when-iterating-streams-from-a-synchronized-collection.html</guid><description>When iterating collections created via Collections.synchronizedList for instance, you are required to obtain a lock on the actual list before doing so. So you normally end up with code similar to:
List list = Collections.synchronizedList(new ArrayList()); synchronized (list) { Iterator i = list.iterator(); // Must be in synchronized block while (i.hasNext()) foo(i.next()); } This requirement is documented in the javadocs.
Since lambdas and streams are being more widely used, it is important to remind that when iterating via a stream we also need to obtain a lock on the synchronized collection created.</description></item><item><title>Watch out for Locales when using NumberFormat with currencies</title><link>https://kinoshita.eti.br/2017/12/02/watch-out-for-locales-when-using-numberformat-with-currencies.html</link><pubDate>Sat, 02 Dec 2017 00:00:00 +0000</pubDate><guid>https://kinoshita.eti.br/2017/12/02/watch-out-for-locales-when-using-numberformat-with-currencies.html</guid><description>In Java you have the NumberFormatException to help you formatting and parsing numbers for any locale. Said that, here&amp;rsquo;s some code.
BigDecimal negative = new BigDecimal(&amp;#34;-1234.56&amp;#34;); DecimalFormat nf = (DecimalFormat) NumberFormat.getCurrencyInstance(Locale.UK); String formattedNegative = nf.format(negative); System.out.println(formattedNegative); The output for this code is -£1,234.56. That&amp;rsquo;s expected, as the locale is set to UK, so the currency symbol used is for British Pounds. And as the number is negative, you get that minus sign as a prefix.</description></item><item><title>What Are Identification Keys</title><link>https://kinoshita.eti.br/2017/12/01/what-are-identification-keys.html</link><pubDate>Fri, 01 Dec 2017 00:00:00 +0000</pubDate><guid>https://kinoshita.eti.br/2017/12/01/what-are-identification-keys.html</guid><description>In biology, an identification key is a printed or computer-aided device that aids the identification of biological entities, such as plants, animals, fossils, microorganisms, and pollen grains. Identification keys are also used in many other scientific and technical fields to identify various kinds of entities, such as diseases, soil types, minerals, or archaeological and anthropological artifacts
When you work writing software, it is common that at one point or another of the product development you will work with a SME, or subject-matter expert.</description></item><item><title>Using formatter exclusions with Eclipse</title><link>https://kinoshita.eti.br/2017/11/06/using-formatter-exclusions-with-eclipse.html</link><pubDate>Mon, 06 Nov 2017 00:00:00 +0000</pubDate><guid>https://kinoshita.eti.br/2017/11/06/using-formatter-exclusions-with-eclipse.html</guid><description>Sometimes when you are formatting your code in Eclipse, you may want to prevent some parts of the code from being formatted. Especially when using Java 8 lambdas and optionals.
Here&amp;rsquo;s some code before being formatted by Eclipse&amp;rsquo;s default formatter rules.
Code adapted from: blog post Java d&amp;rsquo;eau ‐ Java 8: Streams in Hibernate and Beyond
session.createQuery(&amp;#34;SELECT h FROM Hare h&amp;#34;, Hare.class) .stream() .filter(h -&amp;gt; h.getId() == 1) .map(Hare::getName) .forEach(System.out::println); Then after formatting.</description></item><item><title>Quickly Verifying jar Signatures For ASF Releases</title><link>https://kinoshita.eti.br/2017/10/14/quickly-verifying-jar-signatures-for-asf-releases.html</link><pubDate>Sat, 14 Oct 2017 00:00:00 +0000</pubDate><guid>https://kinoshita.eti.br/2017/10/14/quickly-verifying-jar-signatures-for-asf-releases.html</guid><description>The release process within the Apache Software Foundation includes a series of steps. Amongst these steps is the voting process. In Apache Commons, the release instructions includes a note on artefact signatures.
During the course of the VOTE, make sure that one or more of the reviewers have verified the signatures and hash files included with the release artifacts. If no one specifically mentions having done that during the VOTE, ask on the dev list and make sure someone does this before you proceed with the release.</description></item><item><title>Removing Javadoc SVN Id Tags with Shell Script</title><link>https://kinoshita.eti.br/2017/09/13/removing-javadoc-svn-id-tags-with-shell-script.html</link><pubDate>Wed, 13 Sep 2017 00:00:00 +0000</pubDate><guid>https://kinoshita.eti.br/2017/09/13/removing-javadoc-svn-id-tags-with-shell-script.html</guid><description>Subversion supports Keyword Substitution, which performs substitution of some keywords such as Author, Date, and Id. The Id is the date, time, and user that last modified the file.
It used to be common to all Apache Commons components to have a line as follows in the header of each Java class.
/** * SomeClass class. * * @version $Id$ */ public class SomeClass { } Then the generated Javadoc would contain the date of when the class was altered.</description></item><item><title>Enabling Markdown Extension Tables For Piecrust</title><link>https://kinoshita.eti.br/2017/09/09/enabling-markdown-extension-tables-for-piecrust.html</link><pubDate>Sat, 09 Sep 2017 00:00:00 +0000</pubDate><guid>https://kinoshita.eti.br/2017/09/09/enabling-markdown-extension-tables-for-piecrust.html</guid><description>PieCrust is a Python static site generator. It allows users to write content in Markdown. But if you try adding a table, the content by default will be generated as plain text.
You have to enable Markdown extension tables. PieCrust will load it when creating the Markdown instance.
# config.yml markdown: extensions: - tables Et, voilà! Happy blogging!
♥ Open Source</description></item><item><title>Finding Base64 implementations in Apache Software Foundation projects</title><link>https://kinoshita.eti.br/2017/09/01/finding-base64-implementations-in-apache-software-foundation-projects.html</link><pubDate>Fri, 01 Sep 2017 00:00:00 +0000</pubDate><guid>https://kinoshita.eti.br/2017/09/01/finding-base64-implementations-in-apache-software-foundation-projects.html</guid><description>NZ Grey Warbler (riroriro) New Zealand Grey Warbler (riroriro) Some time ago while working in one of the many projects in the Apache Software Foundation (Apache Commons FileUpload if I remember well), I noticed that it had a Base64 implementation. What called my attention was that the project not using the Apache Commons Codec Base64 implementation.
While Apache Commons' mission is to create components that can be re-used across ASF projects, and also by other projects not necessarily under the ASF, it is understandable that some projects prefer to keep its dependencies to a minimum.</description></item><item><title>Two other Maven Plug-ins: impsort and deptools</title><link>https://kinoshita.eti.br/2017/08/12/two-other-maven-plug-ins-impsort-and-deptools.html</link><pubDate>Sat, 12 Aug 2017 00:00:00 +0000</pubDate><guid>https://kinoshita.eti.br/2017/08/12/two-other-maven-plug-ins-impsort-and-deptools.html</guid><description>Last [week I wrote]({% post_url 2017-08-06-checking-for-transitive-dependencies-use-with-maven-enforcer-plugin %}) about the ImmobilienScout24/illegal-transitive-dependency-check rule for Maven Enforcer Plug-in. There are two other Maven Plug-ins that can be useful.
mbknor/deptools The mbknor/deptools is another rule for the Maven Enforcer Plug-in. It will scan your project dependency tree, looking for transitive dependencies. Whenever it finds a transitive dependency, it will keep track of the versions. And if, because of the way your dependencies and transitive dependencies are organised, you end up with a version that is not the newest, the build will fail.</description></item><item><title>Checking for transitive dependencies use with Maven Enforcer Plug-in</title><link>https://kinoshita.eti.br/2017/08/06/checking-for-transitive-dependencies-use-with-maven-enforcer-plug-in.html</link><pubDate>Sun, 06 Aug 2017 00:00:00 +0000</pubDate><guid>https://kinoshita.eti.br/2017/08/06/checking-for-transitive-dependencies-use-with-maven-enforcer-plug-in.html</guid><description>Maven Enforcer Plug-in “provides goals to control certain environmental constraints such as Maven version, JDK version and OS family along with many more built-in rules and user created rules”. There are several libraries that provide custom rules, or you can write your own.
One of these libraries is ImmobilienScout24/illegal-transitive-dependency-check, “an additional rule for the maven-enforcer-plugin that checks for classes referenced via transitive Maven dependencies”.
With the following example:
&amp;lt;project&amp;gt; ... &amp;lt;build&amp;gt; &amp;lt;plugins&amp;gt; &amp;lt;plugin&amp;gt; &amp;lt;groupId&amp;gt;org.</description></item><item><title>How to remove the signature from e-mails with NLP?</title><link>https://kinoshita.eti.br/2017/06/14/how-to-remove-the-signature-from-e-mails-with-nlp.html</link><pubDate>Wed, 14 Jun 2017 00:00:00 +0000</pubDate><guid>https://kinoshita.eti.br/2017/06/14/how-to-remove-the-signature-from-e-mails-with-nlp.html</guid><description>Some time ago I stumbled across EmailParser, a Python utility to remove e-mail signatures. Here&amp;rsquo;s a sample input e-mail from the project documentation.
Wendy – thanks for the intro! Moving you to bcc. Hi Vincent – nice to meet you over email. Apologize for the late reply, I was on PTO for a couple weeks and this is my first week back in office. As Wendy mentioned, I am leading an AR/VR taskforce at Foobar Retail Solutions.</description></item><item><title>Backward compatibility and switch statement with constant expressions</title><link>https://kinoshita.eti.br/2017/06/10/backward-compatibility-and-switch-statement-with-constant-expressions.html</link><pubDate>Sat, 10 Jun 2017 00:00:00 +0000</pubDate><guid>https://kinoshita.eti.br/2017/06/10/backward-compatibility-and-switch-statement-with-constant-expressions.html</guid><description>Maintaining Open Source software can be challenging. Making sure you keep backward compatibility (not only binary) can be even more challenging. Apache Commons Lang 3.6 release is happening right now thanks to Benedikt Ritter, and it is on its fourth Release Candidate (i.e. RC4).
A previous RC2 was cancelled due to IBM JDK 8 compatibility, more specifically the lazy initialization of ArrayList&amp;rsquo;s seems to be different in Oracle JDK and IBM JDK.</description></item><item><title>Natural Language Processing and Natural Language Understanding</title><link>https://kinoshita.eti.br/2017/06/03/natural-language-processing-and-natural-language-understanding.html</link><pubDate>Sat, 03 Jun 2017 00:00:00 +0000</pubDate><guid>https://kinoshita.eti.br/2017/06/03/natural-language-processing-and-natural-language-understanding.html</guid><description>I used Natural Language Processing (NLP) tools in a few projects in the past years. But only recently, while involved with a chatbot project, I noticed the term Natural Language Understanding (NLU).
NLU can be seen as a subfield of NLP. NLP englobes all techniques used for parsing text and extracting some knowledge about it. It could be finding out what are the common entities in the text, calculating the likelihood of a certain word being a preposition or a verb, sentiment analysis, or even spell checking sentences.</description></item><item><title>Securely using passwords with R</title><link>https://kinoshita.eti.br/2017/06/03/securely-using-passwords-with-r.html</link><pubDate>Sat, 03 Jun 2017 00:00:00 +0000</pubDate><guid>https://kinoshita.eti.br/2017/06/03/securely-using-passwords-with-r.html</guid><description>It is quite common to have code that needs to interact with another system, database, or third party application, and need to use some sort of credentials to securely communicate.
Most of the code I wrote in R, or reviewed, had normally no borders (from a system analysis perspective) with other systems, or basically just interacted with the file system to retrieve NetCDF or JSON files.
However, after I saw a comment in Reddit [1] some time ago about this, I decided to check what others used.</description></item><item><title>Apache Commons Text LookupTranslator</title><link>https://kinoshita.eti.br/2017/06/02/apache-commons-text-lookuptranslator.html</link><pubDate>Fri, 02 Jun 2017 00:00:00 +0000</pubDate><guid>https://kinoshita.eti.br/2017/06/02/apache-commons-text-lookuptranslator.html</guid><description>Apache Commons Text includes several algorithms for text processing. Today&amp;rsquo;s post is about one of the classes available since the 1.0 release, the LookupTranslator.
It is used to translate text using a lookup table. Most users won&amp;rsquo;t necessarily be - knowingly - using this class. Most likely, they will use the StringEscapeUtils, which contains methods to escape and unescape CSV, JSON, XML, Java, and EcmaScript.
String original = &amp;#34;He didn&amp;#39;t say, \&amp;#34;stop!</description></item></channel></rss>