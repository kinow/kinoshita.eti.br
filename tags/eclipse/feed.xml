<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Eclipse on kinow</title><link>https://kinoshita.eti.br/tags/eclipse.html</link><description>Recent content in Eclipse on kinow</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><copyright>Bruno P. Kinoshita All rights reserved</copyright><lastBuildDate>Fri, 14 Feb 2025 12:02:19 +0100</lastBuildDate><atom:link href="https://kinoshita.eti.br/tags/eclipse/feed.xml" rel="self" type="application/rss+xml"/><item><title>Using formatter exclusions with Eclipse</title><link>https://kinoshita.eti.br/2017/11/06/using-formatter-exclusions-with-eclipse.html</link><pubDate>Mon, 06 Nov 2017 00:00:00 +0000</pubDate><guid>https://kinoshita.eti.br/2017/11/06/using-formatter-exclusions-with-eclipse.html</guid><description>Sometimes when you are formatting your code in Eclipse, you may want to prevent some parts of the code from being formatted. Especially when using Java 8 lambdas and optionals.
Here&amp;rsquo;s some code before being formatted by Eclipse&amp;rsquo;s default formatter rules.
Code adapted from: blog post Java d&amp;rsquo;eau ‚Äê Java 8: Streams in Hibernate and Beyond
session.createQuery(&amp;#34;SELECT h FROM Hare h&amp;#34;, Hare.class) .stream() .filter(h -&amp;gt; h.getId() == 1) .map(Hare::getName) .forEach(System.out::println); Then after formatting.</description></item></channel></rss>