<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Python on kinow</title><link>https://kinoshita.eti.br/tags/python.html</link><description>Recent content in Python on kinow</description><generator>Hugo</generator><language>en-us</language><copyright>Bruno P. Kinoshita All rights reserved</copyright><lastBuildDate>Thu, 04 Sep 2025 13:13:21 +0200</lastBuildDate><atom:link href="https://kinoshita.eti.br/tags/python/feed.xml" rel="self" type="application/rss+xml"/><item><title>Running Cylc workflows on BSC MareNostrum5</title><link>https://kinoshita.eti.br/2025/05/25/running-cylc-workflows-on-bsc-marenostrum5.html</link><pubDate>Sun, 25 May 2025 09:38:52 +0300</pubDate><guid>https://kinoshita.eti.br/2025/05/25/running-cylc-workflows-on-bsc-marenostrum5.html</guid><description>&lt;blockquote>
&lt;p>TL;DR: Using the &lt;code>communication method = poll&lt;/code> of Cylc 8 you can easily run
Cylc 8 workflows on BSC MareNostrum5 HPC.&lt;/p>&lt;/blockquote>
&lt;p>A couple of years ago I gave a talk about &lt;a href="https://eflows4hpc.eu/event/hpc-workflows-for-climate-models/">“HPC workflows for climate models”&lt;/a>
at an ESiWACE3 event. There, I tried to explain in an unbiased way the differences among the workflow
managers commonly used for climate and weather, including &lt;a href="https://autosubmit.readthedocs.io/">Autosubmit&lt;/a>,
&lt;a href="https://ecflow.readthedocs.io/">ecFlow&lt;/a>, and &lt;a href="https://cylc.github.io/">Cylc&lt;/a>. I worked with
the three workflow managers, and developed Cylc while at NIWA in New Zealand, and currently I
develop Autosubmit at the Barcelona Supercomputing Center, BSC, in Barcelona Spain.&lt;/p></description></item><item><title>Coverage report for a GitHub private repository with GitHub Actions</title><link>https://kinoshita.eti.br/2023/05/29/coverage-report-for-a-github-private-repository-with-github-actions.html</link><pubDate>Mon, 29 May 2023 20:36:52 +0300</pubDate><guid>https://kinoshita.eti.br/2023/05/29/coverage-report-for-a-github-private-repository-with-github-actions.html</guid><description>&lt;p>Normally when you add test coverage to a GitHub repository, the reporting part
boils down to a simple call to some API that will post to a third-party external
service like Coveralls or Codecov. Many are already on the GitHub Actions
Market Place and a few lines of YAML are enough.&lt;/p>



&lt;figure class="feature">

 &lt;img
 src='https://kinoshita.eti.br/assets/posts/2023-05-29-coverage-report-for-a-github-private-repository-with-github-actions/coverage.png'
 alt=''
 title=''
 style=''
 width=''
 height=''
 />
 &lt;figcaption>A Codecov coverage report&lt;/figcaption>

&lt;/figure>


&lt;p>We had to report the test coverage of a private GitHub repository of a project
I am working on at the moment, that could not have integration with other services
besides GitHub. So no Coveralls and no Codecov.&lt;/p></description></item><item><title>Cyclic Workflows with Cylc and StackStorm</title><link>https://kinoshita.eti.br/2021/10/01/cyclic-workflows-with-cylc-and-stackstorm.html</link><pubDate>Fri, 01 Oct 2021 00:00:00 +0000</pubDate><guid>https://kinoshita.eti.br/2021/10/01/cyclic-workflows-with-cylc-and-stackstorm.html</guid><description>&lt;p>I am aware of only two workflow managers that support cyclic workflows.
&lt;a href="https://cylc.github.io/">Cylc&lt;/a> and &lt;a href="https://stackstorm.com/">StackStorm&lt;/a>. I won&amp;rsquo;t
enter into details about these two tools, but I must note that I worked on Cylc
during my employment with NIWA, in New Zealand.&lt;/p>
&lt;p>In this post I will only show a very simple workflow called &lt;code>five&lt;/code> first using
Cylc, and then the same workflow with StackStorm.&lt;/p>
&lt;h2 id="cylc">Cylc&lt;/h2>
&lt;p>First let&amp;rsquo;s take a look at the source code of this workflow with Cylc 8 and plot it.&lt;/p></description></item><item><title>Jenkins Active Choices with Jupyter Notebooks</title><link>https://kinoshita.eti.br/2020/03/26/jenkins-active-choices-with-jupyter-notebooks.html</link><pubDate>Thu, 26 Mar 2020 00:00:00 +0000</pubDate><guid>https://kinoshita.eti.br/2020/03/26/jenkins-active-choices-with-jupyter-notebooks.html</guid><description>&lt;p>&lt;a href="https://plugins.jenkins.io/uno-choice/">Jenkins Active Choices&lt;/a> provides interactive and reactive parameters for the Jenkins UI.
It is used by DevOps but also by researchers in industry and academia. Some days ago I ran an experiment where I tried
to reproduce similar behaviour of the plug-in with Jupyter Notebooks and &lt;a href="https://ipywidgets.readthedocs.io/en/stable/">ipywidgets&lt;/a>.&lt;/p>
&lt;p>The experiment was a success, and I am convinced one could achieve the same in Jupyter Notebooks. Jenkins could be used as
workflow manager, or the parameters could be submitted to a different workflow manager or another system.&lt;/p></description></item><item><title>Cylc videos</title><link>https://kinoshita.eti.br/2019/09/22/cylc-videos.html</link><pubDate>Sun, 22 Sep 2019 00:00:00 +0000</pubDate><guid>https://kinoshita.eti.br/2019/09/22/cylc-videos.html</guid><description>&lt;p>Last week I put together a playlist with all Cylc videos I could found on Youtube.&lt;/p>
&lt;iframe
 width="560"
 height="315"
 src="https://www.youtube.com/embed/videoseries?list=PLxlfTM52ynRZZ7rtLkoKANWiIFn92d6je"
 frameborder="0"
 allow="autoplay;encrypted-media"
 allowfullscreen>&lt;/iframe>
&lt;p>Clicking on the video above should open the YouTube playlist, with the next videos
on the right. They are sorted from the newest to the oldest (upload date).&lt;/p></description></item><item><title>Generating diagrams from a SQlite database with Python</title><link>https://kinoshita.eti.br/2019/07/28/generating-diagrams-from-a-sqlite-database-with-python.html</link><pubDate>Sun, 28 Jul 2019 00:00:00 +0000</pubDate><guid>https://kinoshita.eti.br/2019/07/28/generating-diagrams-from-a-sqlite-database-with-python.html</guid><description>&lt;figure class="feature">

 &lt;img
 src='https://kinoshita.eti.br/assets/posts/2019-07-28-generating-diagrams-from-a-sqlite-database-with-python/Amiga.png'
 alt='A 1984 Apple Macintosh drawing'
 title='A 1984 Apple Macintosh drawing'
 style='float: left; width: 30%;'
 width=''
 height=''
 />
 &lt;figcaption>A 1984 Apple Macintosh drawing&lt;/figcaption>

&lt;/figure>


&lt;p>There are tools out there that can be used to reverse engineer databases and generate diagrams. These tools
normally are GUI based. But &lt;a href="https://github.com/cylc/cylc-doc/pull/29">I needed&lt;/a> one that could be used in a
project build to generate a simple diagram for documentation.&lt;/p>
&lt;p>A tool in Python would be ideal, as that is the language the project I was working on was written in. After
searching in DuckDuckGo and PYPI, I found &lt;a href="https://pypi.org/project/ERAlchemy/">ERAlchemy&lt;/a> that
seemed to have the features I needed - kinda.&lt;/p></description></item><item><title>A look at the first implementation of GraphQL in Cylc</title><link>https://kinoshita.eti.br/2019/05/17/a-look-at-the-first-implementation-of-graphql-in-cylc.html</link><pubDate>Fri, 17 May 2019 00:00:00 +0000</pubDate><guid>https://kinoshita.eti.br/2019/05/17/a-look-at-the-first-implementation-of-graphql-in-cylc.html</guid><description>&lt;figure class="feature">

 &lt;img
 src='https://kinoshita.eti.br/assets/posts/2019-05-17-a-look-at-the-first-implementation-of-graphql-in-cylc/fancy-hands2.png'
 alt=''
 title=''
 style='float: right; width: 40%;'
 width=''
 height=''
 />
 &lt;figcaption>&lt;/figcaption>

&lt;/figure>


&lt;p>For Cylc 8 we are adding an initial implementation of GraphQL, to replace the previous REST API.
Besides the technologies in the API&amp;rsquo;s, another difference is that for the REST API, its main
consumer was a PyGTK GUI.&lt;/p>
&lt;p>The new GraphQL API, on the other hand, will be used mainly by a Vue.js Web application. So a
few things need to be done in a different way due to the jump from Desktop GUI to Web GUI.&lt;/p></description></item><item><title>PyZMQ Basics - Part 1</title><link>https://kinoshita.eti.br/2019/03/30/pyzmq-basics-part-1.html</link><pubDate>Sat, 30 Mar 2019 00:00:00 +0000</pubDate><guid>https://kinoshita.eti.br/2019/03/30/pyzmq-basics-part-1.html</guid><description>&lt;a href="https://www.deviantart.com/kinow/art/Old-man-1-657521623" style="float: left;">



&lt;figure class="feature">

 &lt;img
 src='https://kinoshita.eti.br/assets/posts/2019-03-30-pyzmq-basics-part-1/old-man-1.png'
 alt=''
 title=''
 style=''
 width=''
 height=''
 />
 &lt;figcaption>&lt;/figcaption>

&lt;/figure>


&lt;p>I am working &lt;a href="https://cylc.github.io">on a project&lt;/a> that is adopting &lt;a href="http://zeromq.org/">ZeroMQ&lt;/a>.
This post series is for self understanding of PyZMQ, a ZeroMQ
&lt;a href="https://github.com/zeromq/libzmq">&lt;code>libzmq&lt;/code>&lt;/a> binding for Python.&lt;/p>
&lt;h2 id="what-is-zeromq">What is ZeroMQ?&lt;/h2>
&lt;p>ZeroMQ (or 0MQ, or ØMQ) is an Open Source library that provides building blocks for
communication in distributed applications. The communication can be between the threads
of a process, between process (inter-process), or via network protocols such as
TCP and UDP.&lt;/p>
&lt;p>It is optimized for performance, and has been used in many applications, giving users
a solid foundation to be used in their projects.&lt;/p></description></item><item><title>Running Cylc tasks on PBS Torque with Docker</title><link>https://kinoshita.eti.br/2018/12/22/running-cylc-tasks-on-pbs-torque-with-docker.html</link><pubDate>Sat, 22 Dec 2018 00:00:00 +0000</pubDate><guid>https://kinoshita.eti.br/2018/12/22/running-cylc-tasks-on-pbs-torque-with-docker.html</guid><description>&lt;p>A few days ago I saw &lt;a href="https://groups.google.com/forum/#!topic/cylc/dP2I1Gxqi20">a post&lt;/a> at the
Cylc Google Group, about file permissions for files generated by Cylc. The post was related to
content created by Cylc, but in an environment with PBS.&lt;/p>
&lt;p>For context, Cylc is an Open Source meta-scheduler, written in Python, that allows you to
define cycle points with dependencies. These cycle points can be simple incremental integer
numbers, or ISO8601 periods or points (e.g. run every 5 minutes, from 10 days ago until the
next year). Cylc takes care to create an execution schedule for you, and delegate that to a
system that runs your workflow. I work full time on this amazing Open Source tool!&lt;/p>
&lt;p>Such system could be the local computer in background, batch systems such as &lt;code>at&lt;/code>, or PBS.
PBS was created for NASA, to manage executing jobs taking into consideration cluster resources,
and also using queues, priorities, and other features useful for HPC programming. Later PBS
was acquired by Altair, an Open Source version OpenPBS was created, and later abandoned. And
there is another fork called PBS Torque. I first encountered PBS at the São Paulo
University, in Brazil, where they had a &lt;a href="http://www.usp.br/hpc/puma.php">PBS Torque cluster&lt;/a>.&lt;/p>
&lt;h3 id="running-pbs-torque-with-docker">Running PBS Torque with Docker&lt;/h3>
&lt;p>Even though I have access to an environment with Cylc and with PBS, I decided to give it a try
and see how hard it would be to reproduce it with Docker. One thing that I like about this
approach is the possibility to share the work with others online. I believe it improves
communication, agility, and can be useful for posterity.&lt;/p></description></item><item><title>A couple of class diagrams of JupyterHub</title><link>https://kinoshita.eti.br/2018/10/06/a-couple-of-class-diagrams-of-jupyterhub.html</link><pubDate>Sat, 06 Oct 2018 00:00:00 +0000</pubDate><guid>https://kinoshita.eti.br/2018/10/06/a-couple-of-class-diagrams-of-jupyterhub.html</guid><description>&lt;p>Started on a new project last Monday. One of the tasks in this project involves a new design
for the Web layer. And as the application is quite similar to &lt;a href="https://jupyterhub.readthedocs.io/">JupyterHub&lt;/a>,
we are all learning more about its internal API and general system design.&lt;/p>
&lt;p>This post contains only two class diagrams created with PyCharm. One is actually a SQLAlchemy
ORM diagram, below.&lt;/p>
&lt;p style='text-align: center;'>
&lt;a href="https://kinoshita.eti.br/assets/posts{{page.path | remove: ".md" | remove: "_posts" }}/jupyterhub-sqlalchemy-graph.png">



&lt;figure class="feature">

 &lt;img
 src='https://kinoshita.eti.br/assets/posts/2018-10-06-a-couple-of-class-diagrams-of-jupyterhub/jupyterhub-sqlalchemy-graph.png'
 alt=''
 title=''
 style='display: inline; width: 100%;'
 width=''
 height=''
 />
 &lt;figcaption>&lt;/figcaption>

&lt;/figure>


&lt;/a>
&lt;/p></description></item><item><title>Cylc Scheduler Internals - Part 3</title><link>https://kinoshita.eti.br/2018/08/18/cylc-scheduler-internals-part-3.html</link><pubDate>Sat, 18 Aug 2018 00:00:00 +0000</pubDate><guid>https://kinoshita.eti.br/2018/08/18/cylc-scheduler-internals-part-3.html</guid><description>&lt;p>This is the part 3, in a series of posts about &lt;a href="https://cylc.github.io/cylc">Cylc&lt;/a>
internals. The [part 1]({% post_url 2018-07-14-cylc-scheduler-internals-part-1 %})
had the beginning of the workflow. [part 2]({% post_url 2018-07-27-cylc-scheduler-internals-part-2 %})
documented from the moment the method &lt;code>configure()&lt;/code> is called. This post will
continue right after the &lt;code>continue()&lt;/code> method returns, going on with the next method: &lt;code>run()&lt;/code>.&lt;/p>
&lt;p style='text-align: center;'>
&lt;a href="https://kinoshita.eti.br/assets/posts{{page.path | remove: ".md" | remove: "_posts" }}/cylc-scheduler_run.png">



&lt;figure class="feature">

 &lt;img
 src='https://kinoshita.eti.br/assets/posts/2018-08-18-cylc-scheduler-internals-part-3/cylc-scheduler_run.png'
 alt=''
 title=''
 style='display: inline; width: 100%;'
 width=''
 height=''
 />
 &lt;figcaption>&lt;/figcaption>

&lt;/figure>


&lt;/a>
&lt;/p></description></item><item><title>Creating a Docker container to run as a command</title><link>https://kinoshita.eti.br/2018/08/04/creating-a-docker-container-to-run-as-a-command.html</link><pubDate>Sat, 04 Aug 2018 00:00:00 +0000</pubDate><guid>https://kinoshita.eti.br/2018/08/04/creating-a-docker-container-to-run-as-a-command.html</guid><description>&lt;p>For the past two weeks at work I have been assigned to work on PHP projects. Though I used
PHP some time ago - especially with Code Igniter and Laravel - I have not used it in a few
years. And have been doing mostly Java nowadays.&lt;/p>
&lt;p>The complete project setup was done by co-workers. I had a PHP project, using Symfony, several
bundles and libraries, and Postgres. But it required just running a few commands to set up
AWS settings, and then fire up Docker Compose.&lt;/p></description></item><item><title>Cylc Scheduler Internals - Part 2</title><link>https://kinoshita.eti.br/2018/07/27/cylc-scheduler-internals-part-2.html</link><pubDate>Fri, 27 Jul 2018 00:00:00 +0000</pubDate><guid>https://kinoshita.eti.br/2018/07/27/cylc-scheduler-internals-part-2.html</guid><description>&lt;p>This is part 2, in a series of posts about &lt;a href="https://cylc.github.io/cylc">Cylc&lt;/a>
internals. The [part 1]({% post_url 2018-07-14-cylc-scheduler-internals-part-1 %})
had the beginning of the workflow. And here we will have the continuation, from
the moment the method &lt;code>configure()&lt;/code> is called.&lt;/p>
&lt;p>&lt;em>NB: this is a post to remember things, not really expecting to give someone enough
information to be able to hack the Cylc Scheduler (though you can and would have fun!).&lt;/em>&lt;/p>



&lt;figure class="feature">

 &lt;img
 src='https://kinoshita.eti.br/assets/posts/2018-07-27-cylc-scheduler-internals-part-2/cylc-scheduler_configure.png'
 alt=''
 title=''
 style='display: inline; width: 100%;'
 width=''
 height=''
 />
 &lt;figcaption>&lt;/figcaption>

&lt;/figure></description></item><item><title>Multithreaded code and Pandas</title><link>https://kinoshita.eti.br/2018/07/22/multithreaded-code-and-pandas.html</link><pubDate>Sun, 22 Jul 2018 00:00:00 +0000</pubDate><guid>https://kinoshita.eti.br/2018/07/22/multithreaded-code-and-pandas.html</guid><description>&lt;figure class="feature">

 &lt;img
 src='https://kinoshita.eti.br/assets/posts/2018-07-22-multithreaded-code-and-pandas/woman-looking-01.png'
 alt='Woman looking'
 title='Woman looking'
 style='float: left; height: 300px;'
 width=''
 height=''
 />
 &lt;figcaption>Woman looking&lt;/figcaption>

&lt;/figure>


&lt;p>Pandas provides high-performance data structures in Python. I think in Java there are
similar data structures in projects like Apache Commons Collections,
Google Guava, and also Trove.&lt;/p>
&lt;p>In the Java libraries thread-safety is always a must-have feature. Probably as it is quite
common for a Java program to have more than one thread, especially if the code runs in some
sort of web container.&lt;/p>
&lt;p>I recently learned that Pandas, on the other hand, does not guarantee any thread-safety.
I found that while reading an
&lt;a href="https://github.com/pandas-dev/pandas/issues/21150">issue about race condition in the &lt;code>IndexEngine&lt;/code>&lt;/a>,
and after preparing a pull request for that.&lt;/p></description></item><item><title>Cylc Scheduler Internals - Part 1</title><link>https://kinoshita.eti.br/2018/07/14/cylc-scheduler-internals-part-1.html</link><pubDate>Sat, 14 Jul 2018 00:00:00 +0000</pubDate><guid>https://kinoshita.eti.br/2018/07/14/cylc-scheduler-internals-part-1.html</guid><description>&lt;p>This is the first post in a series of three (or maybe four later) based on diagrams
I collected while debugging the Cylc scheduler. The scheduler is called by the &lt;code>cylc start&lt;/code>
utility.&lt;/p>
&lt;p>&lt;em>NB: this is a post to remember things, not really expecting to give someone enough
information to be able to hack the Cylc Scheduler (though you can and would have fun!).&lt;/em>&lt;/p>
&lt;p>Instead of going at length on what happens (and there is quite a bit happening when
you run &lt;code>cylc start my.suite&lt;/code>), I will use the following diagram, followed by a few paragraphs
to highlight certain parts. The code used was based on &lt;a href="https://github.com/cylc/cylc/tree/7.7.1">Cylc 7.7.1&lt;/a>.&lt;/p>



&lt;figure class="feature">

 &lt;img
 src='https://kinoshita.eti.br/assets/posts/2018-07-14-cylc-scheduler-internals-part-1/cylc-scheduler_cli-workflow.png'
 alt=''
 title=''
 style='display: inline; width: 100%;'
 width=''
 height=''
 />
 &lt;figcaption>&lt;/figcaption>

&lt;/figure></description></item><item><title>ImportError when debugging cylc in Eclipse</title><link>https://kinoshita.eti.br/2018/07/10/importerror-when-debugging-cylc-in-eclipse.html</link><pubDate>Tue, 10 Jul 2018 00:00:00 +0000</pubDate><guid>https://kinoshita.eti.br/2018/07/10/importerror-when-debugging-cylc-in-eclipse.html</guid><description>&lt;p>Since I started reading cylc&amp;rsquo;s source code in Eclipse to create some
sequence diagrams, I have not been able to debug it properly without
hitting errors in some part of the program execution.&lt;/p>
&lt;p>The error message was &lt;strong>_“ImportError: cannot import name &lt;em>remove_dead_weakref”&lt;/em>&lt;/strong>,
which was a bit enigmatic as I never heard about that function, but it seemed to be
something internal, or at least not from the project code base. And searching the Internet
did not help much.&lt;/p></description></item><item><title>A simple Cylc suite</title><link>https://kinoshita.eti.br/2018/07/08/a-simple-cylc-suite.html</link><pubDate>Sun, 08 Jul 2018 00:00:00 +0000</pubDate><guid>https://kinoshita.eti.br/2018/07/08/a-simple-cylc-suite.html</guid><description>&lt;p>I have been writing more suites for &lt;a href="https://cylc.github.io/cylc/">cylc&lt;/a> lately, and found
an example that has proved to be useful for debugging certain parts of the code.&lt;/p>
&lt;p>It is an extremely simple suite, similar to what is in cylc&amp;rsquo;s documentation. It
sleeps for N seconds, and prints a message.&lt;/p></description></item><item><title>Enabling Markdown Extension Tables For Piecrust</title><link>https://kinoshita.eti.br/2017/09/09/enabling-markdown-extension-tables-for-piecrust.html</link><pubDate>Sat, 09 Sep 2017 00:00:00 +0000</pubDate><guid>https://kinoshita.eti.br/2017/09/09/enabling-markdown-extension-tables-for-piecrust.html</guid><description>&lt;p>&lt;a href="https://github.com/ludovicchabant/PieCrust2">PieCrust&lt;/a> is a Python static site generator.
It allows users to write content in Markdown. But if you try adding a table, the content by
default will be generated as plain text.&lt;/p>
&lt;p>You have to enable &lt;a href="https://pythonhosted.org/Markdown/extensions/tables.html">Markdown extension tables&lt;/a>.
PieCrust will &lt;a href="https://github.com/ludovicchabant/PieCrust2/blob/6462e052045552d2ba164f4965370d84ddb54946/piecrust/formatting/markdownformatter.py#L29">load it&lt;/a>
when creating the Markdown instance.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#177500"># config.yml&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">markdown&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">extensions&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#1c01ce">tables&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Et, voilà! Happy blogging!&lt;/p>
&lt;p>♥ Open Source&lt;/p></description></item><item><title>How to remove the signature from e-mails with NLP?</title><link>https://kinoshita.eti.br/2017/06/14/how-to-remove-the-signature-from-e-mails-with-nlp.html</link><pubDate>Wed, 14 Jun 2017 00:00:00 +0000</pubDate><guid>https://kinoshita.eti.br/2017/06/14/how-to-remove-the-signature-from-e-mails-with-nlp.html</guid><description>&lt;p>Some time ago I stumbled across &lt;a href="https://github.com/mynameisvinn/EmailParser">EmailParser&lt;/a>, a Python utility to remove e-mail signatures. Here&amp;rsquo;s a sample input e-mail from the project documentation.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-text" data-lang="text">&lt;span style="display:flex;">&lt;span>Wendy – thanks for the intro! Moving you to bcc.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Hi Vincent – nice to meet you over email. Apologize for the late reply, I was on PTO for a couple weeks and this is my first week back in office. As Wendy mentioned, I am leading an AR/VR taskforce at Foobar Retail Solutions. The goal of the taskforce is to better understand how AR/VR can apply to retail/commerce and if/what is the role of a shopping center in AR/VR applications for retail.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Wendy mentioned that you would be a great person to speak to since you are close to what is going on in this space. Would love to set up some time to chat via phone next week. What does your availability look like on Monday or Wednesday?
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Best,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Joe Smith
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Joe Smith | Strategy &amp;amp; Business Development
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>111 Market St. Suite 111| San Francisco, CA 94103
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>M: 111.111.1111| joe@foobar.com
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>And here&amp;rsquo;s what it looks like afterwards.&lt;/p></description></item><item><title>Writing a binary parser in Python: NumPy vs. Construct</title><link>https://kinoshita.eti.br/2017/04/14/writing-a-binary-parser-in-python-numpy-vs.-construct.html</link><pubDate>Fri, 14 Apr 2017 00:00:00 +0000</pubDate><guid>https://kinoshita.eti.br/2017/04/14/writing-a-binary-parser-in-python-numpy-vs.-construct.html</guid><description>&lt;p>Some time ago I worked with researchers to write a parser for an old data format. The data
was generated by device (radiosonde) using the vendor (Vaisala) specific binary format.&lt;/p>
&lt;p>One of the researchers told me someone had written a parser for his work, and shared it
on GitHub. To be honest, that was my first time parsing data in binary with Python. Did
that before with C, C++, Perl, and Java, but never with Python.&lt;/p></description></item></channel></rss>