<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Jenkins on kinow</title><link>https://kinoshita.eti.br/tags/jenkins.html</link><description>Recent content in Jenkins on kinow</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><copyright>Bruno P. Kinoshita All rights reserved</copyright><lastBuildDate>Sun, 20 Jul 2025 16:30:34 +0200</lastBuildDate><atom:link href="https://kinoshita.eti.br/tags/jenkins/feed.xml" rel="self" type="application/rss+xml"/><item><title>Jenkins Active Choices with Jupyter Notebooks</title><link>https://kinoshita.eti.br/2020/03/26/jenkins-active-choices-with-jupyter-notebooks.html</link><pubDate>Thu, 26 Mar 2020 00:00:00 +0000</pubDate><guid>https://kinoshita.eti.br/2020/03/26/jenkins-active-choices-with-jupyter-notebooks.html</guid><description>Jenkins Active Choices provides interactive and reactive parameters for the Jenkins UI. It is used by DevOps but also by researchers in industry and academia. Some days ago I ran an experiment where I tried to reproduce similar behaviour of the plug-in with Jupyter Notebooks and ipywidgets.
The experiment was a success, and I am convinced one could achieve the same in Jupyter Notebooks. Jenkins could be used as workflow manager, or the parameters could be submitted to a different workflow manager or another system.</description></item><item><title>Troubleshooting a Jenkins Plug-in compatibility issue</title><link>https://kinoshita.eti.br/2017/04/17/troubleshooting-a-jenkins-plug-in-compatibility-issue.html</link><pubDate>Mon, 17 Apr 2017 00:00:00 +0000</pubDate><guid>https://kinoshita.eti.br/2017/04/17/troubleshooting-a-jenkins-plug-in-compatibility-issue.html</guid><description>This post is probably different from others. I will give a TL;DR, but will then give you a copy of a comment of a Jenkins JIRA issue. Hope you have fun reading it, specially if you maintain Jenkins servers or plug-ins.
TL;DR: there was an issue in Jenkins Job DSL Plug-in, that caused jobs created to have an invalid script. The fix had not been released, but was already in the master branch in GitHub.</description></item><item><title>PermGen errors and java.lang.ClassCastException: com.sun.crypto.provider.AESCipher cannot be cast to javax.crypto.CipherSpi running Jenkins plug-in tests with PowerMock</title><link>https://kinoshita.eti.br/2016/12/19/permgen-errors-and-java.lang.classcastexception-com.sun.crypto.provider.aescipher-cannot-be-cast-to-javax.crypto.cipherspi-running-jenkins-plug-in-tests-with-powermock.html</link><pubDate>Mon, 19 Dec 2016 00:00:00 +0000</pubDate><guid>https://kinoshita.eti.br/2016/12/19/permgen-errors-and-java.lang.classcastexception-com.sun.crypto.provider.aescipher-cannot-be-cast-to-javax.crypto.cipherspi-running-jenkins-plug-in-tests-with-powermock.html</guid><description>Recently while working on a Jenkins plugin some tests were failing with PermGen errors. Even though it worked in my notebook at home (with Java 8, thus no Permgen), it failed in a CloudBees hosted Jenkins job, and also on my Mac (with Java 7) at work.
As I could not change the settings in the CloudBees hosted Jenkins, I decided to spent some time investigating why these tests would require so much memory.</description></item><item><title>Performance problems in Jenkins TAP Plug-in &amp;mdash; part 1</title><link>https://kinoshita.eti.br/2016/09/03/performance-problems-in-jenkins-tap-plug-in-mdash-part-1.html</link><pubDate>Sat, 03 Sep 2016 00:00:00 +0000</pubDate><guid>https://kinoshita.eti.br/2016/09/03/performance-problems-in-jenkins-tap-plug-in-mdash-part-1.html</guid><description>JENKINS-17887 reports performance problems in the Jenkins TAP Plug-in. It also lists a series of suggestions on how to improve the Jenkins TAP Plug-in performance. On this initial post, we will get a general idea of how the plug-in performs for large projects.
BioPerl has over 21K tests. That should be enough for giving an initial idea of CPU, memory and disk usage for the plug-in.
git clone https://github.com/bioperl/bioperl-live.git cd bioperl-live sudo cpanm -vv --installdeps --notest .</description></item><item><title>Using Active Choices with Role Strategy Plug-in</title><link>https://kinoshita.eti.br/2016/04/24/using-active-choices-with-role-strategy-plug-in.html</link><pubDate>Sun, 24 Apr 2016 00:00:00 +0000</pubDate><guid>https://kinoshita.eti.br/2016/04/24/using-active-choices-with-role-strategy-plug-in.html</guid><description>&lt;p>Having worked in Open Source for a few years, one of my favorite things is when you can
share experience with other people that you meet. &lt;a href="https://github.com/agray">Andrew Gray&lt;/a>
has worked with .NET and Jenkins for years, and we met through Open Source. He has helped me
in the past with Jenkins and .NET, and also maintains the blog
&lt;a href="http://jenkinsheaven.blogspot.co.nz/">Jenkins.NET&lt;/a>.&lt;/p>
&lt;p>A couple of days ago he sent me an interesting question. He asked me if that would be possible
to use Active Choices Plug-in with the &lt;a href="https://wiki.jenkins-ci.org/display/JENKINS/Role+Strategy+Plugin">Role Strategy Plug-in&lt;/a>.
This plug-in lets you define roles, define which permissions a role has, and then assign users to the roles.&lt;/p></description></item><item><title>Trying SaltStack with Docker</title><link>https://kinoshita.eti.br/2016/04/17/trying-saltstack-with-docker.html</link><pubDate>Sun, 17 Apr 2016 00:00:00 +0000</pubDate><guid>https://kinoshita.eti.br/2016/04/17/trying-saltstack-with-docker.html</guid><description>Some weeks ago I started learning SaltStack for a project at work. But I couldn&amp;rsquo;t find a good Docker image for that and I had to ask the Ops team for some VM&amp;rsquo;s. We are having a rainy weekend in Auckland, so I decided to have another look at the Jenkins SaltStack Plug-in.
But now since I was at home, I couldn&amp;rsquo;t use the VM&amp;rsquo;s that I had access to at work.</description></item><item><title>Deploying WAR files to Tomcat with Jenkins</title><link>https://kinoshita.eti.br/2016/03/20/deploying-war-files-to-tomcat-with-jenkins.html</link><pubDate>Sun, 20 Mar 2016 00:00:00 +0000</pubDate><guid>https://kinoshita.eti.br/2016/03/20/deploying-war-files-to-tomcat-with-jenkins.html</guid><description>&lt;p>&lt;strong>Table of Contents&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>&lt;a href="#1-deploying-with-custom-scripts">Deploying with custom scripts&lt;/a>&lt;/li>
&lt;li>&lt;a href="#2-deploying-with-a-build-tool">Deploying with a build tool&lt;/a>&lt;/li>
&lt;li>&lt;a href="#3-deploying-with-a-build-server">Deploying with a build server&lt;/a>&lt;/li>
&lt;li>&lt;a href="#final-thoughts">Final thoughts&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>A co-worker asked me this week about how to deploy a WAR file to Tomcat with Jenkins. In my team we are
currently maintaining and deploying about 10 Java web systems, but we have no consistent way of deploying
the applications to Tomcat yet. In the past I used Ant, Maven, Cargo, Grunt, and Jenkins, so I
decided to write this short post to show a few different ways it can be achieved, Ã  la
&lt;a href="https://en.wikipedia.org/wiki/There's_more_than_one_way_to_do_it">Perl&amp;rsquo;s TMTOWTDI&lt;/a> motto.&lt;/p>
&lt;h2>&lt;a name="1-deploying-with-custom-scripts" style="color: #222222;">#1 Deploying with custom scripts&lt;/a>&lt;/h2>
&lt;p>At first you may be tempted to write your own script to deploy to Tomcat with some Shell, Perl, Python
or Java. But I think I would choose this option only because either I needed some feature that is not
available in the other options, or in order to call other tasks or debug some problem.&lt;/p>
&lt;p>Example:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>$ docker run -d -p 8888:8080 jeanblanchard/tomcat:8
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ git clone https://github.com/spring-projects/spring-petclinic.git &lt;span style="color:#000">&amp;amp;&amp;amp;&lt;/span> &lt;span style="color:#a90d91">cd&lt;/span> spring-petclinic &lt;span style="color:#000">&amp;amp;&amp;amp;&lt;/span> mvn package
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ curl --upload-file target/petclinic.war &lt;span style="color:#c41a16">&amp;#34;http://admin:admin@localhost:8888/manager/text/deploy?path=/spring-petclinic&amp;amp;update=true&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>OK - Deployed application at context path /spring-petclinic
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>How does the Jenkins Credentials Plug-in store passwords?</title><link>https://kinoshita.eti.br/2015/09/07/how-does-the-jenkins-credentials-plug-in-store-passwords.html</link><pubDate>Mon, 07 Sep 2015 00:00:00 +0000</pubDate><guid>https://kinoshita.eti.br/2015/09/07/how-does-the-jenkins-credentials-plug-in-store-passwords.html</guid><description>Jenkins Credentials Plug-in manages credentials stored in Jenkins. These credentials can be used in many jobs and by plug-ins for executing SSH commands, authenticating to systems, or running other commands that need some sort of authentication or authorisation.
I recently used its API for the first time in the BioUno figshare Plug-in to store OAuth 1.0 credentials (consumer key, consumer secret, token key, token secret). This blog post has more details about how we used the plug-in, but this post is specifically on how the passwords are stored by Jenkins.</description></item><item><title>Groovy Hooks in Jenkins for increasing logging level</title><link>https://kinoshita.eti.br/2015/04/12/groovy-hooks-in-jenkins-for-increasing-logging-level.html</link><pubDate>Sun, 12 Apr 2015 00:00:00 +0000</pubDate><guid>https://kinoshita.eti.br/2015/04/12/groovy-hooks-in-jenkins-for-increasing-logging-level.html</guid><description>Yesterday, while debugging a problem we had in the BioUno update center, I realized that after increasing the logging level in the WEB interface, the messages that I needed weren&amp;rsquo;t being displayed in the logs.
It happened because some of the logging happened during Jenkins initialization, and before I could adjust the log level.
The solution was to use a Groovy Hook Script. If you are familiar with Linux init scripts, the idea is quite similar.</description></item><item><title>Treemapping Jenkins Extension Points with R</title><link>https://kinoshita.eti.br/2014/05/19/treemapping-jenkins-extension-points-with-r.html</link><pubDate>Mon, 19 May 2014 00:00:00 +0000</pubDate><guid>https://kinoshita.eti.br/2014/05/19/treemapping-jenkins-extension-points-with-r.html</guid><description>&lt;p>I have been playing with R and its packages for some time, and decided to study it a
bit harder. Last week I started reading the &lt;a href="http://adv-r.had.co.nz/">Advanced R Programming&lt;/a>
by Hadley Wickham.&lt;/p>
&lt;p>One of the first chapters talks about the basic data structures in R. In order to
get my feet wet I thought about a simple example: &lt;a href="http://en.wikipedia.org/wiki/Treemapping">treemapping&lt;/a>
Jenkins extension points.&lt;/p>



&lt;figure class="feature">

 &lt;img
 src='https://kinoshita.eti.br/assets/posts/2014-05-19-treemapping-jenkins-extension-points-with-r/extension_points.png'
 alt=''
 title=''
 style=''
 width=''
 height=''
 />
 &lt;figcaption>&lt;/figcaption>

&lt;/figure></description></item><item><title>Running BDD tests from TestLink in Jenkins</title><link>https://kinoshita.eti.br/2012/11/07/running-bdd-tests-from-testlink-in-jenkins.html</link><pubDate>Wed, 07 Nov 2012 00:00:00 +0000</pubDate><guid>https://kinoshita.eti.br/2012/11/07/running-bdd-tests-from-testlink-in-jenkins.html</guid><description>&lt;p>Last night and this morning I spent some time working on running
&lt;a href="http://en.wikipedia.org/wiki/Behavior-driven_development">BDD&lt;/a> tests that were created in
&lt;a href="http://www.teamst.org">TestLink&lt;/a> in &lt;a href="http://jenkins-ci.org">Jenkins&lt;/a>, using
&lt;a href="https://wiki.jenkins-ci.org/display/JENKINS/TestLink+Plugin">testlink-plugin&lt;/a>.&lt;/p>
&lt;p>Similar integration has already been proposed in &lt;a href="http://www.sqaopen.net/blog/en/?tag=jinfeng">JinFeng&lt;/a>,
by Olivier Renault. Basically, you write BDD stories in TestLink (a story goes into the Test Case summary),
Jenkins retrieves these stories and executes them using a skeleton project.&lt;/p>



&lt;figure class="feature">

 &lt;img
 src='https://kinoshita.eti.br/assets/posts/2012-11-07-running-bdd-tests-from-testlink-in-jenkins/tl_bdd.png'
 alt=''
 title=''
 style=''
 width=''
 height=''
 />
 &lt;figcaption>&lt;/figcaption>

&lt;/figure>


&lt;p>There are many ways to use BDD. In some of them you write code like Java, Ruby or Perl, and in others you write a DSL. I started working with JBehave, but for this integration, I preferred to use a &lt;a href="http://en.wikipedia.org/wiki/Domain-specific_language" title="DSL">DSL&lt;/a> - as TestLink doesn&amp;rsquo;t maintain source code, only test cases -, so I switched to &lt;a href="http://www.easyb.org" title="easyb">easyb&lt;/a>.&lt;/p></description></item><item><title>A quick view on Wordpress, Mantis and Jenkins plug-in API</title><link>https://kinoshita.eti.br/2012/10/25/a-quick-view-on-wordpress-mantis-and-jenkins-plug-in-api.html</link><pubDate>Thu, 25 Oct 2012 00:00:00 +0000</pubDate><guid>https://kinoshita.eti.br/2012/10/25/a-quick-view-on-wordpress-mantis-and-jenkins-plug-in-api.html</guid><description>&lt;p>I'm preparing a &lt;em>plug-in API proposal for &lt;a href="http://www.teamst.org" title="TestLink">TestLink&lt;/a>&lt;/em>, and thought that the best way to learn how to write a good plug-in API would be by looking at other application's plug-in API's.&lt;/p>



&lt;figure class="feature">

 &lt;img
 src='https://kinoshita.eti.br/assets/posts/2012-10-25-a-quick-view-on-wordpress-mantis-and-jenkins-plug-in-api/testlink_logo_2.jpg%20'
 alt=''
 title=''
 style=''
 width=''
 height=''
 />
 &lt;figcaption>&lt;/figcaption>

&lt;/figure>


&lt;p>This post contains information that I gathered for creating this new API, but that may also be useful for other programmers. I used &lt;a href="#wp">Wordpress&lt;/a>, &lt;a href="#mantis">Mantis&lt;/a> and &lt;a href="#jenkins">Jenkins&lt;/a> in this study. Let me know if you find any mistakes or if you have any other suggestions.&lt;/p></description></item><item><title>Adding coverage reports in Jenkins with GoogleTest and gcovr</title><link>https://kinoshita.eti.br/2012/10/16/adding-coverage-reports-in-jenkins-with-googletest-and-gcovr.html</link><pubDate>Tue, 16 Oct 2012 00:00:00 +0000</pubDate><guid>https://kinoshita.eti.br/2012/10/16/adding-coverage-reports-in-jenkins-with-googletest-and-gcovr.html</guid><description>&lt;p>After the [last post]({% post_url 2012-10-11-jenkins-testlink-and-gtest-in-5-minutes-or-so %}) about
&lt;a href="http://code.google.com/p/googletest/">GoogleTest&lt;/a> and &lt;a href="http://www.teamst.org">TestLink&lt;/a> using
&lt;a href="https://wiki.jenkins-ci.org/display/JENKINS/TestLink+Plugin">Jenkins TestLink Plug-in&lt;/a>, I received an e-mail
asking about &lt;a href="http://en.wikipedia.org/wiki/Code_coverage">coverage&lt;/a> with GoogleTest and
&lt;a href="http://www.jenkins-ci.org">Jenkins&lt;/a>. I&amp;rsquo;ve just updated the
&lt;a href="https://github.com/kinow/gtest-tap-listener/blob/master/samples/Makefile">Makefile&lt;/a> in the samples
directory, of the &lt;a href="https://github.com/kinow/gtest-tap-listener">GoogleTest TAP listener project&lt;/a>,
to output coverage data.&lt;/p>
&lt;p>Basically, you have to add the compiler flags &lt;code>-fprofile-arcs -ftest-coverage&lt;/code> and link the executable with
&lt;code>-lgcov&lt;/code>. Take a look at the project&amp;rsquo;s Makefile and you&amp;rsquo;ll notice how simple it is. In order to have Jenkins
interpreting your coverage report, you&amp;rsquo;ll have to convert it to &lt;a href="http://cobertura.sourceforge.net">cobertura&lt;/a>
XML. There is a Python utility that can be used for this: &lt;a href="https://software.sandia.gov/trac/fast/wiki/gcovr">gcovr&lt;/a>.
Download it and copy it to somewhere where Jenkins can execute it (e.g.: &lt;code>/usr/local/bin&lt;/code>).&lt;/p>
&lt;p>Now, if you&amp;rsquo;ve followed the instructions from the previous post, you should have a job that reports your GoogleTest
tests from Jenkins to TestLink using the plug-in, and is downloading the source code from GitHub. Add an extra build
step (Shell) to execute &lt;code>gcovr&lt;/code>.&lt;/p></description></item><item><title>Jenkins, TestLink and GTest in 5 minutes (or so)</title><link>https://kinoshita.eti.br/2012/10/11/jenkins-testlink-and-gtest-in-5-minutes-or-so.html</link><pubDate>Thu, 11 Oct 2012 00:00:00 +0000</pubDate><guid>https://kinoshita.eti.br/2012/10/11/jenkins-testlink-and-gtest-in-5-minutes-or-so.html</guid><description>&lt;p>This is a 5 minutes guide on creating a job for a C++ project in &lt;a href="http://www.jenkins-ci.org" title="Jenkins CI">Jenkins&lt;/a> with &lt;a href="http://code.google.com/p/googletest" title="GoogleTest">GoogleTest&lt;/a> and reporting the test results back to &lt;a href="http://www.teamst.org" title="TestLink">TestLink&lt;/a>, with &lt;a href="https://wiki.jenkins-ci.org/display/JENKINS/TestLink+Plugin" title="Jenkins TestLink Plug-in">testlink-plugin&lt;/a>.&lt;/p>
&lt;h2 id="the-test-project-with-googletest">The test project with GoogleTest&lt;/h2>
&lt;p>For this simple guide we will use the samples that come with &lt;a href="https://github.com/kinow/gtest-tap-listener" title="GTest TAP Listener">GTest TAP Listener&lt;/a>. You can get the code from GitHub with &lt;code>git clone git://github.com/kinow/gtest-tap-listener.git&lt;/code>. Take a look at &lt;code>gtest-tap-listener/samples/src/&lt;/code>, there you will find two C++ files: &lt;code>gtest_main.cc&lt;/code> and &lt;code>gtest_testHelloWorld.cc&lt;/code>.&lt;/p>
&lt;p>&lt;code>gtest_main.cc&lt;/code> has the &lt;a href="http://code.google.com/p/googletest/wiki/Primer#Writing_the_main()_Function" title="GTest main function">main function&lt;/a>, and executes the test suite. And &lt;code>gtest_testHelloWorld.cc&lt;/code> has the test cases and tests. Take note of the test case and tests names.&lt;/p>



&lt;figure class="feature">

 &lt;img
 src='https://kinoshita.eti.br/assets/posts/2012-10-11-jenkins-testlink-and-gtest-in-5-minutes-or-so/screenshot_001.png'
 alt=''
 title=''
 style=''
 width=''
 height=''
 />
 &lt;figcaption>&lt;/figcaption>

&lt;/figure></description></item><item><title>Testing shell code and producing TAP using Jenkins?</title><link>https://kinoshita.eti.br/2011/12/30/testing-shell-code-and-producing-tap-using-jenkins.html</link><pubDate>Fri, 30 Dec 2011 00:00:00 +0000</pubDate><guid>https://kinoshita.eti.br/2011/12/30/testing-shell-code-and-producing-tap-using-jenkins.html</guid><description>&lt;p>Definitely reading &lt;a title="Hacker News" href="http://news.ycombinator.com/">Hacker News&lt;/a> before going to bed is a bad idea :-) Same goes for &lt;a title="Reddit" href="http://www.reddit.com">Reddit&lt;/a>. So, I found a link about &lt;a title="Bats" href="https://github.com/sstephenson/bats">Bats&lt;/a>, a tool to execute tests in Shell and output &lt;a title="Test Anything Protocol" href="http://testanything.org">TAP&lt;/a> - Test Anything Protocol. Then I thought; why not ask the author to include Bats under the list of &lt;a title="TAP Producers" href="http://testanything.org/wiki/index.php/TAP_Producers#SH_.2F_Shell_Script">Producers&lt;/a> in &lt;a title="Test Anything Protocol" href="http://testanything.org">testanything.org&lt;/a>?&lt;/p>
&lt;p>But you know what? Why not execute execute locally first to check if that&amp;rsquo;s working&amp;hellip; moreover, why not use &lt;a title="Jenkins TAP Plug-in" href="https://wiki.jenkins-ci.org/display/JENKINS/TAP+Plugin">Jenkins TAP Plug-in&lt;/a> and see what happens?&lt;/p></description></item><item><title>Building Jenkins with Eclipse and m2e plug-in</title><link>https://kinoshita.eti.br/2011/09/20/building-jenkins-with-eclipse-and-m2e-plug-in.html</link><pubDate>Tue, 20 Sep 2011 00:00:00 +0000</pubDate><guid>https://kinoshita.eti.br/2011/09/20/building-jenkins-with-eclipse-and-m2e-plug-in.html</guid><description>&lt;p>Yesterday I finally managed to build &lt;a title="Jenkins" href="http://www.jenkins-ci.org">Jenkins&lt;/a> using &lt;a title="Eclipse" href="http://www.eclipse.org/">Eclipse&lt;/a> and &lt;a title="m2e plug-in" href="http://eclipse.org/m2e/">m2e plug-in&lt;/a>. With &lt;a title="Eclipse Indigo" href="http://www.eclipse.org/indigo">Eclipse Indigo&lt;/a> release came a new version of the &lt;a title="Maven" href="http://maven.apache.org">Maven&lt;/a> plug-in for Eclipse (former &lt;a title="M2Eclipse" href="http://m2eclipse.sonatype.org/">M2Eclipse&lt;/a>), m2e. Since I started using Eclipse Indigo and this new plug-in I hadn't been able to build Jenkins in Eclipse anymore.&lt;/p>
&lt;p>I've been having a terrible fever and thought that it would be a good thing to stop playing &lt;a href="http://www.minecraft.net" title="Minecraft">Minecraft&lt;/a> for a while and find a way to build Jenkins in Eclipse + m2e :-).&lt;/p>
&lt;h2>1. Maven Plug-ins execution in project life cycle&lt;/h2>
&lt;p>The first thing I've noticed were the messages regarding the execution of some Maven plug-ins in the project life cycle. m2e delegates the execution of Maven plug-ins to an external executor. As not all Maven plug-ins have an existing executor for m2e you will receive a message similar to "Plugin execution not covered by lifecycle configuration: ...".&lt;/p></description></item><item><title>TDC 2011 Floripa presentation about running your tests in Jenkins</title><link>https://kinoshita.eti.br/2011/08/25/tdc-2011-floripa-presentation-about-running-your-tests-in-jenkins.html</link><pubDate>Thu, 25 Aug 2011 00:00:00 +0000</pubDate><guid>https://kinoshita.eti.br/2011/08/25/tdc-2011-floripa-presentation-about-running-your-tests-in-jenkins.html</guid><description>&lt;p>Last weekend I attended TDC (&lt;a title="The Developers Conference" href="http://www.thedevelopersconference.com.br">The Developers Conference&lt;/a>) 2011 in FlorianÃ³polis, in the south of Brazil. It was my first time in FlorianÃ³polis, but the weather was cloudy and cold, so I couldn&amp;rsquo;t check out one of the prettiest cities in Brazil :-( Bummer.&lt;/p>



&lt;figure class="feature">

 &lt;img
 src='https://kinoshita.eti.br/assets/posts/2011-08-25-tdc-2011-floripa-presentation-about-running-your-tests-in-jenkins/banner_TDC2011_floripapng'
 alt=''
 title=''
 style=''
 width=''
 height=''
 />
 &lt;figcaption>&lt;/figcaption>

&lt;/figure>


&lt;p>Putting the weather aside, TDC was great! Basically, there were many nice, easy-going people gathering together to talk about subjects like Java, SOA, Arduino, Testing, Agile and more. I had the chance to talk with skilled and experienced people, see different talks and catch up Guilherme Motta (&lt;a title="@gfcmotta" href="http://www.twitter.com/gfcmotta">@gfcmotta&lt;/a>) from &lt;a title="ThoughtWorks" href="http://www.thoughtworks.com">ThoughtWorks&lt;/a>, who I have met in Porto Alegre in the beginning of this year. He gave an interesting talk about crowd testing using games as example, but varying with applications in different areas too.&lt;/p></description></item><item><title>The Developers Conference (TDC) 2011 Botando o Jenkins para rodar seus testes</title><link>https://kinoshita.eti.br/2011/08/20/the-developers-conference-tdc-2011-botando-o-jenkins-para-rodar-seus-testes.html</link><pubDate>Sat, 20 Aug 2011 00:00:00 +0000</pubDate><guid>https://kinoshita.eti.br/2011/08/20/the-developers-conference-tdc-2011-botando-o-jenkins-para-rodar-seus-testes.html</guid><description>Botando o Jenkins para rodar seus testes
Event The Developers Conference 2011 Where ? Florian&amp;oacute;polis When ? 2011-08-20</description></item><item><title>TestLink and Hudson (now Jenkins) short tutorial in Automated Software Testing Magazine, issue March 2011</title><link>https://kinoshita.eti.br/2011/03/22/testlink-and-hudson-now-jenkins-short-tutorial-in-automated-software-testing-magazine-issue-march-2011.html</link><pubDate>Tue, 22 Mar 2011 00:00:00 +0000</pubDate><guid>https://kinoshita.eti.br/2011/03/22/testlink-and-hudson-now-jenkins-short-tutorial-in-automated-software-testing-magazine-issue-march-2011.html</guid><description>Hi there, a new article about TestLink and Hudson (now Jenkins) was published, now in Automated Software Testing Magazine, issue March 2011. In this article you will find a short tutorial to set up a TestNG test and a simple Job to execute your automated tests. Now we are writing a docbook document to explain with more details how the plug-in works and how you can play with it. We are also working in more samples, translation and video demos.</description></item><item><title>Belgium Testing Days 2011: Manage automated tests with TestLink and Hudson/Jenkins</title><link>https://kinoshita.eti.br/2011/02/25/belgium-testing-days-2011-manage-automated-tests-with-testlink-and-hudson/jenkins.html</link><pubDate>Fri, 25 Feb 2011 00:00:00 +0000</pubDate><guid>https://kinoshita.eti.br/2011/02/25/belgium-testing-days-2011-manage-automated-tests-with-testlink-and-hudson/jenkins.html</guid><description>Slides used at Belgium Testing Days 2011: Manage automated tests with TestLink and Hudson/Jenkins
Belgium Testing Days 2011: Manage automated tests with TestLink and Hudson&amp;#x2F;Jenkins by brunodepaulak
Cheers</description></item></channel></rss>