<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Opensource on kinow</title><link>https://kinoshita.eti.br/tags/opensource.html</link><description>Recent content in Opensource on kinow</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><copyright>Bruno P. Kinoshita All rights reserved</copyright><lastBuildDate>Sat, 20 Apr 2024 13:15:17 +0200</lastBuildDate><atom:link href="https://kinoshita.eti.br/tags/opensource/feed.xml" rel="self" type="application/rss+xml"/><item><title>Coverage report for a GitHub private repository with GitHub Actions</title><link>https://kinoshita.eti.br/2023/05/29/coverage-report-for-a-github-private-repository-with-github-actions.html</link><pubDate>Mon, 29 May 2023 20:36:52 +0300</pubDate><guid>https://kinoshita.eti.br/2023/05/29/coverage-report-for-a-github-private-repository-with-github-actions.html</guid><description>Normally when you add test coverage to a GitHub repository, the reporting part boils down to a simple call to some API that will post to a third-party external service like Coveralls or Codecov. Many are already on the GitHub Actions Market Place and a few lines of YAML are enough.
A Codecov coverage report We had to report the test coverage of a private GitHub repository of a project I am working on at the moment, that could not have integration with other services besides GitHub.</description></item><item><title>Cyclic Workflows with Prefect</title><link>https://kinoshita.eti.br/2021/11/08/cyclic-workflows-with-prefect.html</link><pubDate>Mon, 08 Nov 2021 00:00:00 +0000</pubDate><guid>https://kinoshita.eti.br/2021/11/08/cyclic-workflows-with-prefect.html</guid><description>&lt;div style="width: 50%; margin: 0 auto;">
 
 
 
 &lt;figure class="feature">
 
 &lt;img
 src='https://kinoshita.eti.br/assets/posts/2021-11-08-cyclic-workflows-with-prefect/prefect.svg'
 alt='Prefect logo'
 title='Prefect logo'
 style=''
 width=''
 height=''
 />
 &lt;figcaption>&lt;/figcaption>
 
 &lt;/figure>
 

&lt;/div>
&lt;p>Last month I wrote about
&lt;a href="https://kinoshita.eti.br/2021/10/01/cyclic-workflows-with-cylc-and-stackstorm.html">Cyclic Workflows with Cylc and StackStorm&lt;/a>
and how few workflow managers support cyclic workflows.&lt;/p>
&lt;p>I was surprised today while reading Prefect documentation to see this paragraph:&lt;/p>
&lt;blockquote>
&lt;p>Most workflow frameworks act as if looping is impossible (stressing the Acyclic part of the DAG),
but it&amp;rsquo;s actually trivial to implement. We simply dynamically unroll the loop, similar to how RNN
gradients are sometimes computed.&lt;/p>
&lt;/blockquote></description></item><item><title>Removing invisible unread GitHub notifications</title><link>https://kinoshita.eti.br/2021/10/22/removing-invisible-unread-github-notifications.html</link><pubDate>Fri, 22 Oct 2021 00:00:00 +0000</pubDate><guid>https://kinoshita.eti.br/2021/10/22/removing-invisible-unread-github-notifications.html</guid><description>Some months ago I noticed that even after I marked all my GitHub notifications as read, the unread icon displayed at the right top corner was still showing as if I had unread notifications.
GitHub Notifications icon always-on mode I tried changing the filters, waiting for a new notification to appear so that I could mark it as read, all hoping that icon would then change. But no matter what I tried in the GitHub UI, the icon was still there.</description></item><item><title>Blender rendering on NVIDIA Jetson Nano</title><link>https://kinoshita.eti.br/2021/10/17/blender-rendering-on-nvidia-jetson-nano.html</link><pubDate>Sun, 17 Oct 2021 00:00:00 +0000</pubDate><guid>https://kinoshita.eti.br/2021/10/17/blender-rendering-on-nvidia-jetson-nano.html</guid><description>NVIDIA Jetson Nano computer I had used Blender during my graduation at the Mackenzie University and started learning Blender 2.8+ again a few weeks ago. Unfortunately rendering the basic tutorials like Andrew Price&amp;rsquo;s donut takes several minutes on my old (but excellent for programming) Thinkpad T550 i7 16 GB with a simple Samsung SSD. The reason is that my GPU, a NVIDIA NVS 5400M with 2 GB memory and 96 cores cannot be used with Blender as it only supports CUDA 2.</description></item><item><title>Cyclic Workflows with Cylc and StackStorm</title><link>https://kinoshita.eti.br/2021/10/01/cyclic-workflows-with-cylc-and-stackstorm.html</link><pubDate>Fri, 01 Oct 2021 00:00:00 +0000</pubDate><guid>https://kinoshita.eti.br/2021/10/01/cyclic-workflows-with-cylc-and-stackstorm.html</guid><description>I am aware of only two workflow managers that support cyclic workflows. Cylc and StackStorm. I won&amp;rsquo;t enter into details about these two tools, but I must note that I worked on Cylc during my employment with NIWA, in New Zealand.
In this post I will only show a very simple workflow called five first using Cylc, and then the same workflow with StackStorm.
Cylc First let&amp;rsquo;s take a look at the source code of this workflow with Cylc 8 and plot it.</description></item><item><title>Using Lumino with Vue</title><link>https://kinoshita.eti.br/2020/03/28/using-lumino-with-vue.html</link><pubDate>Sat, 28 Mar 2020 00:00:00 +0000</pubDate><guid>https://kinoshita.eti.br/2020/03/28/using-lumino-with-vue.html</guid><description>&lt;p>&lt;a href="https://github.com/jupyterlab/lumino">Lumino&lt;/a> is the engine that powers the GUI of
&lt;a href="https://github.com/jupyterlab/jupyterlab/">JupyterLab&lt;/a>. It used to be called Phosphor JS,
but some time ago there was a misunderstanding and the author gave up maintaining it.
Then JupyterLab decided to fork it under this new name.&lt;/p>



&lt;figure class="feature">

 &lt;img
 src='https://kinoshita.eti.br/assets/posts/2020-03-28-using-lumino-with-vue/demo.gif'
 alt=''
 title=''
 style=''
 width=''
 height=''
 />
 &lt;figcaption>&lt;/figcaption>

&lt;/figure>


&lt;p>The documentation is still lacking, but it works as expected, and there is already a
community supporting it. We decided to use it in &lt;a href="https://github.com/cylc/cylc-ui">Cylc UI&lt;/a>
to have tabbed panels like JupyterLab.&lt;/p>
&lt;p>&lt;a href="https://github.com/kinow/vue-lumino">This project&lt;/a> contains the part of the code of
Cylc UI that integrated Lumino and Vue. It was a suggestion from one of the maintainers
of JupyterLab, that got involved in an issue of Cylc UI. You can find this project linked
too in the Lumino project &lt;code>README&lt;/code> file.&lt;/p></description></item><item><title>Experimenting with Vuejs and Cytoscape</title><link>https://kinoshita.eti.br/2019/11/19/experimenting-with-vuejs-and-cytoscape.html</link><pubDate>Tue, 19 Nov 2019 00:00:00 +0000</pubDate><guid>https://kinoshita.eti.br/2019/11/19/experimenting-with-vuejs-and-cytoscape.html</guid><description>&lt;p>The project I work on at work had a GUI interface with Python and PyGTK, which is now being
ported to the web. We have adopted Vuejs as the JS framework, and have been building the
components required for our UI over the past months. The project is hosted
&lt;a href="https://github.com/cylc/cylc-ui">on GitHub&lt;/a> licensed under GPLv3.&lt;/p>
&lt;p>In Cylc 7, an important visualization was the workflow graph. The screenshot below is from
the design sketches done by another contributor from the UK, showing how it should look in
Cylc 8.&lt;/p>



&lt;figure class="feature">

 &lt;img
 src='https://kinoshita.eti.br/assets/posts/2019-11-19-experimenting-with-vuejs-and-cytoscape/cylc8-sketch.png'
 alt=''
 title=''
 style=''
 width=''
 height=''
 />
 &lt;figcaption>&lt;/figcaption>

&lt;/figure>


&lt;p>The first library we decided to try is Cytoscape, a well-known graph library, with use cases
in research, corporate, and other fields. One limitation of Cytoscape is that the way it renders
the graph nodes is limited.&lt;/p>
&lt;p>Limited, meaning that you won&amp;rsquo;t be able to easily add HTML, images, SVG, animation, etc. Though
not impossible.&lt;/p></description></item><item><title>A look at the first implementation of GraphQL in Cylc</title><link>https://kinoshita.eti.br/2019/05/17/a-look-at-the-first-implementation-of-graphql-in-cylc.html</link><pubDate>Fri, 17 May 2019 00:00:00 +0000</pubDate><guid>https://kinoshita.eti.br/2019/05/17/a-look-at-the-first-implementation-of-graphql-in-cylc.html</guid><description>&lt;figure class="feature">

 &lt;img
 src='https://kinoshita.eti.br/assets/posts/2019-05-17-a-look-at-the-first-implementation-of-graphql-in-cylc/fancy-hands2.png'
 alt=''
 title=''
 style='float: right; width: 40%;'
 width=''
 height=''
 />
 &lt;figcaption>&lt;/figcaption>

&lt;/figure>


&lt;p>For Cylc 8 we are adding an initial implementation of GraphQL, to replace the previous REST API.
Besides the technologies in the API&amp;rsquo;s, another difference is that for the REST API, its main
consumer was a PyGTK GUI.&lt;/p>
&lt;p>The new GraphQL API, on the other hand, will be used mainly by a Vue.js Web application. So a
few things need to be done in a different way due to the jump from Desktop GUI to Web GUI.&lt;/p></description></item><item><title>Running fuzzers to find bugs</title><link>https://kinoshita.eti.br/2019/04/07/running-fuzzers-to-find-bugs.html</link><pubDate>Sun, 07 Apr 2019 00:00:00 +0000</pubDate><guid>https://kinoshita.eti.br/2019/04/07/running-fuzzers-to-find-bugs.html</guid><description>&lt;p>Fuzzifying is a technique used in automated tests to find bugs in programs with unexpected data. fuzzer is the name given to the program used for running these tests. Some fuzzers also generate random data used for the tests.&lt;/p>



&lt;figure class="feature">

 &lt;img
 src='https://kinoshita.eti.br/assets/posts/2019-04-07-running-fuzzers-to-find-bugs/stink-bug-smaller.png'
 alt=''
 title=''
 style=''
 width=''
 height=''
 />
 &lt;figcaption>&lt;/figcaption>

&lt;/figure></description></item><item><title>PyZMQ Basics - Part 1</title><link>https://kinoshita.eti.br/2019/03/30/pyzmq-basics-part-1.html</link><pubDate>Sat, 30 Mar 2019 00:00:00 +0000</pubDate><guid>https://kinoshita.eti.br/2019/03/30/pyzmq-basics-part-1.html</guid><description>&lt;a href="https://www.deviantart.com/kinow/art/Old-man-1-657521623" style="float: left;">



&lt;figure class="feature">

 &lt;img
 src='https://kinoshita.eti.br/assets/posts/2019-03-30-pyzmq-basics-part-1/old-man-1.png'
 alt=''
 title=''
 style=''
 width=''
 height=''
 />
 &lt;figcaption>&lt;/figcaption>

&lt;/figure>


&lt;p>I am working &lt;a href="https://cylc.github.io">on a project&lt;/a> that is adopting &lt;a href="http://zeromq.org/">ZeroMQ&lt;/a>.
This post series is for self understanding of PyZMQ, a ZeroMQ
&lt;a href="https://github.com/zeromq/libzmq">&lt;code>libzmq&lt;/code>&lt;/a> binding for Python.&lt;/p>
&lt;h2 id="what-is-zeromq">What is ZeroMQ?&lt;/h2>
&lt;p>ZeroMQ (or 0MQ, or ØMQ) is an Open Source library that provides building blocks for
communication in distributed applications. The communication can be between the threads
of a process, between process (inter-process), or via network protocols such as
TCP and UDP.&lt;/p>
&lt;p>It is optimized for performance, and has been used in many applications, giving users
a solid foundation to be used in their projects.&lt;/p></description></item><item><title>Creating a logo in Inkscape - process</title><link>https://kinoshita.eti.br/2019/02/16/creating-a-logo-in-inkscape-process.html</link><pubDate>Sat, 16 Feb 2019 00:00:00 +0000</pubDate><guid>https://kinoshita.eti.br/2019/02/16/creating-a-logo-in-inkscape-process.html</guid><description>&lt;p>This weekend I spent some computer time not writing or reading code,
but actually toying around with Inkscape to create a logo. While it
created using very simple operations in Inkscape, it took me quite
a while to remember the shortcuts and how to merge objects.&lt;/p>
&lt;p>This logo is not actually used. It was an entry to a call for proposals.&lt;/p>
&lt;h3 id="the-process">The Process&lt;/h3>
&lt;p>This post won&amp;rsquo;t have much text. It will be more screen shots of the
process with short commentaire.&lt;/p>



&lt;figure class="feature">

 &lt;img
 src='https://kinoshita.eti.br/assets/posts/2019-02-16-creating-a-logo-in-inkscape-process/01.png'
 alt=''
 title=''
 style=''
 width=''
 height=''
 />
 &lt;figcaption>&lt;/figcaption>

&lt;/figure></description></item><item><title>A couple of class diagrams of JupyterHub</title><link>https://kinoshita.eti.br/2018/10/06/a-couple-of-class-diagrams-of-jupyterhub.html</link><pubDate>Sat, 06 Oct 2018 00:00:00 +0000</pubDate><guid>https://kinoshita.eti.br/2018/10/06/a-couple-of-class-diagrams-of-jupyterhub.html</guid><description>&lt;p>Started on a new project last Monday. One of the tasks in this project involves a new design
for the Web layer. And as the application is quite similar to &lt;a href="https://jupyterhub.readthedocs.io/">JupyterHub&lt;/a>,
we are all learning more about its internal API and general system design.&lt;/p>
&lt;p>This post contains only two class diagrams created with PyCharm. One is actually a SQLAlchemy
ORM diagram, below.&lt;/p>
&lt;p style='text-align: center;'>
&lt;a href="https://kinoshita.eti.br/assets/posts{{page.path | remove: ".md" | remove: "_posts" }}/jupyterhub-sqlalchemy-graph.png">



&lt;figure class="feature">

 &lt;img
 src='https://kinoshita.eti.br/assets/posts/2018-10-06-a-couple-of-class-diagrams-of-jupyterhub/jupyterhub-sqlalchemy-graph.png'
 alt=''
 title=''
 style='display: inline; width: 100%;'
 width=''
 height=''
 />
 &lt;figcaption>&lt;/figcaption>

&lt;/figure>


&lt;/a>
&lt;/p></description></item><item><title>Cylc Scheduler Internals - Part 3</title><link>https://kinoshita.eti.br/2018/08/18/cylc-scheduler-internals-part-3.html</link><pubDate>Sat, 18 Aug 2018 00:00:00 +0000</pubDate><guid>https://kinoshita.eti.br/2018/08/18/cylc-scheduler-internals-part-3.html</guid><description>&lt;p>This is the part 3, in a series of posts about &lt;a href="https://cylc.github.io/cylc">Cylc&lt;/a>
internals. The [part 1]({% post_url 2018-07-14-cylc-scheduler-internals-part-1 %})
had the beginning of the workflow. [part 2]({% post_url 2018-07-27-cylc-scheduler-internals-part-2 %})
documented from the moment the method &lt;code>configure()&lt;/code> is called. This post will
continue right after the &lt;code>continue()&lt;/code> method returns, going on with the next method: &lt;code>run()&lt;/code>.&lt;/p>
&lt;p style='text-align: center;'>
&lt;a href="https://kinoshita.eti.br/assets/posts{{page.path | remove: ".md" | remove: "_posts" }}/cylc-scheduler_run.png">



&lt;figure class="feature">

 &lt;img
 src='https://kinoshita.eti.br/assets/posts/2018-08-18-cylc-scheduler-internals-part-3/cylc-scheduler_run.png'
 alt=''
 title=''
 style='display: inline; width: 100%;'
 width=''
 height=''
 />
 &lt;figcaption>&lt;/figcaption>

&lt;/figure>


&lt;/a>
&lt;/p></description></item><item><title>Use of Logging in Java Image Processing libraries</title><link>https://kinoshita.eti.br/2018/08/12/use-of-logging-in-java-image-processing-libraries.html</link><pubDate>Sun, 12 Aug 2018 00:00:00 +0000</pubDate><guid>https://kinoshita.eti.br/2018/08/12/use-of-logging-in-java-image-processing-libraries.html</guid><description>&lt;p>For &lt;a href="https://issues.apache.org/jira/browse/IMAGING-154">IMAGING-154&lt;/a> I was trying to think in a solution
for the &lt;a href="https://github.com/apache/commons-imaging/blob/d2ec76bd10f30c39ae5180ede1254908e76045f0/src/main/java/org/apache/commons/imaging/util/Debug.java">existing &lt;code>Debug&lt;/code>&lt;/a>
class. This class was the issue of discussion during a
&lt;a href="https://markmail.org/thread/ak3hcka7piykxixz#query:+page:1+mid:ppgxbhjx3opqlixj+state:results">previous 1.0 release vote thread&lt;/a>.&lt;/p></description></item><item><title>UUID's in Apache Jena</title><link>https://kinoshita.eti.br/2018/08/11/uuids-in-apache-jena.html</link><pubDate>Sat, 11 Aug 2018 00:00:00 +0000</pubDate><guid>https://kinoshita.eti.br/2018/08/11/uuids-in-apache-jena.html</guid><description>&lt;p>In this post I won&amp;rsquo;t talk about what are UUID&amp;rsquo;s, or how they work in Java.
&lt;a href="https://www.baeldung.com/java-uuid">Here&lt;/a>&amp;rsquo;s a great article on that. Or access the always reliable &lt;a href="https://en.wikipedia.org/wiki/Universally_unique_identifier">Wikipedia article&lt;/a>
about it. &lt;em>(or if you would rather, read the &lt;a href="http://www.ietf.org/rfc/rfc4122.txt">RFC 4122&lt;/a>)&lt;/em>&lt;/p>
&lt;p>I found out that Jena had UUID implementations after writing a
[previous post]({% post_url 2018-05-29-what-happens-when-you-create-a-new-dataset-in-apache-jena-fuseki %}).
And then decided to look into which UUID&amp;rsquo;s Jena has, and where these UUID&amp;rsquo;s
were used. This way I would either understand why Jena needed UUID&amp;rsquo;s, or
just be more educated in case I ever stumbled with a change in Jena that
required related work.&lt;/p></description></item><item><title>Creating a Docker container to run as a command</title><link>https://kinoshita.eti.br/2018/08/04/creating-a-docker-container-to-run-as-a-command.html</link><pubDate>Sat, 04 Aug 2018 00:00:00 +0000</pubDate><guid>https://kinoshita.eti.br/2018/08/04/creating-a-docker-container-to-run-as-a-command.html</guid><description>&lt;p>For the past two weeks at work I have been assigned to work on PHP projects. Though I used
PHP some time ago - especially with Code Igniter and Laravel - I have not used it in a few
years. And have been doing mostly Java nowadays.&lt;/p>
&lt;p>The complete project setup was done by co-workers. I had a PHP project, using Symfony, several
bundles and libraries, and Postgres. But it required just running a few commands to set up
AWS settings, and then fire up Docker Compose.&lt;/p></description></item><item><title>Cylc Scheduler Internals - Part 2</title><link>https://kinoshita.eti.br/2018/07/27/cylc-scheduler-internals-part-2.html</link><pubDate>Fri, 27 Jul 2018 00:00:00 +0000</pubDate><guid>https://kinoshita.eti.br/2018/07/27/cylc-scheduler-internals-part-2.html</guid><description>&lt;p>This is part 2, in a series of posts about &lt;a href="https://cylc.github.io/cylc">Cylc&lt;/a>
internals. The [part 1]({% post_url 2018-07-14-cylc-scheduler-internals-part-1 %})
had the beginning of the workflow. And here we will have the continuation, from
the moment the method &lt;code>configure()&lt;/code> is called.&lt;/p>
&lt;p>&lt;em>NB: this is a post to remember things, not really expecting to give someone enough
information to be able to hack the Cylc Scheduler (though you can and would have fun!).&lt;/em>&lt;/p>



&lt;figure class="feature">

 &lt;img
 src='https://kinoshita.eti.br/assets/posts/2018-07-27-cylc-scheduler-internals-part-2/cylc-scheduler_configure.png'
 alt=''
 title=''
 style='display: inline; width: 100%;'
 width=''
 height=''
 />
 &lt;figcaption>&lt;/figcaption>

&lt;/figure></description></item><item><title>Multithreaded code and Pandas</title><link>https://kinoshita.eti.br/2018/07/22/multithreaded-code-and-pandas.html</link><pubDate>Sun, 22 Jul 2018 00:00:00 +0000</pubDate><guid>https://kinoshita.eti.br/2018/07/22/multithreaded-code-and-pandas.html</guid><description>&lt;figure class="feature">

 &lt;img
 src='https://kinoshita.eti.br/assets/posts/2018-07-22-multithreaded-code-and-pandas/woman-looking-01.png'
 alt='Woman looking'
 title='Woman looking'
 style='float: left; height: 300px;'
 width=''
 height=''
 />
 &lt;figcaption>Woman looking&lt;/figcaption>

&lt;/figure>


&lt;p>Pandas provides high-performance data structures in Python. I think in Java there are
similar data structures in projects like Apache Commons Collections,
Google Guava, and also Trove.&lt;/p>
&lt;p>In the Java libraries thread-safety is always a must-have feature. Probably as it is quite
common for a Java program to have more than one thread, especially if the code runs in some
sort of web container.&lt;/p>
&lt;p>I recently learned that Pandas, on the other hand, does not guarantee any thread-safety.
I found that while reading an
&lt;a href="https://github.com/pandas-dev/pandas/issues/21150">issue about race condition in the &lt;code>IndexEngine&lt;/code>&lt;/a>,
and after preparing a pull request for that.&lt;/p></description></item><item><title>Cylc Scheduler Internals - Part 1</title><link>https://kinoshita.eti.br/2018/07/14/cylc-scheduler-internals-part-1.html</link><pubDate>Sat, 14 Jul 2018 00:00:00 +0000</pubDate><guid>https://kinoshita.eti.br/2018/07/14/cylc-scheduler-internals-part-1.html</guid><description>&lt;p>This is the first post in a series of three (or maybe four later) based on diagrams
I collected while debugging the Cylc scheduler. The scheduler is called by the &lt;code>cylc start&lt;/code>
utility.&lt;/p>
&lt;p>&lt;em>NB: this is a post to remember things, not really expecting to give someone enough
information to be able to hack the Cylc Scheduler (though you can and would have fun!).&lt;/em>&lt;/p>
&lt;p>Instead of going at length on what happens (and there is quite a bit happening when
you run &lt;code>cylc start my.suite&lt;/code>), I will use the following diagram, followed by a few paragraphs
to highlight certain parts. The code used was based on &lt;a href="https://github.com/cylc/cylc/tree/7.7.1">Cylc 7.7.1&lt;/a>.&lt;/p>



&lt;figure class="feature">

 &lt;img
 src='https://kinoshita.eti.br/assets/posts/2018-07-14-cylc-scheduler-internals-part-1/cylc-scheduler_cli-workflow.png'
 alt=''
 title=''
 style='display: inline; width: 100%;'
 width=''
 height=''
 />
 &lt;figcaption>&lt;/figcaption>

&lt;/figure></description></item><item><title>ImportError when debugging cylc in Eclipse</title><link>https://kinoshita.eti.br/2018/07/10/importerror-when-debugging-cylc-in-eclipse.html</link><pubDate>Tue, 10 Jul 2018 00:00:00 +0000</pubDate><guid>https://kinoshita.eti.br/2018/07/10/importerror-when-debugging-cylc-in-eclipse.html</guid><description>&lt;p>Since I started reading cylc&amp;rsquo;s source code in Eclipse to create some
sequence diagrams, I have not been able to debug it properly without
hitting errors in some part of the program execution.&lt;/p>
&lt;p>The error message was &lt;strong>_“ImportError: cannot import name &lt;em>remove_dead_weakref”&lt;/em>&lt;/strong>,
which was a bit enigmatic as I never heard about that function, but it seemed to be
something internal, or at least not from the project code base. And searching the Internet
did not help much.&lt;/p></description></item></channel></rss>