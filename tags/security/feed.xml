<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Security on kinow</title><link>https://kinoshita.eti.br/tags/security.html</link><description>Recent content in Security on kinow</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><copyright>Bruno P. Kinoshita All rights reserved</copyright><lastBuildDate>Sat, 07 Jun 2025 20:23:18 +0200</lastBuildDate><atom:link href="https://kinoshita.eti.br/tags/security/feed.xml" rel="self" type="application/rss+xml"/><item><title>Running fuzzers to find bugs</title><link>https://kinoshita.eti.br/2019/04/07/running-fuzzers-to-find-bugs.html</link><pubDate>Sun, 07 Apr 2019 00:00:00 +0000</pubDate><guid>https://kinoshita.eti.br/2019/04/07/running-fuzzers-to-find-bugs.html</guid><description>&lt;p>Fuzzifying is a technique used in automated tests to find bugs in programs with unexpected data. fuzzer is the name given to the program used for running these tests. Some fuzzers also generate random data used for the tests.&lt;/p>



&lt;figure class="feature">

 &lt;img
 src='https://kinoshita.eti.br/assets/posts/2019-04-07-running-fuzzers-to-find-bugs/stink-bug-smaller.png'
 alt=''
 title=''
 style=''
 width=''
 height=''
 />
 &lt;figcaption>&lt;/figcaption>

&lt;/figure></description></item><item><title>Quickly Verifying jar Signatures For ASF Releases</title><link>https://kinoshita.eti.br/2017/10/14/quickly-verifying-jar-signatures-for-asf-releases.html</link><pubDate>Sat, 14 Oct 2017 00:00:00 +0000</pubDate><guid>https://kinoshita.eti.br/2017/10/14/quickly-verifying-jar-signatures-for-asf-releases.html</guid><description>The release process within the Apache Software Foundation includes a series of steps. Amongst these steps is the voting process. In Apache Commons, the release instructions includes a note on artefact signatures.
During the course of the VOTE, make sure that one or more of the reviewers have verified the signatures and hash files included with the release artifacts. If no one specifically mentions having done that during the VOTE, ask on the dev list and make sure someone does this before you proceed with the release.</description></item><item><title>Securely using passwords with R</title><link>https://kinoshita.eti.br/2017/06/03/securely-using-passwords-with-r.html</link><pubDate>Sat, 03 Jun 2017 00:00:00 +0000</pubDate><guid>https://kinoshita.eti.br/2017/06/03/securely-using-passwords-with-r.html</guid><description>It is quite common to have code that needs to interact with another system, database, or third party application, and need to use some sort of credentials to securely communicate.
Most of the code I wrote in R, or reviewed, had normally no borders (from a system analysis perspective) with other systems, or basically just interacted with the file system to retrieve NetCDF or JSON files.
However, after I saw a comment in Reddit [1] some time ago about this, I decided to check what others used.</description></item><item><title>Using AWS MFA without a mobile phone</title><link>https://kinoshita.eti.br/2017/02/28/using-aws-mfa-without-a-mobile-phone.html</link><pubDate>Tue, 28 Feb 2017 00:00:00 +0000</pubDate><guid>https://kinoshita.eti.br/2017/02/28/using-aws-mfa-without-a-mobile-phone.html</guid><description>If you use AWS, the chances are that you use MFA - Multi-factor Authentication - to authenticate. I don&amp;rsquo;t like to install apps in my mobile phone, unless I need to, so having bought a new phone recently, I decided to find a replacement for Google Authenticator.
There are several command line utilities, browser extensions, libraries, and tools (free and paid) that implement the TOTP - time-based one-time password -, the standard required by Amazon for MFA authentication.</description></item><item><title>Learning afl and testing MapServer</title><link>https://kinoshita.eti.br/2016/02/27/learning-afl-and-testing-mapserver.html</link><pubDate>Sat, 27 Feb 2016 00:00:00 +0000</pubDate><guid>https://kinoshita.eti.br/2016/02/27/learning-afl-and-testing-mapserver.html</guid><description>&lt;p>&lt;a href="http://lcamtuf.coredump.cx/afl/">afl&lt;/a> is a fuzzer, an application that combines a series of algorithms
in order to try invoking programs with several different input values. It then analyses the application
execution flow given different test case scenarios.
You can read more about fuzzing at &lt;a href="https://www.owasp.org/index.php/Fuzzing">this OWASP page&lt;/a>, or in other
blogs that I also used while learning about afl &lt;a href="%22#1%22">1&lt;/a> &lt;a href="%22#2%22">2&lt;/a>&lt;/p>
&lt;p>At work we are using MapServer for serving WFS and WMS. And I am using it for the
&lt;a href="http://maps.nzoss.org.nz">NZ OpenStreetMap maps&lt;/a> too. MapServer is written in C++ and is normally
exposed as a CGI script, so I thought it was worth learning about afl and trying it on MapServer,
as in case it finds any interesting bug I can submit it to the MapServer project.&lt;/p></description></item><item><title>How does the Jenkins Credentials Plug-in store passwords?</title><link>https://kinoshita.eti.br/2015/09/07/how-does-the-jenkins-credentials-plug-in-store-passwords.html</link><pubDate>Mon, 07 Sep 2015 00:00:00 +0000</pubDate><guid>https://kinoshita.eti.br/2015/09/07/how-does-the-jenkins-credentials-plug-in-store-passwords.html</guid><description>Jenkins Credentials Plug-in manages credentials stored in Jenkins. These credentials can be used in many jobs and by plug-ins for executing SSH commands, authenticating to systems, or running other commands that need some sort of authentication or authorisation.
I recently used its API for the first time in the BioUno figshare Plug-in to store OAuth 1.0 credentials (consumer key, consumer secret, token key, token secret). This blog post has more details about how we used the plug-in, but this post is specifically on how the passwords are stored by Jenkins.</description></item></channel></rss>