<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Functional Programming on kinow</title><link>https://kinoshita.eti.br/tags/functional-programming.html</link><description>Recent content in Functional Programming on kinow</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><copyright>Bruno P. Kinoshita All rights reserved</copyright><lastBuildDate>Wed, 09 Oct 2024 18:17:16 +0200</lastBuildDate><atom:link href="https://kinoshita.eti.br/tags/functional-programming/feed.xml" rel="self" type="application/rss+xml"/><item><title>Learning with Open Source: Reviewing SVN commits log</title><link>https://kinoshita.eti.br/2013/02/10/learning-with-open-source-reviewing-svn-commits-log.html</link><pubDate>Sun, 10 Feb 2013 00:00:00 +0000</pubDate><guid>https://kinoshita.eti.br/2013/02/10/learning-with-open-source-reviewing-svn-commits-log.html</guid><description>&lt;p>Last year I became an &lt;a href="http://www.apache.org" title="Apache">Apache&lt;/a> committer, and dedicated most of my time learning the &lt;a href="http://incubator.apache.org/learn/theapacheway.html" title="The Apache Way">Apache way&lt;/a>, reading different mailing lists and getting used to the things a committer is supposed to know (voting process, keeping everything in the mailing list, and so it goes) and getting used to &lt;a href="http://commons.apache.org/functor" title="Apache Commons Functor">[functor]&lt;/a> API.&lt;/p>
&lt;p>In 2013 I hope I can help in the release of [functor], since Java and &lt;a href="http://reddit.com/r/functionalprogramming">functional programming&lt;/a> are getting a lot more of attention recently, probably due to the &lt;a href="http://openjdk.java.net/projects/lambda/" title="Project Lambda">project lambda&lt;/a>. But I also want to start contributing with the other components from commons (like &lt;a href="http://commons.apache.org/math/" title="Apache Commons Math">math&lt;/a>, &lt;a href="http://commons.apache.org/io/" title="Apache Commons IO">io&lt;/a>, &lt;a href="http://commons.apache.org/jcs/" title="Apache Commons JCS">jcs&lt;/a>) and other top level projects (&lt;a href="http://hadoop.apache.org/" title="Apache Hadoop">hadoop&lt;/a>, &lt;a href="http://nutch.apache.org/" title="Apache Nutch">nutch&lt;/a>, &lt;a href="http://lucene.apache.org/" title="Apache Lucene">lucene&lt;/a>).&lt;/p>
&lt;h4>Reviewing SVN commits log&lt;/h4>
&lt;p>&lt;a href="https://issues.apache.org/jira/browse/FUNCTOR-14" title="Apache Commons Functor - Issue 14">FUNCTOR-14&lt;/a> was created to enhance the &lt;a href="http://commons.apache.org/functor/apidocs/org/apache/commons/functor/generator/package-summary.html">generators API&lt;/a> in [functor]. I'd worked on &lt;a href="http://svn.apache.org/viewvc/commons/proper/functor/branches/generators-FUNCTOR-14/">a branch&lt;/a> for this issue, but needed some review in order to be able to merge it with the trunk. That's where you can see why Open Source is so awesome. Another Apache member, Matt Benson, created &lt;a href="http://svn.apache.org/viewvc/commons/proper/functor/branches/FUNCTOR-14-mm/">another branch&lt;/a> to work on the project structure, but also to review the generator API.&lt;/p>



&lt;figure class="feature">

 &lt;img
 src='https://kinoshita.eti.br/assets/posts/2013-02-10-learning-with-open-source-reviewing-svn-commits-log/feather_small.gif'
 alt=''
 title=''
 style=''
 width=''
 height=''
 />
 &lt;figcaption>&lt;/figcaption>

&lt;/figure></description></item><item><title>Using Apache Commons Functor functional interfaces with Java 8 lambdas</title><link>https://kinoshita.eti.br/2012/12/21/using-apache-commons-functor-functional-interfaces-with-java-8-lambdas.html</link><pubDate>Fri, 21 Dec 2012 00:00:00 +0000</pubDate><guid>https://kinoshita.eti.br/2012/12/21/using-apache-commons-functor-functional-interfaces-with-java-8-lambdas.html</guid><description>&lt;p>&lt;a href='http://commons.apache.org/sandbox/functor/'>Apache Commons Functor&lt;/a> (hereon [functor]) is an &lt;a href='http://commons.apache.org/'>Apache Commons&lt;/a> component that provides a functional programming API and several patterns implemented (visitor, generator, aggregator, etc). &lt;a href="http://openjdk.java.net/projects/lambda/" title="Java 8 lambda">Java 8&lt;/a> has several nice new features, including lambda expressions and &lt;a href="http://datumedge.blogspot.com.br/2012/06/java-8-lambdas.html">functional interfaces&lt;/a>. In Java 8, lambdas or lambdas expressions are &lt;a href="http://tronicek.blogspot.com.br/2007/12/closures-closure-is-form-of-anonymous_28.html">closures&lt;/a> that can be evaluated and behave like anonymous methods.&lt;/p>
&lt;p>Functional interfaces are interfaces with only one method. These interfaces can be used in lambdas and save you a lot of time from writing anonymous classes or even implementing the interfaces. [functor] provides several functional interfaces (thanks to &lt;a href="https://issues.apache.org/jira/browse/FUNCTOR-20">Matt Benson&lt;/a>). It hasn't been released yet, but there are some new examples in the project site, in the &lt;a href="http://svn.apache.org/viewvc/commons/proper/functor/trunk/" title="[functor] SVN trunk">trunk of the SVN&lt;/a>. I will use one of these examples to show how [functor] functional interfaces can be used in conjunction with Java 8 lambdas.&lt;/p>
&lt;p>After the example with [functor] in Java 8, I will explain how I am running Java 8 in Eclipse (it's kind of a &lt;a href="http://www.speaklikeabrazilian.com/expression/define?e=Gambiarra" title="Gambiarra">gambiarra&lt;/a>, but works well).&lt;/p></description></item><item><title>Ranges in Apache Commons Functor</title><link>https://kinoshita.eti.br/2012/01/22/ranges-in-apache-commons-functor.html</link><pubDate>Sun, 22 Jan 2012 00:00:00 +0000</pubDate><guid>https://kinoshita.eti.br/2012/01/22/ranges-in-apache-commons-functor.html</guid><description>&lt;p>This is a long post. So here is a &lt;strong>TL;DR&lt;/strong>:&lt;/p>
&lt;ul>
	&lt;li>Apache Commons Functor has no Double or Float Range (yet)&lt;/li>
	&lt;li>Apache Commons Functor IntegerRange and LongRange treat the low value as inclusive, and the high value as exclusive. How does that compare to other languages/APIs? (you will have to read to see some comparison)&lt;/li>
	&lt;li>Perl has support for characters ranges, perhaps we could implement it in Functor too?&lt;/li>
	&lt;li>In case we implemented a CharacterRange, it would have to be inclusive for both low and high limits. With 'z' being the last character, there wouldn't have a way to include Z with the current approach. Or we would have to make the CharacterRange a special one. What would go against &lt;a title="Liskov Substitution Principle" href="http://en.wikipedia.org/wiki/Liskov_substitution_principle">Liskov Substitution Principle&lt;/a>.&lt;/li>
	&lt;li>You can see a comparison table with Apache Commons Functor, other Java API's and other programming languages for ranges clicking &lt;a href="#ctable" title="Comparison table">here&lt;/a>.&lt;/li>
	&lt;li>It would be nice to have a clear distinction in Functor documentation among a Sequence, a Generator and a Range. While I was gathering material for this post, I found places using range, others using sequence, and in Apache Commons Functor, an IntegerRange is a Generator.&lt;/li>
&lt;/ul>
Now, if you have some spare time or curiosity, keep reading :-)</description></item></channel></rss>