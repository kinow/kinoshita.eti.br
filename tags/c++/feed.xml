<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>C++ on kinow</title><link>https://kinoshita.eti.br/tags/c++.html</link><description>Recent content in C++ on kinow</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><copyright>Bruno P. Kinoshita All rights reserved</copyright><lastBuildDate>Sat, 22 Jun 2024 15:35:38 +0200</lastBuildDate><atom:link href="https://kinoshita.eti.br/tags/c++/feed.xml" rel="self" type="application/rss+xml"/><item><title>Fixing Qt warning "QLayout: Attempting to add QLayout "" to QWidget "", which already has a layout"</title><link>https://kinoshita.eti.br/2017/04/02/fixing-qt-warning-qlayout-attempting-to-add-qlayout-to-qwidget-which-already-has-a-layout.html</link><pubDate>Sun, 02 Apr 2017 00:00:00 +0000</pubDate><guid>https://kinoshita.eti.br/2017/04/02/fixing-qt-warning-qlayout-attempting-to-add-qlayout-to-qwidget-which-already-has-a-layout.html</guid><description>If you ever started Krita 3.x in your command line, and had a look at the console output, you may noticed the following warning.
QLayout: Attempting to add QLayout &amp;quot;&amp;quot; to QWidget &amp;ldquo;&amp;rdquo;, which already has a layout
Krita recently announced the release of 3.1.3-alpha-2, and while testing I saw this warning and decided to investigate why this warning happens.
There was already a similar question posted on StackOverflow. And the best answer&amp;rsquo;s initial paragraph gave me a hint of what to look for.</description></item><item><title>Simulating less memory with ulimit</title><link>https://kinoshita.eti.br/2017/03/26/simulating-less-memory-with-ulimit.html</link><pubDate>Sun, 26 Mar 2017 00:00:00 +0000</pubDate><guid>https://kinoshita.eti.br/2017/03/26/simulating-less-memory-with-ulimit.html</guid><description>These days I was trying to reproduce a bug in Krita where it would crash when a user copied group layers between windows. It appeared that the user was getting a segmentation fault due to the user&amp;rsquo;s computer running out of memory.
I could not reproduce the issue, but my computer has 16 GB. The first thing that came to my mind was to create a virtual machine with less memory to reproduce the issue.</description></item><item><title>Contributing to Krita</title><link>https://kinoshita.eti.br/2017/01/03/contributing-to-krita.html</link><pubDate>Tue, 03 Jan 2017 00:00:00 +0000</pubDate><guid>https://kinoshita.eti.br/2017/01/03/contributing-to-krita.html</guid><description>As I mentioned in the [last post]({% post_url 2017-01-02-debugging-an-application-that-freezes-the-x-server %}), I have been learning Qt and using C and C++ again. Since I used C and C++ more during university (about 10 years ago, phew), decided to read real code.
I used Photoshop, Illustrator, and Fireworks a lot when I was younger and had more time to spend drawing. But some time ago I switched to Inkscape for vector graphics, which I use at work for presentations.</description></item><item><title>Debugging an application that freezes the X server</title><link>https://kinoshita.eti.br/2017/01/02/debugging-an-application-that-freezes-the-x-server.html</link><pubDate>Mon, 02 Jan 2017 00:00:00 +0000</pubDate><guid>https://kinoshita.eti.br/2017/01/02/debugging-an-application-that-freezes-the-x-server.html</guid><description>Some time ago, I decided to start writing C++ again, and picked Krita for that. Krita is written in C++ and Qt. The bug I was working on involved a memory issue when changing the UI.
The problem was that this UI change would result in, not only Krita, but the whole X server freezing. My set up was basically Ubuntu 16.04.1 LTS, with Eclipse, Qt5, and the latest version of Krita checked out via git.</description></item><item><title>Adding coverage reports in Jenkins with GoogleTest and gcovr</title><link>https://kinoshita.eti.br/2012/10/16/adding-coverage-reports-in-jenkins-with-googletest-and-gcovr.html</link><pubDate>Tue, 16 Oct 2012 00:00:00 +0000</pubDate><guid>https://kinoshita.eti.br/2012/10/16/adding-coverage-reports-in-jenkins-with-googletest-and-gcovr.html</guid><description>&lt;p>After the [last post]({% post_url 2012-10-11-jenkins-testlink-and-gtest-in-5-minutes-or-so %}) about
&lt;a href="http://code.google.com/p/googletest/">GoogleTest&lt;/a> and &lt;a href="http://www.teamst.org">TestLink&lt;/a> using
&lt;a href="https://wiki.jenkins-ci.org/display/JENKINS/TestLink+Plugin">Jenkins TestLink Plug-in&lt;/a>, I received an e-mail
asking about &lt;a href="http://en.wikipedia.org/wiki/Code_coverage">coverage&lt;/a> with GoogleTest and
&lt;a href="http://www.jenkins-ci.org">Jenkins&lt;/a>. I&amp;rsquo;ve just updated the
&lt;a href="https://github.com/kinow/gtest-tap-listener/blob/master/samples/Makefile">Makefile&lt;/a> in the samples
directory, of the &lt;a href="https://github.com/kinow/gtest-tap-listener">GoogleTest TAP listener project&lt;/a>,
to output coverage data.&lt;/p>
&lt;p>Basically, you have to add the compiler flags &lt;code>-fprofile-arcs -ftest-coverage&lt;/code> and link the executable with
&lt;code>-lgcov&lt;/code>. Take a look at the project&amp;rsquo;s Makefile and you&amp;rsquo;ll notice how simple it is. In order to have Jenkins
interpreting your coverage report, you&amp;rsquo;ll have to convert it to &lt;a href="http://cobertura.sourceforge.net">cobertura&lt;/a>
XML. There is a Python utility that can be used for this: &lt;a href="https://software.sandia.gov/trac/fast/wiki/gcovr">gcovr&lt;/a>.
Download it and copy it to somewhere where Jenkins can execute it (e.g.: &lt;code>/usr/local/bin&lt;/code>).&lt;/p>
&lt;p>Now, if you&amp;rsquo;ve followed the instructions from the previous post, you should have a job that reports your GoogleTest
tests from Jenkins to TestLink using the plug-in, and is downloading the source code from GitHub. Add an extra build
step (Shell) to execute &lt;code>gcovr&lt;/code>.&lt;/p></description></item><item><title>Jenkins, TestLink and GTest in 5 minutes (or so)</title><link>https://kinoshita.eti.br/2012/10/11/jenkins-testlink-and-gtest-in-5-minutes-or-so.html</link><pubDate>Thu, 11 Oct 2012 00:00:00 +0000</pubDate><guid>https://kinoshita.eti.br/2012/10/11/jenkins-testlink-and-gtest-in-5-minutes-or-so.html</guid><description>&lt;p>This is a 5 minutes guide on creating a job for a C++ project in &lt;a href="http://www.jenkins-ci.org" title="Jenkins CI">Jenkins&lt;/a> with &lt;a href="http://code.google.com/p/googletest" title="GoogleTest">GoogleTest&lt;/a> and reporting the test results back to &lt;a href="http://www.teamst.org" title="TestLink">TestLink&lt;/a>, with &lt;a href="https://wiki.jenkins-ci.org/display/JENKINS/TestLink+Plugin" title="Jenkins TestLink Plug-in">testlink-plugin&lt;/a>.&lt;/p>
&lt;h2 id="the-test-project-with-googletest">The test project with GoogleTest&lt;/h2>
&lt;p>For this simple guide we will use the samples that come with &lt;a href="https://github.com/kinow/gtest-tap-listener" title="GTest TAP Listener">GTest TAP Listener&lt;/a>. You can get the code from GitHub with &lt;code>git clone git://github.com/kinow/gtest-tap-listener.git&lt;/code>. Take a look at &lt;code>gtest-tap-listener/samples/src/&lt;/code>, there you will find two C++ files: &lt;code>gtest_main.cc&lt;/code> and &lt;code>gtest_testHelloWorld.cc&lt;/code>.&lt;/p>
&lt;p>&lt;code>gtest_main.cc&lt;/code> has the &lt;a href="http://code.google.com/p/googletest/wiki/Primer#Writing_the_main()_Function" title="GTest main function">main function&lt;/a>, and executes the test suite. And &lt;code>gtest_testHelloWorld.cc&lt;/code> has the test cases and tests. Take note of the test case and tests names.&lt;/p>



&lt;figure class="feature">

 &lt;img
 src='https://kinoshita.eti.br/assets/posts/2012-10-11-jenkins-testlink-and-gtest-in-5-minutes-or-so/screenshot_001.png'
 alt=''
 title=''
 style=''
 width=''
 height=''
 />
 &lt;figcaption>&lt;/figcaption>

&lt;/figure></description></item><item><title>Code to change your message in MSN messenger</title><link>https://kinoshita.eti.br/2009/03/22/code-to-change-your-message-in-msn-messenger.html</link><pubDate>Sun, 22 Mar 2009 00:00:00 +0000</pubDate><guid>https://kinoshita.eti.br/2009/03/22/code-to-change-your-message-in-msn-messenger.html</guid><description>I&amp;rsquo;ve always wanted to know how does the code to show what was I listening to looked like. I found it after installing XMPlay and XMPlay MSN Plug-in. The plug-in zip had the plug-in itself and its source code. And what a neat source code (-:.
Basically, you just send a message to the MSN UI API with a defined data structure. And to remove the message, just send again with an empty string.</description></item></channel></rss>