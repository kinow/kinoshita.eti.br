<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Software Quality on kinow</title><link>https://kinoshita.eti.br/tags/software-quality.html</link><description>Recent content in Software Quality on kinow</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><copyright>Bruno P. Kinoshita All rights reserved</copyright><lastBuildDate>Sat, 15 Feb 2025 21:30:56 +0100</lastBuildDate><atom:link href="https://kinoshita.eti.br/tags/software-quality/feed.xml" rel="self" type="application/rss+xml"/><item><title>Coverage report for a GitHub private repository with GitHub Actions</title><link>https://kinoshita.eti.br/2023/05/29/coverage-report-for-a-github-private-repository-with-github-actions.html</link><pubDate>Mon, 29 May 2023 20:36:52 +0300</pubDate><guid>https://kinoshita.eti.br/2023/05/29/coverage-report-for-a-github-private-repository-with-github-actions.html</guid><description>Normally when you add test coverage to a GitHub repository, the reporting part boils down to a simple call to some API that will post to a third-party external service like Coveralls or Codecov. Many are already on the GitHub Actions Market Place and a few lines of YAML are enough.
A Codecov coverage report We had to report the test coverage of a private GitHub repository of a project I am working on at the moment, that could not have integration with other services besides GitHub.</description></item><item><title>PermGen errors and java.lang.ClassCastException: com.sun.crypto.provider.AESCipher cannot be cast to javax.crypto.CipherSpi running Jenkins plug-in tests with PowerMock</title><link>https://kinoshita.eti.br/2016/12/19/permgen-errors-and-java.lang.classcastexception-com.sun.crypto.provider.aescipher-cannot-be-cast-to-javax.crypto.cipherspi-running-jenkins-plug-in-tests-with-powermock.html</link><pubDate>Mon, 19 Dec 2016 00:00:00 +0000</pubDate><guid>https://kinoshita.eti.br/2016/12/19/permgen-errors-and-java.lang.classcastexception-com.sun.crypto.provider.aescipher-cannot-be-cast-to-javax.crypto.cipherspi-running-jenkins-plug-in-tests-with-powermock.html</guid><description>Recently while working on a Jenkins plugin some tests were failing with PermGen errors. Even though it worked in my notebook at home (with Java 8, thus no Permgen), it failed in a CloudBees hosted Jenkins job, and also on my Mac (with Java 7) at work.
As I could not change the settings in the CloudBees hosted Jenkins, I decided to spent some time investigating why these tests would require so much memory.</description></item><item><title>Performance problems in Jenkins TAP Plug-in &amp;mdash; part 1</title><link>https://kinoshita.eti.br/2016/09/03/performance-problems-in-jenkins-tap-plug-in-mdash-part-1.html</link><pubDate>Sat, 03 Sep 2016 00:00:00 +0000</pubDate><guid>https://kinoshita.eti.br/2016/09/03/performance-problems-in-jenkins-tap-plug-in-mdash-part-1.html</guid><description>JENKINS-17887 reports performance problems in the Jenkins TAP Plug-in. It also lists a series of suggestions on how to improve the Jenkins TAP Plug-in performance. On this initial post, we will get a general idea of how the plug-in performs for large projects.
BioPerl has over 21K tests. That should be enough for giving an initial idea of CPU, memory and disk usage for the plug-in.
git clone https://github.com/bioperl/bioperl-live.git cd bioperl-live sudo cpanm -vv --installdeps --notest .</description></item><item><title>Learning afl and testing MapServer</title><link>https://kinoshita.eti.br/2016/02/27/learning-afl-and-testing-mapserver.html</link><pubDate>Sat, 27 Feb 2016 00:00:00 +0000</pubDate><guid>https://kinoshita.eti.br/2016/02/27/learning-afl-and-testing-mapserver.html</guid><description>&lt;p>&lt;a href="http://lcamtuf.coredump.cx/afl/">afl&lt;/a> is a fuzzer, an application that combines a series of algorithms
in order to try invoking programs with several different input values. It then analyses the application
execution flow given different test case scenarios.
You can read more about fuzzing at &lt;a href="https://www.owasp.org/index.php/Fuzzing">this OWASP page&lt;/a>, or in other
blogs that I also used while learning about afl &lt;a href="%22#1%22">1&lt;/a> &lt;a href="%22#2%22">2&lt;/a>&lt;/p>
&lt;p>At work we are using MapServer for serving WFS and WMS. And I am using it for the
&lt;a href="http://maps.nzoss.org.nz">NZ OpenStreetMap maps&lt;/a> too. MapServer is written in C++ and is normally
exposed as a CGI script, so I thought it was worth learning about afl and trying it on MapServer,
as in case it finds any interesting bug I can submit it to the MapServer project.&lt;/p></description></item><item><title>Running BDD tests from TestLink in Jenkins</title><link>https://kinoshita.eti.br/2012/11/07/running-bdd-tests-from-testlink-in-jenkins.html</link><pubDate>Wed, 07 Nov 2012 00:00:00 +0000</pubDate><guid>https://kinoshita.eti.br/2012/11/07/running-bdd-tests-from-testlink-in-jenkins.html</guid><description>&lt;p>Last night and this morning I spent some time working on running
&lt;a href="http://en.wikipedia.org/wiki/Behavior-driven_development">BDD&lt;/a> tests that were created in
&lt;a href="http://www.teamst.org">TestLink&lt;/a> in &lt;a href="http://jenkins-ci.org">Jenkins&lt;/a>, using
&lt;a href="https://wiki.jenkins-ci.org/display/JENKINS/TestLink+Plugin">testlink-plugin&lt;/a>.&lt;/p>
&lt;p>Similar integration has already been proposed in &lt;a href="http://www.sqaopen.net/blog/en/?tag=jinfeng">JinFeng&lt;/a>,
by Olivier Renault. Basically, you write BDD stories in TestLink (a story goes into the Test Case summary),
Jenkins retrieves these stories and executes them using a skeleton project.&lt;/p>



&lt;figure class="feature">

 &lt;img
 src='https://kinoshita.eti.br/assets/posts/2012-11-07-running-bdd-tests-from-testlink-in-jenkins/tl_bdd.png'
 alt=''
 title=''
 style=''
 width=''
 height=''
 />
 &lt;figcaption>&lt;/figcaption>

&lt;/figure>


&lt;p>There are many ways to use BDD. In some of them you write code like Java, Ruby or Perl, and in others you write a DSL. I started working with JBehave, but for this integration, I preferred to use a &lt;a href="http://en.wikipedia.org/wiki/Domain-specific_language" title="DSL">DSL&lt;/a> - as TestLink doesn&amp;rsquo;t maintain source code, only test cases -, so I switched to &lt;a href="http://www.easyb.org" title="easyb">easyb&lt;/a>.&lt;/p></description></item><item><title>Jenkins, TestLink and GTest in 5 minutes (or so)</title><link>https://kinoshita.eti.br/2012/10/11/jenkins-testlink-and-gtest-in-5-minutes-or-so.html</link><pubDate>Thu, 11 Oct 2012 00:00:00 +0000</pubDate><guid>https://kinoshita.eti.br/2012/10/11/jenkins-testlink-and-gtest-in-5-minutes-or-so.html</guid><description>&lt;p>This is a 5 minutes guide on creating a job for a C++ project in &lt;a href="http://www.jenkins-ci.org" title="Jenkins CI">Jenkins&lt;/a> with &lt;a href="http://code.google.com/p/googletest" title="GoogleTest">GoogleTest&lt;/a> and reporting the test results back to &lt;a href="http://www.teamst.org" title="TestLink">TestLink&lt;/a>, with &lt;a href="https://wiki.jenkins-ci.org/display/JENKINS/TestLink+Plugin" title="Jenkins TestLink Plug-in">testlink-plugin&lt;/a>.&lt;/p>
&lt;h2 id="the-test-project-with-googletest">The test project with GoogleTest&lt;/h2>
&lt;p>For this simple guide we will use the samples that come with &lt;a href="https://github.com/kinow/gtest-tap-listener" title="GTest TAP Listener">GTest TAP Listener&lt;/a>. You can get the code from GitHub with &lt;code>git clone git://github.com/kinow/gtest-tap-listener.git&lt;/code>. Take a look at &lt;code>gtest-tap-listener/samples/src/&lt;/code>, there you will find two C++ files: &lt;code>gtest_main.cc&lt;/code> and &lt;code>gtest_testHelloWorld.cc&lt;/code>.&lt;/p>
&lt;p>&lt;code>gtest_main.cc&lt;/code> has the &lt;a href="http://code.google.com/p/googletest/wiki/Primer#Writing_the_main()_Function" title="GTest main function">main function&lt;/a>, and executes the test suite. And &lt;code>gtest_testHelloWorld.cc&lt;/code> has the test cases and tests. Take note of the test case and tests names.&lt;/p>



&lt;figure class="feature">

 &lt;img
 src='https://kinoshita.eti.br/assets/posts/2012-10-11-jenkins-testlink-and-gtest-in-5-minutes-or-so/screenshot_001.png'
 alt=''
 title=''
 style=''
 width=''
 height=''
 />
 &lt;figcaption>&lt;/figcaption>

&lt;/figure></description></item><item><title>Paper: Patterns for Introducing a Superclass for Test Classes</title><link>https://kinoshita.eti.br/2012/09/25/paper-patterns-for-introducing-a-superclass-for-test-classes.html</link><pubDate>Tue, 25 Sep 2012 00:00:00 +0000</pubDate><guid>https://kinoshita.eti.br/2012/09/25/paper-patterns-for-introducing-a-superclass-for-test-classes.html</guid><description>Few days ago we had SugarLoafPlop 2012 in Natal - RN
It is a conference on pattern languages of programming. About six months ago I saw a tweet by Eduardo Guerra asking if anyone had some cases where certain patterns were applied. It was a big coincidence, since I was working on Apache Commons Functor and some Jenkins plugins, both projects with cases that could be used in his paper.</description></item><item><title>Testing shell code and producing TAP using Jenkins?</title><link>https://kinoshita.eti.br/2011/12/30/testing-shell-code-and-producing-tap-using-jenkins.html</link><pubDate>Fri, 30 Dec 2011 00:00:00 +0000</pubDate><guid>https://kinoshita.eti.br/2011/12/30/testing-shell-code-and-producing-tap-using-jenkins.html</guid><description>&lt;p>Definitely reading &lt;a title="Hacker News" href="http://news.ycombinator.com/">Hacker News&lt;/a> before going to bed is a bad idea :-) Same goes for &lt;a title="Reddit" href="http://www.reddit.com">Reddit&lt;/a>. So, I found a link about &lt;a title="Bats" href="https://github.com/sstephenson/bats">Bats&lt;/a>, a tool to execute tests in Shell and output &lt;a title="Test Anything Protocol" href="http://testanything.org">TAP&lt;/a> - Test Anything Protocol. Then I thought; why not ask the author to include Bats under the list of &lt;a title="TAP Producers" href="http://testanything.org/wiki/index.php/TAP_Producers#SH_.2F_Shell_Script">Producers&lt;/a> in &lt;a title="Test Anything Protocol" href="http://testanything.org">testanything.org&lt;/a>?&lt;/p>
&lt;p>But you know what? Why not execute execute locally first to check if that&amp;rsquo;s working&amp;hellip; moreover, why not use &lt;a title="Jenkins TAP Plug-in" href="https://wiki.jenkins-ci.org/display/JENKINS/TAP+Plugin">Jenkins TAP Plug-in&lt;/a> and see what happens?&lt;/p></description></item><item><title>TDC 2011 Goiânia</title><link>https://kinoshita.eti.br/2011/10/31/tdc-2011-goi%C3%A2nia.html</link><pubDate>Mon, 31 Oct 2011 00:00:00 +0000</pubDate><guid>https://kinoshita.eti.br/2011/10/31/tdc-2011-goi%C3%A2nia.html</guid><description>Here are the slides used in TDC 2011 - Goi&amp;acirc;nia. The same slides were used in the Testing and in the Java tracks, though with different titles. The only difference is the demo, that had more details in the latter track.
tdc_2011_goiania_ci by brunodepaulak This was the last talk of the year, I have two more articles to go (MundoJ and STP) and then it will be time to practice slackline, surfing and dedicate some time to my family.</description></item><item><title>Practical test doubles: adding stubs to TestLink Java API</title><link>https://kinoshita.eti.br/2011/10/23/practical-test-doubles-adding-stubs-to-testlink-java-api.html</link><pubDate>Sun, 23 Oct 2011 00:00:00 +0000</pubDate><guid>https://kinoshita.eti.br/2011/10/23/practical-test-doubles-adding-stubs-to-testlink-java-api.html</guid><description>&lt;p>&lt;em>"&lt;strong>Test Double&lt;/strong> is a generic term for any case where you replace a production object for testing purposes"&lt;/em> [&lt;a href="#1">1&lt;/a>]. There are different types of Test Doubles: &lt;strong>Dummy&lt;/strong>, &lt;strong>Fake&lt;/strong>, &lt;strong>Stubs&lt;/strong>, &lt;strong>Spies&lt;/strong> and &lt;strong>Mocks&lt;/strong>. In this post we will see a practical example of adding stubs to &lt;a href="testlinkjavaapi.sourceforge.net" title="TestLink Java API">TestLink Java API&lt;/a>.&lt;/p>
&lt;p>Stubs are objects that return canned answers to calls during tests [1]. This is useful specially when you have a system that communicates with different resources such as databases, web services, XML-RPC services and so on.&lt;/p>
&lt;p>TestLink Java API is a small Java project created to act as an interface between &lt;a href="http://www.teamst.org" title="TestLink">TestLink&lt;/a> XML-RPC API and a client program written in Java.&lt;/p></description></item><item><title>Missed JCertif</title><link>https://kinoshita.eti.br/2011/09/07/missed-jcertif.html</link><pubDate>Wed, 07 Sep 2011 00:00:00 +0000</pubDate><guid>https://kinoshita.eti.br/2011/09/07/missed-jcertif.html</guid><description>Unfortunately I missed JCertif last weekend. My visa was in Brazzaville but I couldn't board in a flight from Johannesburg to Congo without it. Max Bonbhel kindly tried to fax me the visa, but the last flight to Congo closed and I had to come back to Brazil sooner. :-(
Here is the slides that I was going to use there. Hope you take some time to read about TAP, SubUnit and other test protocols.</description></item><item><title>TDC 2011 Floripa presentation about running your tests in Jenkins</title><link>https://kinoshita.eti.br/2011/08/25/tdc-2011-floripa-presentation-about-running-your-tests-in-jenkins.html</link><pubDate>Thu, 25 Aug 2011 00:00:00 +0000</pubDate><guid>https://kinoshita.eti.br/2011/08/25/tdc-2011-floripa-presentation-about-running-your-tests-in-jenkins.html</guid><description>&lt;p>Last weekend I attended TDC (&lt;a title="The Developers Conference" href="http://www.thedevelopersconference.com.br">The Developers Conference&lt;/a>) 2011 in Florianópolis, in the south of Brazil. It was my first time in Florianópolis, but the weather was cloudy and cold, so I couldn&amp;rsquo;t check out one of the prettiest cities in Brazil :-( Bummer.&lt;/p>



&lt;figure class="feature">

 &lt;img
 src='https://kinoshita.eti.br/assets/posts/2011-08-25-tdc-2011-floripa-presentation-about-running-your-tests-in-jenkins/banner_TDC2011_floripapng'
 alt=''
 title=''
 style=''
 width=''
 height=''
 />
 &lt;figcaption>&lt;/figcaption>

&lt;/figure>


&lt;p>Putting the weather aside, TDC was great! Basically, there were many nice, easy-going people gathering together to talk about subjects like Java, SOA, Arduino, Testing, Agile and more. I had the chance to talk with skilled and experienced people, see different talks and catch up Guilherme Motta (&lt;a title="@gfcmotta" href="http://www.twitter.com/gfcmotta">@gfcmotta&lt;/a>) from &lt;a title="ThoughtWorks" href="http://www.thoughtworks.com">ThoughtWorks&lt;/a>, who I have met in Porto Alegre in the beginning of this year. He gave an interesting talk about crowd testing using games as example, but varying with applications in different areas too.&lt;/p></description></item><item><title>Bug hunting, new job and preparing presentations</title><link>https://kinoshita.eti.br/2011/08/13/bug-hunting-new-job-and-preparing-presentations.html</link><pubDate>Sat, 13 Aug 2011 00:00:00 +0000</pubDate><guid>https://kinoshita.eti.br/2011/08/13/bug-hunting-new-job-and-preparing-presentations.html</guid><description>It&amp;rsquo;s been a while since the last time I posted something here. The reason is that I have been busy fixing bugs in Jenkins TestLink Plug-in, TestLink, TestLink Java API, tap4j, Jenkins TAP Plug-in and other Open Source projects.
Recently I left Sysmap Solutions, where I was a consultant, to have my labor card signed by Lojas Riachuelo, a famous Brazilian fashion retailer (like C&amp;amp;A, Zara, H&amp;amp;M and so on), part of Guararapes group.</description></item><item><title>A comparison of TAP (Test Anything Protocol) and SubUnit</title><link>https://kinoshita.eti.br/2011/06/04/a-comparison-of-tap-test-anything-protocol-and-subunit.html</link><pubDate>Sat, 04 Jun 2011 00:00:00 +0000</pubDate><guid>https://kinoshita.eti.br/2011/06/04/a-comparison-of-tap-test-anything-protocol-and-subunit.html</guid><description>&lt;p>
 I have been playing with &lt;a href="http://www.testanything.org">TAP&lt;/a> for some time and even implemented a &lt;a
 href="http://www.tap4j.org">Java API&lt;/a> to let &lt;a href="http://www.testng.org">TestNG&lt;/a>, &lt;a
 href="http://www.junit.org">JUnit&lt;/a> and other Test Frameworks to produce and consume TAP. TAP is a standard
 format for test output that first appeared with Perl 1 in 1987. It is human and machine readable, easy to be
 serialized, language independent and extensible&lt;sup>&lt;a href="#1">1&lt;/a>&lt;/sup> through the use of &lt;a
 href="http://www.yaml.org">YAML&lt;/a>.
&lt;/p>
&lt;p>
 Some days ago while I was designing a plug-in to show TAP test results in &lt;a href="http://www.jenkins-ci.org">Jenkins&lt;/a>
 I stumbled across a message in &lt;a href="http://jenkins.361315.n4.nabble.com/Jenkins-dev-f387835.html">Jenkins
 dev-list&lt;/a> where Max Magee and Nick Wiesmueller were discussing about a way of showing more details about the test
 executions. I thought that the TAP Plug-in would fit perfectly, until one of the users, &lt;a
 href="https://launchpad.net/~lifeless">Robert Collins&lt;/a>, mentioned &lt;a href="https://launchpad.net/subunit">SubUnit&lt;/a>.
&lt;/p>
&lt;p>
 Shame on me, but I hadn't heard of SubUnit until that message. Max Magee and I exchanged some messages after that,
 talking about a initial design and analysis for the TAP Plug-in&lt;sup>&lt;a href="#2">2&lt;/a>&lt;/sup>. Here is the initial
 idea:
&lt;p>
&lt;ul>
 &lt;li>The plug-in will be able to parse one or more test formats (maybe SubUnit, TAP and the formats available in
 xUnit?).&lt;/li>
 &lt;li>The test results will be displayed the same way JUnit tests are displayed in Jenkins (I think Jenkins
 supports JUnit format by default, but you can use objects and create test results data, independently of the
 test framework that you are using).&lt;/li>
 &lt;li>There will be a table containing the Test Name, Description and Status and an expandable section.&lt;/li>
 &lt;li>Inside this expandable section will be available all the details about the test.&lt;/li>
 &lt;li>In case there are images within the test details, they should be displayed as a lightbox gallery.&lt;sup>&lt;a
 href="#3">3&lt;/a>&lt;/sup>&lt;/li>
&lt;/ul>
&lt;p>
 Although I have worked with TAP and spent some good time writing the tap4j port for Java, I am not convinced it is
 the best solution for this issue yet. Hence I am posting this initial comparison between TAP and SubUnit hoping that
 more people will contribute with the design of this solution. My goal is not only having a super cool plug-in for
 Jenkins, but ease integration of test results in different tools and collaborate with both TAP and SubUnit. Another
 objective that I have in mind is improving the way that test results are displayed in Jenkins and enabling it to be
 an alternative for tools like &lt;a href="http://sourceforge.net/projects/smolder/">Smolder&lt;/a>, &lt;a
 href="https://launchpad.net/testrepository">TestRepository&lt;/a> or &lt;a href="https://launchpad.net/tribunal">Tribunal&lt;/a>.
 Because I believe the tasks done by these tools could be all done in my favorite CI Server, and it would increase
 the productivity of Build &amp;amp; Release professionals :-))
&lt;/p></description></item><item><title>Faça seus Testes Falarem TAP (Make your Tests Speak TAP) article published in MundoJ, issue 47, March/April 2011</title><link>https://kinoshita.eti.br/2011/05/23/fa%C3%A7a-seus-testes-falarem-tap-make-your-tests-speak-tap-article-published-in-mundoj-issue-47-march/april-2011.html</link><pubDate>Mon, 23 May 2011 00:00:00 +0000</pubDate><guid>https://kinoshita.eti.br/2011/05/23/fa%C3%A7a-seus-testes-falarem-tap-make-your-tests-speak-tap-article-published-in-mundoj-issue-47-march/april-2011.html</guid><description>This is my first article for a Brazilian magazine! :-D It was published in this month&amp;rsquo;s issue of MundoJ magazine (previously called MundoJava).
In this article Cesar Fernandes de Almeida, Anderson dos Santos and I discuss how to make your Java tests output TAP (Test Anything Protocol) Streams. This test protocol has been used by Perl developers since Perl&amp;rsquo;s first version (1983~) but hasn&amp;rsquo;t been used by many Java developers yet, unfortunately.</description></item><item><title>Belgium Testing Days 2011 Pictures</title><link>https://kinoshita.eti.br/2011/03/25/belgium-testing-days-2011-pictures.html</link><pubDate>Fri, 25 Mar 2011 00:00:00 +0000</pubDate><guid>https://kinoshita.eti.br/2011/03/25/belgium-testing-days-2011-pictures.html</guid><description>Here are some pictures of the event. The presentation is available in http://www.belgiumtestingdays.com.
(Sorry, after migrating the server I lost some pictures. Will upload it again soon!)
Cheers!</description></item><item><title>TestLink and Hudson (now Jenkins) short tutorial in Automated Software Testing Magazine, issue March 2011</title><link>https://kinoshita.eti.br/2011/03/22/testlink-and-hudson-now-jenkins-short-tutorial-in-automated-software-testing-magazine-issue-march-2011.html</link><pubDate>Tue, 22 Mar 2011 00:00:00 +0000</pubDate><guid>https://kinoshita.eti.br/2011/03/22/testlink-and-hudson-now-jenkins-short-tutorial-in-automated-software-testing-magazine-issue-march-2011.html</guid><description>Hi there, a new article about TestLink and Hudson (now Jenkins) was published, now in Automated Software Testing Magazine, issue March 2011. In this article you will find a short tutorial to set up a TestNG test and a simple Job to execute your automated tests. Now we are writing a docbook document to explain with more details how the plug-in works and how you can play with it. We are also working in more samples, translation and video demos.</description></item><item><title>Discussing the flexibility of TAP to cover information generated by TestNG</title><link>https://kinoshita.eti.br/2011/03/20/discussing-the-flexibility-of-tap-to-cover-information-generated-by-testng.html</link><pubDate>Sun, 20 Mar 2011 00:00:00 +0000</pubDate><guid>https://kinoshita.eti.br/2011/03/20/discussing-the-flexibility-of-tap-to-cover-information-generated-by-testng.html</guid><description>&lt;p>In today's post I am expanding the previous one regarding the use of &lt;a title="TAP (Test Anything Protocol)" href="http://www.testanything.org">TAP&lt;/a> with &lt;a title="TestNG" href="http://www.testng.org">TestNG&lt;/a>. Let's discuss about the flexibility of TAP to cover information generated by TestNG, more specifically:&lt;/p>
&lt;ul>
	&lt;li>Expected Exceptions&lt;/li>
	&lt;li>Data Providers&lt;/li>
	&lt;li>Groups&lt;/li>
	&lt;li>Tests that get skipped&lt;/li>
	&lt;li>Dependencies&lt;/li>
&lt;/ul>
&lt;p>We will be addressing these bullet points using &lt;a title="tap4j" href="http://tap4j.sourceforge.net">tap4j&lt;/a>, a TAP implementation for Java. The integration between TAP and TestNG is done through the use of TestNG Listeners developed in tap4j project (a big thanks here to &lt;a title="Cesar Fernandes de Almeida" href="http://www.cesinha.com">Cesar Fernandes de Almeida&lt;/a> for all his help).&lt;/p>
&lt;p>There are two listeners in tap4j, &lt;a title="br.eti.kinoshita.tap4j.ext.testng.TestTAPReporter" href="https://github.com/kinow/tap4j/blob/master/src/main/java/org/tap4j/ext/testng/TestTAPReporter.java">br.eti.kinoshita.tap4j.ext.testng.TestTAPReporter&lt;/a> and &lt;a title="br.eti.kinoshita.tap4j.ext.testng.SuiteTAPReporter" href="https://github.com/kinow/tap4j/blob/master/src/main/java/br/eti/kinoshita/tap4j/ext/testng/SuiteTAPReporter.java">br.eti.kinoshita.tap4j.ext.testng.SuiteTAPReporter&lt;/a>. The first was created based on &lt;a title="org.testng.reporters.TestHTMLReporter" href="https://github.com/cbeust/testng/blob/master/src/main/java/org/testng/reporters/TestHTMLReporter.java">org.testng.reporters.TestHTMLReporter&lt;/a> and the latter was created based on &lt;a title="org.testng.reporters.SuiteHTMLReporter" href="https://github.com/cbeust/testng/blob/master/src/main/java/org/testng/reporters/SuiteHTMLReporter.java">org.testng.reporters.SuiteHTMLReporter&lt;/a>.&lt;/p>



&lt;figure class="feature">

 &lt;img
 src='https://kinoshita.eti.br/assets/posts/2011-03-20-discussing-the-flexibility-of-tap-to-cover-information-generated-by-testng/unnamed0.jpg'
 alt=''
 title=''
 style=''
 width=''
 height=''
 />
 &lt;figcaption>&lt;/figcaption>

&lt;/figure>


&lt;p style="text-align: center;">&lt;em>&lt;span style="color: #999999; font-size: 0.8em;">In this figure you have testing tools as TAP producers (left) and different types of applications as consumers (right)&lt;/span>&lt;/em>&lt;/p></description></item><item><title>Getting the maximum from TestNG with TAP</title><link>https://kinoshita.eti.br/2011/03/10/getting-the-maximum-from-testng-with-tap.html</link><pubDate>Thu, 10 Mar 2011 00:00:00 +0000</pubDate><guid>https://kinoshita.eti.br/2011/03/10/getting-the-maximum-from-testng-with-tap.html</guid><description>&lt;p>Strangely enough, today I decided start to write about &lt;a href="http://www.testanything.org">TAP&lt;/a> (Test Anything Protocol) and received a mail from a &lt;a href="http://www.linkedin.com">Linkedin&lt;/a> Group with a white paper about data integration in information systems. Well, let me first explain what is TAP, or Test Anything Protocol. This protocol was created in the beginning of Perl to log test results and is still being used by Perl and other languages (&lt;a href="https://github.com/sebastianbergmann/phpunit/">PHPUnit&lt;/a> can output TAP too, for instance).&lt;/p>
&lt;p>Now, if you already know about TAP and YAML, or if you are like me and like trying things out before reading a long text, then go to the &lt;a href="#hammertime">hands on part&lt;/a> of this post.&lt;/p>
&lt;p>An output in TAP, or a TAP stream, is written in pure text in a human readable way. Like follows:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>TAP version &lt;span style="color:#1c01ce">13&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>1..2
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>ok &lt;span style="color:#1c01ce">1&lt;/span> Test &lt;span style="color:#1c01ce">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>not ok &lt;span style="color:#1c01ce">2&lt;/span> Missing &lt;span style="color:#a90d91">test&lt;/span> parameter: url
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>Belgium Testing Days 2011: Manage automated tests with TestLink and Hudson/Jenkins</title><link>https://kinoshita.eti.br/2011/02/25/belgium-testing-days-2011-manage-automated-tests-with-testlink-and-hudson/jenkins.html</link><pubDate>Fri, 25 Feb 2011 00:00:00 +0000</pubDate><guid>https://kinoshita.eti.br/2011/02/25/belgium-testing-days-2011-manage-automated-tests-with-testlink-and-hudson/jenkins.html</guid><description>Slides used at Belgium Testing Days 2011: Manage automated tests with TestLink and Hudson/Jenkins
Belgium Testing Days 2011: Manage automated tests with TestLink and Hudson&amp;#x2F;Jenkins by brunodepaulak
Cheers</description></item></channel></rss>