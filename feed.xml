<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.9.0">Jekyll</generator><link href="https://kinoshita.eti.br/feed.xml" rel="self" type="application/atom+xml" /><link href="https://kinoshita.eti.br/" rel="alternate" type="text/html" /><updated>2021-10-08T15:42:13+13:00</updated><id>https://kinoshita.eti.br/feed.xml</id><title type="html">kinow</title><subtitle>Bruno Kinoshita “kinow” personal home page</subtitle><entry><title type="html">Cyclic Workflows with Cylc and StackStorm</title><link href="https://kinoshita.eti.br/2021/10/01/cyclic-workflows-with-cylc-and-stackstorm.html" rel="alternate" type="text/html" title="Cyclic Workflows with Cylc and StackStorm" /><published>2021-10-01T00:00:00+13:00</published><updated>2021-10-01T00:00:00+13:00</updated><id>https://kinoshita.eti.br/2021/10/01/cyclic-workflows-with-cylc-and-stackstorm</id><content type="html" xml:base="https://kinoshita.eti.br/2021/10/01/cyclic-workflows-with-cylc-and-stackstorm.html">&lt;p&gt;I am aware of only two workflow managers that support cyclic workflows.
&lt;a href=&quot;https://cylc.github.io/&quot;&gt;Cylc&lt;/a&gt; and &lt;a href=&quot;https://stackstorm.com/&quot;&gt;StackStorm&lt;/a&gt;. I won’t
enter into details about these two tools, but I must note that I worked on Cylc
during my employment with NIWA, in New Zealand.&lt;/p&gt;

&lt;p&gt;In this post I will only show a very simple workflow called &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;five&lt;/code&gt; first using
Cylc, and then the same workflow with StackStorm.&lt;/p&gt;

&lt;h2 id=&quot;cylc&quot;&gt;Cylc&lt;/h2&gt;

&lt;p&gt;First let’s take a look at the source code of this workflow with Cylc 8 and plot it.&lt;/p&gt;

&lt;div class=&quot;language-ini highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nn&quot;&gt;[scheduling]&lt;/span&gt;
  &lt;span class=&quot;err&quot;&gt;cycling&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;mode&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;integer&lt;/span&gt;
  &lt;span class=&quot;err&quot;&gt;initial&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;cycle&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;point&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;1&lt;/span&gt;
  &lt;span class=&quot;nn&quot;&gt;[[queues]&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;]&lt;/span&gt;
     &lt;span class=&quot;nn&quot;&gt;[[[default]&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;]]&lt;/span&gt;
       &lt;span class=&quot;py&quot;&gt;limit&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;1&lt;/span&gt;
  &lt;span class=&quot;nn&quot;&gt;[[graph]&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;py&quot;&gt;R1&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;prep =&amp;gt; foo&quot;&lt;/span&gt;
    &lt;span class=&quot;py&quot;&gt;P1&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;foo[-P1] =&amp;gt; foo =&amp;gt; bar&quot;&lt;/span&gt;

&lt;span class=&quot;nn&quot;&gt;[runtime]&lt;/span&gt;
  &lt;span class=&quot;nn&quot;&gt;[[root]&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;]&lt;/span&gt;
      &lt;span class=&quot;py&quot;&gt;script&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;sleep 5&quot;&lt;/span&gt;
  &lt;span class=&quot;nn&quot;&gt;[[prep]&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;]&lt;/span&gt;
  &lt;span class=&quot;nn&quot;&gt;[[foo]&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;]&lt;/span&gt;
  &lt;span class=&quot;nn&quot;&gt;[[bar]&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The part &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&quot;foo[-P1] =&amp;gt; foo =&amp;gt; bar&quot;&lt;/code&gt; is where the recursion occurs, creating
a cycle in the workflow.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/posts/2021-10-01-cyclic-workflows-with-cylc-and-stackstorm/five-graph-cylc.png&quot; alt=&quot;workflow five plot - cylc&quot; class=&quot;center-aligned&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Installing Cylc requires just &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pip install cylc-flow&lt;/code&gt;. After that, with the workflow
installed, we are ready to run it.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;cylc &lt;span class=&quot;nb&quot;&gt;install&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-c&lt;/span&gt; ~/cylc-src/five &lt;span class=&quot;nt&quot;&gt;--flow-name&lt;/span&gt; five
cylc play &lt;span class=&quot;nt&quot;&gt;--no-detach&lt;/span&gt; five/run1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The workflow will run forever, incrementing the cycle points, and triggering the tasks
in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;five&lt;/code&gt; workflow source. So you will have &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;foo.1&lt;/code&gt; (foo in the first cycle point),
that triggers both &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bar.1&lt;/code&gt; and also &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;foo.2&lt;/code&gt; (foo in the second cycle point) and so it
goes.&lt;/p&gt;

&lt;h2 id=&quot;stackstorm&quot;&gt;StackStorm&lt;/h2&gt;

&lt;p&gt;StackStorm requires more work to get everything up and running. Luckily they provide
a Docker Compose installation. So after the servers have been started with Docker
we are ready to create a “pack” (a neat way to organize separate installation files).&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;mkdir&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; /opt/stackstorm/packs/kinow/
&lt;span class=&quot;nb&quot;&gt;touch&lt;/span&gt; /opt/stackstorm/packs/kinow/pack.yaml
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nn&quot;&gt;---&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;name &lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;kinow&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;description&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;kinow&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;version&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;1.0.0&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;author&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;kinow&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;email&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;kinow@localhost&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;And install the new pack.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;st2 pack &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;file:///opt/stackstorm/packs/kinow
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now we create a new workflow and an action to run the workflow — I think
this step is optional, and you could have just an action but I was following
one section of the docs that had it this way.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;mkdir&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; /opt/stackstorm/packs/kinow/actions/workflows
&lt;span class=&quot;nb&quot;&gt;touch&lt;/span&gt; /opt/stackstorm/packs/kinow/actions/five.yaml
&lt;span class=&quot;nb&quot;&gt;touch&lt;/span&gt; /opt/stackstorm/packs/kinow/actions/workflows/five.yaml
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nn&quot;&gt;---&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;five&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;pack&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;kinow&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;description&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;five&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;runner_type&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;orquesta&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;entry_point&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;workflows/five.yaml&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;enabled&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;true&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;And now create the action in StackStorm, so we can run it via command line
or with the UI.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;st2 action create /opt/stackstorm/packs/kinow/actions/five.yaml 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;And here’s the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;five&lt;/code&gt; workflow source for StackStorm, producing something very
similar (if no identical) to the graph produced by Cylc 8.&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;version&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1.0&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;description&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;five&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;tasks&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;prep&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;action&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;core.local cmd=&quot;sleep 5&quot;&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;when&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;lt;% succeeded() %&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;do&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
          &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;foo&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;action&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;core.local cmd=&quot;sleep 5&quot;&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;when&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;lt;% succeeded() %&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;do&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
          &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;foo&lt;/span&gt;
          &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;bar&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;bar&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;action&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;core.local cmd=&quot;sleep 5&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Note that &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;foo&lt;/code&gt; is calling itself, creating a cycle in the workflow. And to run the
workflow:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;st2 run kinow.five
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The StackStorm UI does not appear to support showing the graph of the workflow
static or dynamically. But there is a community contributed UI called
&lt;a href=&quot;https://github.com/trstruth/rehearsal/&quot;&gt;rehearsal&lt;/a&gt; that plots an Orquesta
workflow given its source.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/posts/2021-10-01-cyclic-workflows-with-cylc-and-stackstorm/five-graph-stackstorm-rehearsal.png&quot; alt=&quot;workflow five plot - stackstorm&quot; class=&quot;center-aligned&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;final-notes&quot;&gt;Final notes&lt;/h2&gt;

&lt;p&gt;Both Cylc and StackStorm support Directed Cyclic Graphs in workflows, which is
really rare amongst workflow managers (or workflow standards, as I think WDL/CWL
also do not support cyclic workflows yet.)&lt;/p&gt;

&lt;p&gt;There are many pros and cons for each tool but that will have to be for a future
post. To finish this post here’s a screenshot of the StackStorm UI, followed by
one of the Cylc 8 UI. Both showing the workflow &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;five&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/posts/2021-10-01-cyclic-workflows-with-cylc-and-stackstorm/stackstorm-ui.png&quot; alt=&quot;stackstorm ui&quot; class=&quot;center-aligned&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/posts/2021-10-01-cyclic-workflows-with-cylc-and-stackstorm/cylc-ui.png&quot; alt=&quot;stackstorm ui&quot; class=&quot;center-aligned&quot; /&gt;&lt;/p&gt;</content><author><name></name></author><category term="blog" /><category term="opensource" /><category term="cylc" /><summary type="html">I am aware of only two workflow managers that support cyclic workflows. Cylc and StackStorm. I won’t enter into details about these two tools, but I must note that I worked on Cylc during my employment with NIWA, in New Zealand. In this post I will only show a very simple workflow called five first using Cylc, and then the same workflow with StackStorm. Cylc First let’s take a look at the source code of this workflow with Cylc 8 and plot it. [scheduling] cycling mode = integer initial cycle point = 1 [[queues]] [[[default]]] limit = 1 [[graph]] R1 = &quot;prep =&amp;gt; foo&quot; P1 = &quot;foo[-P1] =&amp;gt; foo =&amp;gt; bar&quot; [runtime] [[root]] script=&quot;sleep 5&quot; [[prep]] [[foo]] [[bar]] The part &quot;foo[-P1] =&amp;gt; foo =&amp;gt; bar&quot; is where the recursion occurs, creating a cycle in the workflow. Installing Cylc requires just pip install cylc-flow. After that, with the workflow installed, we are ready to run it. cylc install -c ~/cylc-src/five --flow-name five cylc play --no-detach five/run1 The workflow will run forever, incrementing the cycle points, and triggering the tasks in the five workflow source. So you will have foo.1 (foo in the first cycle point), that triggers both bar.1 and also foo.2 (foo in the second cycle point) and so it goes. StackStorm StackStorm requires more work to get everything up and running. Luckily they provide a Docker Compose installation. So after the servers have been started with Docker we are ready to create a “pack” (a neat way to organize separate installation files). mkdir -p /opt/stackstorm/packs/kinow/ touch /opt/stackstorm/packs/kinow/pack.yaml --- name : kinow description: kinow version: 1.0.0 author: kinow email: kinow@localhost And install the new pack. st2 pack install file:///opt/stackstorm/packs/kinow Now we create a new workflow and an action to run the workflow — I think this step is optional, and you could have just an action but I was following one section of the docs that had it this way. mkdir -p /opt/stackstorm/packs/kinow/actions/workflows touch /opt/stackstorm/packs/kinow/actions/five.yaml touch /opt/stackstorm/packs/kinow/actions/workflows/five.yaml --- name: five pack: kinow description: five runner_type: orquesta entry_point: workflows/five.yaml enabled: true And now create the action in StackStorm, so we can run it via command line or with the UI. st2 action create /opt/stackstorm/packs/kinow/actions/five.yaml And here’s the five workflow source for StackStorm, producing something very similar (if no identical) to the graph produced by Cylc 8. version: 1.0 description: five tasks: prep: action: core.local cmd=&quot;sleep 5&quot; next: - when: &amp;lt;% succeeded() %&amp;gt; do: - foo foo: action: core.local cmd=&quot;sleep 5&quot; next: - when: &amp;lt;% succeeded() %&amp;gt; do: - foo - bar bar: action: core.local cmd=&quot;sleep 5&quot; Note that foo is calling itself, creating a cycle in the workflow. And to run the workflow: st2 run kinow.five The StackStorm UI does not appear to support showing the graph of the workflow static or dynamically. But there is a community contributed UI called rehearsal that plots an Orquesta workflow given its source. Final notes Both Cylc and StackStorm support Directed Cyclic Graphs in workflows, which is really rare amongst workflow managers (or workflow standards, as I think WDL/CWL also do not support cyclic workflows yet.) There are many pros and cons for each tool but that will have to be for a future post. To finish this post here’s a screenshot of the StackStorm UI, followed by one of the Cylc 8 UI. Both showing the workflow five.</summary></entry><entry><title type="html">Random traffic light</title><link href="https://kinoshita.eti.br/2021/04/06/random-traffic-light.html" rel="alternate" type="text/html" title="Random traffic light" /><published>2021-04-06T00:00:00+12:00</published><updated>2021-04-06T00:00:00+12:00</updated><id>https://kinoshita.eti.br/2021/04/06/random-traffic-light</id><content type="html" xml:base="https://kinoshita.eti.br/2021/04/06/random-traffic-light.html">&lt;p&gt;From a reference photo found &lt;a href=&quot;https://twitter.com/BlackLCult/status/1376896997647646720&quot;&gt;on Twitter&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/pages/art/images/random-traffic-light.png&quot; alt=&quot;Gouache painting of a random traffic light&quot; class=&quot;center-aligned&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/posts/2021-04-06-random-traffic-light/ExroxZAWgAIQq1M.jpeg&quot; alt=&quot;Original photograph from Twitter&quot; class=&quot;center-aligned&quot; /&gt;&lt;/p&gt;</content><author><name></name></author><category term="painting" /><category term="painting" /><category term="gouache" /><category term="ink pen" /><summary type="html">From a reference photo found on Twitter.</summary></entry><entry><title type="html">Tufted Titmouse</title><link href="https://kinoshita.eti.br/2021/04/05/tufted-titmouse.html" rel="alternate" type="text/html" title="Tufted Titmouse" /><published>2021-04-05T00:00:00+12:00</published><updated>2021-04-05T00:00:00+12:00</updated><id>https://kinoshita.eti.br/2021/04/05/tufted-titmouse</id><content type="html" xml:base="https://kinoshita.eti.br/2021/04/05/tufted-titmouse.html">&lt;p&gt;From a reference photo by &lt;a href=&quot;https://twitter.com/ioannismou/status/1378365876878069761&quot;&gt;Ioannis Moutsatsos&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/pages/art/images/tufted-titmouse.png&quot; alt=&quot;Drawing of a Tufted Titmouse on a fence&quot; class=&quot;center-aligned&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/posts/2021-04-05-tufted-titmouse/EyDv6GkXMAEF36-.jpeg&quot; alt=&quot;Original photograph of the Tufted Titmouse by Ioannis Moutsatsos&quot; class=&quot;center-aligned&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Painted using recently learned techniques after watching a video
by &lt;a href=&quot;https://www.youtube.com/watch?v=ZrJrNGpl9-c&amp;amp;list=PLPXRG6jaep0VJfm_nuD-F_aifQLbkv34D&amp;amp;index=11&quot;&gt;Sarah Burns Studio&lt;/a&gt;,
and also other mixed media technique from a &lt;a href=&quot;https://www.domestika.org/en/courses/1434-pictorial-sketchbook-with-gouache/course&quot;&gt;Domestika course by Maru Godas&lt;/a&gt;.&lt;/p&gt;</content><author><name></name></author><category term="painting" /><category term="painting" /><category term="gouache" /><category term="colored pencils" /><summary type="html">From a reference photo by Ioannis Moutsatsos. Painted using recently learned techniques after watching a video by Sarah Burns Studio, and also other mixed media technique from a Domestika course by Maru Godas.</summary></entry><entry><title type="html">Bezerra da Silva</title><link href="https://kinoshita.eti.br/2021/03/27/bezerra-da-silva.html" rel="alternate" type="text/html" title="Bezerra da Silva" /><published>2021-03-27T00:00:00+13:00</published><updated>2021-03-27T00:00:00+13:00</updated><id>https://kinoshita.eti.br/2021/03/27/bezerra-da-silva</id><content type="html" xml:base="https://kinoshita.eti.br/2021/03/27/bezerra-da-silva.html">&lt;p&gt;Created with Staedtler colored pencils, then digitalized and post-processed
in GIMP. Used a photo for reference.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/pages/art/images/bezerra-03.png&quot; alt=&quot;Drawing of Bezerra da Silva&quot; class=&quot;center-aligned&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/posts/2021-03-27-bezerra-da-silva/bezerra-03-pre.png&quot; alt=&quot;Drawing of Bezerra da Silva in red colored pencil&quot; class=&quot;center-aligned&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Used in Speak Like A Brazilian in &lt;a href=&quot;https://speaklikeabrazilian.com/blog/2019/09/21/brazilian-portuguese-expressions-in-songs-bezerra-da-silva-malandro-%C3%A9-malandro-e-man%C3%A9-%C3%A9-man%C3%A9.html&quot;&gt;this post&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/posts/2021-03-27-bezerra-da-silva/Screen Shot 2021-03-30 at 15.31.32-fullpage.png&quot; alt=&quot;Drawing of Bezerra da Silva in Speak Like A Brazilian screenshot&quot; class=&quot;center-aligned&quot; /&gt;&lt;/p&gt;</content><author><name></name></author><category term="editorial illustration" /><summary type="html">Created with Staedtler colored pencils, then digitalized and post-processed in GIMP. Used a photo for reference. Used in Speak Like A Brazilian in this post.</summary></entry><entry><title type="html">Figurative drawing line of action 2021-03-11</title><link href="https://kinoshita.eti.br/2021/03/11/figurative-drawing-line-of-action-2021-03-11.html" rel="alternate" type="text/html" title="Figurative drawing line of action 2021-03-11" /><published>2021-03-11T00:00:00+13:00</published><updated>2021-03-11T00:00:00+13:00</updated><id>https://kinoshita.eti.br/2021/03/11/figurative-drawing-line-of-action-2021-03-11</id><content type="html" xml:base="https://kinoshita.eti.br/2021/03/11/figurative-drawing-line-of-action-2021-03-11.html">&lt;p&gt;&lt;img src=&quot;/assets/pages/art/images/255.png&quot; alt=&quot;Figurative drawing from Line of Action site&quot; /&gt;&lt;/p&gt;</content><author><name></name></author><category term="drawing" /><summary type="html"></summary></entry><entry><title type="html">Low poly in Inkscape</title><link href="https://kinoshita.eti.br/2021/03/11/low-poly-in-inkscape.html" rel="alternate" type="text/html" title="Low poly in Inkscape" /><published>2021-03-11T00:00:00+13:00</published><updated>2021-03-11T00:00:00+13:00</updated><id>https://kinoshita.eti.br/2021/03/11/low-poly-in-inkscape</id><content type="html" xml:base="https://kinoshita.eti.br/2021/03/11/low-poly-in-inkscape.html">&lt;p&gt;The &lt;a href=&quot;https://inkscape.org/news/2021/01/23/about-screen-contest-inkscape-11-started/&quot;&gt;last Inkscape about screen contest&lt;/a&gt;
had two entries that called my attention for being created in Inkscape and for
how nice they looked. Not having used Inkscape for low poly before, I decided
to give it a try.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/pages/art/images/low-poly-01.png&quot; alt=&quot;Low poly image&quot; class=&quot;center-aligned&quot; /&gt;&lt;/p&gt;

&lt;p&gt;After reading a handful of tutorials, I realized it is a very interesting
and relaxing process. You use a reference photo with low opacity as background,
and then create the polygons manually with a vector pen.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/pages/art/images/low-poly-02.png&quot; alt=&quot;Low poly image&quot; class=&quot;center-aligned&quot; /&gt;&lt;/p&gt;

&lt;p&gt;If I had to create many of these low poly images, I would probably automate it.
First looking for existing plug-ins or tools, or writing a simple script that
randomly creates the polygons based on a seed with some variance.&lt;/p&gt;

&lt;p&gt;The final result is very interesting for the eyes, creating an image that is easy
to “read” and can be used for social media and websites.&lt;/p&gt;</content><author><name></name></author><category term="digital illustration" /><category term="low poly" /><category term="inkscape" /><category term="vector art" /><category term="low poly" /><summary type="html">The last Inkscape about screen contest had two entries that called my attention for being created in Inkscape and for how nice they looked. Not having used Inkscape for low poly before, I decided to give it a try. After reading a handful of tutorials, I realized it is a very interesting and relaxing process. You use a reference photo with low opacity as background, and then create the polygons manually with a vector pen. If I had to create many of these low poly images, I would probably automate it. First looking for existing plug-ins or tools, or writing a simple script that randomly creates the polygons based on a seed with some variance. The final result is very interesting for the eyes, creating an image that is easy to “read” and can be used for social media and websites.</summary></entry><entry><title type="html">Yandê pães logo</title><link href="https://kinoshita.eti.br/2021/03/07/yande-paes-logo.html" rel="alternate" type="text/html" title="Yandê pães logo" /><published>2021-03-07T00:00:00+13:00</published><updated>2021-03-07T00:00:00+13:00</updated><id>https://kinoshita.eti.br/2021/03/07/yande-paes-logo</id><content type="html" xml:base="https://kinoshita.eti.br/2021/03/07/yande-paes-logo.html">&lt;p&gt;Logo created on Inkscape, based on ideas and sketches given by customer.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/pages/art/images/yande-1.png&quot; alt=&quot;Yandê logo&quot; class=&quot;center-aligned&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Used both for the store and for the social media and web sites.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/pages/art/images/yande-2.jpg&quot; alt=&quot;Yandê logo&quot; class=&quot;center-aligned&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/pages/art/images/yande-3.png&quot; alt=&quot;Yandê logo&quot; class=&quot;center-aligned&quot; /&gt;&lt;/p&gt;</content><author><name></name></author><category term="drawing" /><summary type="html">Logo created on Inkscape, based on ideas and sketches given by customer. Used both for the store and for the social media and web sites.</summary></entry><entry><title type="html">Figurative drawing line of action 2021-02-20</title><link href="https://kinoshita.eti.br/2021/02/20/figurative-drawing-line-of-action-2021-02-20.html" rel="alternate" type="text/html" title="Figurative drawing line of action 2021-02-20" /><published>2021-02-20T00:00:00+13:00</published><updated>2021-02-20T00:00:00+13:00</updated><id>https://kinoshita.eti.br/2021/02/20/figurative-drawing-line-of-action-2021-02-20</id><content type="html" xml:base="https://kinoshita.eti.br/2021/02/20/figurative-drawing-line-of-action-2021-02-20.html">&lt;p&gt;&lt;img src=&quot;/assets/pages/art/images/251.png&quot; alt=&quot;Figurative drawing from Line of Action site&quot; /&gt;&lt;/p&gt;</content><author><name></name></author><category term="drawing" /><summary type="html"></summary></entry><entry><title type="html">Rooster</title><link href="https://kinoshita.eti.br/2021/02/07/rooster.html" rel="alternate" type="text/html" title="Rooster" /><published>2021-02-07T00:00:00+13:00</published><updated>2021-02-07T00:00:00+13:00</updated><id>https://kinoshita.eti.br/2021/02/07/rooster</id><content type="html" xml:base="https://kinoshita.eti.br/2021/02/07/rooster.html">&lt;p&gt;Created in Krita from reference photo.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/pages/art/images/FRANGO.png&quot; alt=&quot;Digital drawing of a rooster&quot; class=&quot;center-aligned&quot; /&gt;&lt;/p&gt;</content><author><name></name></author><category term="editorial illustration" /><summary type="html">Created in Krita from reference photo.</summary></entry><entry><title type="html">Auckland CBD Life Drawing 2021-02-01</title><link href="https://kinoshita.eti.br/2021/02/01/auckland-cbd-life-drawing-2021-02-01.html" rel="alternate" type="text/html" title="Auckland CBD Life Drawing 2021-02-01" /><published>2021-02-01T00:00:00+13:00</published><updated>2021-02-01T00:00:00+13:00</updated><id>https://kinoshita.eti.br/2021/02/01/auckland-cbd-life-drawing-2021-02-01</id><content type="html" xml:base="https://kinoshita.eti.br/2021/02/01/auckland-cbd-life-drawing-2021-02-01.html">&lt;p&gt;&lt;a id=&quot;1&quot;&gt;
&lt;img class=&quot;ui fluid image&quot; src=&quot;/assets/pages/art/images/230.png&quot; alt=&quot;Figure drawing from life model&quot; /&gt;
&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a id=&quot;2&quot;&gt;
&lt;img class=&quot;ui fluid image&quot; src=&quot;/assets/pages/art/images/231.png&quot; alt=&quot;Figure drawing from life model&quot; /&gt;
&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a id=&quot;3&quot;&gt;
&lt;img class=&quot;ui fluid image&quot; src=&quot;/assets/pages/art/images/232.png&quot; alt=&quot;Figure drawing from life model&quot; /&gt;
&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a id=&quot;4&quot;&gt;
&lt;img class=&quot;ui fluid image&quot; src=&quot;/assets/pages/art/images/233.png&quot; alt=&quot;Figure drawing from life model&quot; /&gt;
&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a id=&quot;5&quot;&gt;
&lt;img class=&quot;ui fluid image&quot; src=&quot;/assets/pages/art/images/234.png&quot; alt=&quot;Figure drawing from life model&quot; /&gt;
&lt;/a&gt;&lt;/p&gt;</content><author><name></name></author><category term="drawing" /><category term="sketchbook" /><category term="life drawing" /><category term="figurative drawing" /><summary type="html"></summary></entry></feed>