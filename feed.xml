<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.8.5">Jekyll</generator><link href="https://kinoshita.eti.br/feed.xml" rel="self" type="application/atom+xml" /><link href="https://kinoshita.eti.br/" rel="alternate" type="text/html" /><updated>2020-06-28T18:51:10+12:00</updated><id>https://kinoshita.eti.br/feed.xml</id><title type="html">Bruno P. Kinoshita</title><subtitle>Bruno P. Kinoshita personal home page</subtitle><entry><title type="html">Poema: São Paulo e seus cabos</title><link href="https://kinoshita.eti.br/2020/06/21/poema-s%C3%A3o-paulo-e-seus-cabos.html" rel="alternate" type="text/html" title="Poema: São Paulo e seus cabos" /><published>2020-06-21T00:00:00+12:00</published><updated>2020-06-21T00:00:00+12:00</updated><id>https://kinoshita.eti.br/2020/06/21/poema-s%C3%A3o-paulo-e-seus-cabos</id><content type="html" xml:base="https://kinoshita.eti.br/2020/06/21/poema-s%C3%A3o-paulo-e-seus-cabos.html">&lt;pre&gt;
&lt;img class=&quot;text-image float-left&quot; src=&quot;/assets/posts/2020-06-21-poema-são-paulo-e-seus-cabos/sao-paulo-e-seus-cabos.png&quot; alt=&quot;A drawing with houses in Sao Paulo, with many electricity/tv/telephone cables in front of it&quot; aria-label=&quot;A drawing with houses in Sao Paulo, with many electricity/tv/telephone cables in front of it&quot; /&gt;

São Paulo tem cabos
De cabo a rabo
Cabos e mais cabos

São Paulo tem gatos nos cabos
E gente fazendo gatos para ter cabo
É tanto cabo que não acaba mais

Mas tanto e tanto cabo
Que a gente não dá cabo
É tanto cabo que não cabo mais

Ficaram os cabos
E fui-me-embora
Cabô
&lt;/pre&gt;</content><author><name></name></author><category term="sao paulo" /><summary type="html">São Paulo tem cabos De cabo a rabo Cabos e mais cabos São Paulo tem gatos nos cabos E gente fazendo gatos para ter cabo É tanto cabo que não acaba mais Mas tanto e tanto cabo Que a gente não dá cabo É tanto cabo que não cabo mais Ficaram os cabos E fui-me-embora Cabô</summary></entry><entry><title type="html">Learning new vocabulary with Shimura Ken Jailbreak story</title><link href="https://kinoshita.eti.br/2020/05/23/learning-new-vocabulary-with-shimura-ken-jailbreak-story.html" rel="alternate" type="text/html" title="Learning new vocabulary with Shimura Ken Jailbreak story" /><published>2020-05-23T00:00:00+12:00</published><updated>2020-05-23T00:00:00+12:00</updated><id>https://kinoshita.eti.br/2020/05/23/learning-new-vocabulary-with-shimura-ken-jailbreak-story</id><content type="html" xml:base="https://kinoshita.eti.br/2020/05/23/learning-new-vocabulary-with-shimura-ken-jailbreak-story.html">&lt;p&gt;I watched Shimura Ken (志村 けん) the first time doing his Bakatono-Sama character. With
a simple Japanese, still hard to understand his jokes, but luckily most of his videos were
translated to Portuguese or English.&lt;/p&gt;

&lt;p&gt;He passed away a few days ago, so I looked for some of his old videos to remember him.
“Jailbreak” (脱獄物語) is a story about jailed Shimura. His daughter visits him in jail,
and after the guard leaves, Drift Ken starts explaining to his daughter his escape plan.&lt;/p&gt;

&lt;p&gt;He demands her to bring some material to help him escape, and that’s where the comedy
begins. Shimura Ken plays with Japanese words with similar meaning. That’s a great way
to learn new vocabulary.&lt;/p&gt;

&lt;p&gt;He asks for a hacksaw first 金鋸 (&lt;strong&gt;かねのこ&lt;/strong&gt;, kanenoko), which his daughter confuses with a
baby turtle 亀の子 (&lt;strong&gt;かめのこ&lt;/strong&gt;, kamenoko).&lt;/p&gt;

&lt;p&gt;Next he asks for three items. The first item requested is powder 火薬 (&lt;strong&gt;かやく&lt;/strong&gt; kayaku),
but she brings instead a  suppository blister pack 座薬 (&lt;strong&gt;ざやく&lt;/strong&gt; zayaku).&lt;/p&gt;

&lt;p&gt;The second item are matches &lt;strong&gt;マッチ&lt;/strong&gt; (macchi), but when he asks she simply slaps his hand
&lt;strong&gt;タッチ&lt;/strong&gt; (tacchi). The final item he requests is a fuse 導火線 (&lt;strong&gt;どうかせん&lt;/strong&gt; doukasen),
which she heards as &lt;strong&gt;すいません&lt;/strong&gt; (suimasen), which means sorry.&lt;/p&gt;

&lt;p&gt;In his last attempt to escape with the help of his daughter, he asks her to bring
a rasp &lt;strong&gt;やすり&lt;/strong&gt; (yasuri). This time she does bring the right item, but just not
the right type.&lt;/p&gt;

&lt;p&gt;She brings a sandpaper sheet 紙やすり (&lt;strong&gt;紙やすり&lt;/strong&gt; kamiyasuri).&lt;/p&gt;</content><author><name></name></author><category term="language" /><category term="japanese" /><category term="shimura ken" /><summary type="html">I watched Shimura Ken (志村 けん) the first time doing his Bakatono-Sama character. With a simple Japanese, still hard to understand his jokes, but luckily most of his videos were translated to Portuguese or English. He passed away a few days ago, so I looked for some of his old videos to remember him. “Jailbreak” (脱獄物語) is a story about jailed Shimura. His daughter visits him in jail, and after the guard leaves, Drift Ken starts explaining to his daughter his escape plan. He demands her to bring some material to help him escape, and that’s where the comedy begins. Shimura Ken plays with Japanese words with similar meaning. That’s a great way to learn new vocabulary. He asks for a hacksaw first 金鋸 (かねのこ, kanenoko), which his daughter confuses with a baby turtle 亀の子 (かめのこ, kamenoko). Next he asks for three items. The first item requested is powder 火薬 (かやく kayaku), but she brings instead a suppository blister pack 座薬 (ざやく zayaku). The second item are matches マッチ (macchi), but when he asks she simply slaps his hand タッチ (tacchi). The final item he requests is a fuse 導火線 (どうかせん doukasen), which she heards as すいません (suimasen), which means sorry. In his last attempt to escape with the help of his daughter, he asks her to bring a rasp やすり (yasuri). This time she does bring the right item, but just not the right type. She brings a sandpaper sheet 紙やすり (紙やすり kamiyasuri).</summary></entry><entry><title type="html">Notes on Apache Jena StreamRDFWriter</title><link href="https://kinoshita.eti.br/2020/04/11/notes-on-apache-jena-streamrdfwriter.html" rel="alternate" type="text/html" title="Notes on Apache Jena StreamRDFWriter" /><published>2020-04-11T00:00:00+12:00</published><updated>2020-04-11T00:00:00+12:00</updated><id>https://kinoshita.eti.br/2020/04/11/notes-on-apache-jena-streamrdfwriter</id><content type="html" xml:base="https://kinoshita.eti.br/2020/04/11/notes-on-apache-jena-streamrdfwriter.html">&lt;p&gt;&lt;a href=&quot;https://jena.apache.org/&quot;&gt;Apache Jena&lt;/a&gt; project is like a box full of interesting things—at least if you love programming. One of its many features, is &lt;strong&gt;stream processing&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;The graphs in Jena may contain very large datasets, with giga- or terabytes. Some queries may be very large, and then sending the whole result would be simply impracticable.&lt;/p&gt;

&lt;p&gt;Instead, the data will go through ARQ. ARQ is a query engine for Jena that supports SPARQL. There is one piece of code there that I found interesting while reviewing a small pull request: &lt;a href=&quot;https://github.com/apache/jena/blob/cbdba5edb47041a4181a00bd7660e5d4c212530a/jena-arq/src/main/java/org/apache/jena/riot/system/StreamRDFWriter.java&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;org.apache.jena.riot.system.StreamRDFWriter&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;It is responsible for writing graph data in a streaming fashion. (See &lt;a href=&quot;https://en.wikipedia.org/wiki/Stream_processing&quot;&gt;stream processing&lt;/a&gt; for programming models and more.)&lt;/p&gt;

&lt;h2 id=&quot;stream-factories&quot;&gt;Stream factories&lt;/h2&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;StreamRDFWriter&lt;/code&gt; holds several implementations (as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;static&lt;/code&gt; members) of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;StreamRDFWriterFactory&lt;/code&gt;. The factory has one responsibility only, to create streams (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;StreamRDF&lt;/code&gt;), for a certain format and context.&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;fluid&quot; src=&quot;/assets/posts/2020-04-11-notes-on-apache-jena-streamrdfwriter/01.png&quot; /&gt;&lt;/p&gt;

&lt;!--more--&gt;

&lt;h2 id=&quot;streams-writer-registry&quot;&gt;Streams writer registry&lt;/h2&gt;

&lt;p&gt;All these factories and streams, the writer also needs a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;registry&lt;/code&gt;. It is used to access the writers required for streams using certain languages.&lt;/p&gt;

&lt;p&gt;So if you have your graph dataset, and need to retrieve triples as thrift, you will interrogate the registry asking for a factory of that language (Turtle, N-Triples, RDF-Thrift, etc) or format (Flat Turtle, N-Quads, N-Triples-ASCII, RDF-Thrift, etc).&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;fluid&quot; src=&quot;/assets/posts/2020-04-11-notes-on-apache-jena-streamrdfwriter/02.png&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;writing-data-to-streams&quot;&gt;Writing data to streams&lt;/h2&gt;

&lt;p&gt;Each writer has one responsibility too—I really like the design of certain modules in Jena.&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;fluid&quot; src=&quot;/assets/posts/2020-04-11-notes-on-apache-jena-streamrdfwriter/03.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The action, however, happens somewhere else. In the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;StreamRDFOps&lt;/code&gt; and in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Iterator&lt;/code&gt; implementations is where the stream processing really takes place.&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;fluid&quot; src=&quot;/assets/posts/2020-04-11-notes-on-apache-jena-streamrdfwriter/04.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;But this goes beyond the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;StreamRDFWriter&lt;/code&gt;. So that’s all for today.&lt;/p&gt;</content><author><name></name></author><category term="apache software foundation" /><category term="apache jena" /><category term="stream processing" /><category term="open source" /><category term="java" /><summary type="html">Apache Jena project is like a box full of interesting things—at least if you love programming. One of its many features, is stream processing. The graphs in Jena may contain very large datasets, with giga- or terabytes. Some queries may be very large, and then sending the whole result would be simply impracticable. Instead, the data will go through ARQ. ARQ is a query engine for Jena that supports SPARQL. There is one piece of code there that I found interesting while reviewing a small pull request: org.apache.jena.riot.system.StreamRDFWriter. It is responsible for writing graph data in a streaming fashion. (See stream processing for programming models and more.) Stream factories StreamRDFWriter holds several implementations (as static members) of StreamRDFWriterFactory. The factory has one responsibility only, to create streams (StreamRDF), for a certain format and context.</summary></entry><entry><title type="html">Lunar vehicle</title><link href="https://kinoshita.eti.br/2020/04/04/lunar-vehicle.html" rel="alternate" type="text/html" title="Lunar vehicle" /><published>2020-04-04T00:00:00+13:00</published><updated>2020-04-04T00:00:00+13:00</updated><id>https://kinoshita.eti.br/2020/04/04/lunar-vehicle</id><content type="html" xml:base="https://kinoshita.eti.br/2020/04/04/lunar-vehicle.html">&lt;p&gt;&lt;img class=&quot;fluid&quot; src=&quot;/assets/posts/2020-04-04-lunar-vehicle/lunar-vehicle.png&quot; alt=&quot;Lunar vehicle sketch&quot; /&gt;&lt;/p&gt;</content><author><name></name></author><summary type="html"></summary></entry><entry><title type="html">Apple 2</title><link href="https://kinoshita.eti.br/2020/04/04/apple-2.html" rel="alternate" type="text/html" title="Apple 2" /><published>2020-04-04T00:00:00+13:00</published><updated>2020-04-04T00:00:00+13:00</updated><id>https://kinoshita.eti.br/2020/04/04/apple-2</id><content type="html" xml:base="https://kinoshita.eti.br/2020/04/04/apple-2.html">&lt;p&gt;&lt;img class=&quot;fluid&quot; src=&quot;/assets/posts/2020-04-04-apple-2/apple-02.png&quot; alt=&quot;Apple 2&quot; /&gt;&lt;/p&gt;</content><author><name></name></author><summary type="html"></summary></entry><entry><title type="html">Stink Bug</title><link href="https://kinoshita.eti.br/2020/04/03/stink-bug.html" rel="alternate" type="text/html" title="Stink Bug" /><published>2020-04-03T00:00:00+13:00</published><updated>2020-04-03T00:00:00+13:00</updated><id>https://kinoshita.eti.br/2020/04/03/stink-bug</id><content type="html" xml:base="https://kinoshita.eti.br/2020/04/03/stink-bug.html">&lt;p&gt;&lt;img src=&quot;/assets/pages/art/images/stink-bug-smaller.png&quot; /&gt;&lt;/p&gt;</content><author><name></name></author><summary type="html"></summary></entry><entry><title type="html">Old Hands</title><link href="https://kinoshita.eti.br/2020/04/03/old-hands.html" rel="alternate" type="text/html" title="Old Hands" /><published>2020-04-03T00:00:00+13:00</published><updated>2020-04-03T00:00:00+13:00</updated><id>https://kinoshita.eti.br/2020/04/03/old-hands</id><content type="html" xml:base="https://kinoshita.eti.br/2020/04/03/old-hands.html">&lt;p&gt;&lt;img src=&quot;/assets/pages/art/images/old-hands.png&quot; /&gt;&lt;/p&gt;</content><author><name></name></author><summary type="html"></summary></entry><entry><title type="html">Green Skull</title><link href="https://kinoshita.eti.br/2020/04/03/green-skull.html" rel="alternate" type="text/html" title="Green Skull" /><published>2020-04-03T00:00:00+13:00</published><updated>2020-04-03T00:00:00+13:00</updated><id>https://kinoshita.eti.br/2020/04/03/green-skull</id><content type="html" xml:base="https://kinoshita.eti.br/2020/04/03/green-skull.html">&lt;p&gt;&lt;img src=&quot;/assets/pages/art/images/green-skull-full.png&quot; /&gt;&lt;/p&gt;</content><author><name></name></author><summary type="html"></summary></entry><entry><title type="html">Simone</title><link href="https://kinoshita.eti.br/2020/04/01/simone.html" rel="alternate" type="text/html" title="Simone" /><published>2020-04-01T00:00:00+13:00</published><updated>2020-04-01T00:00:00+13:00</updated><id>https://kinoshita.eti.br/2020/04/01/simone</id><content type="html" xml:base="https://kinoshita.eti.br/2020/04/01/simone.html">&lt;p&gt;&lt;img src=&quot;/assets/pages/art/images/simone.png&quot; /&gt;&lt;/p&gt;</content><author><name></name></author><summary type="html"></summary></entry><entry><title type="html">Royal Spoonbill</title><link href="https://kinoshita.eti.br/2020/04/01/royal-spoonbill.html" rel="alternate" type="text/html" title="Royal Spoonbill" /><published>2020-04-01T00:00:00+13:00</published><updated>2020-04-01T00:00:00+13:00</updated><id>https://kinoshita.eti.br/2020/04/01/royal-spoonbill</id><content type="html" xml:base="https://kinoshita.eti.br/2020/04/01/royal-spoonbill.html">&lt;p&gt;&lt;img src=&quot;/assets/pages/art/images/royal-spoonbill.png&quot; /&gt;&lt;/p&gt;</content><author><name></name></author><summary type="html"></summary></entry></feed>